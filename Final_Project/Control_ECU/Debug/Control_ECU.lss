
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000235a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  0000235a  000023ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800180  00800180  0000250e  2**0
                  ALLOC
  3 .stab         000028e0  00000000  00000000  00002510  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017c5  00000000  00000000  00004df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000065b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00006755  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00006945  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00008d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b2a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000b460  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000b753  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 db 08 	jmp	0x11b6	; 0x11b6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e5       	ldi	r30, 0x5A	; 90
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4c 10 	call	0x2098	; 0x2098 <main>
      8a:	0c 94 ab 11 	jmp	0x2356	; 0x2356 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 98 11 	jmp	0x2330	; 0x2330 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 a0 11 	jmp	0x2340	; 0x2340 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <UART_init>:
 * baud rate & frame:
 * 1-parity bit
 * 2-number of data bits
 * 3-stop bits"
 */
void UART_init(const UART_ConfigType *config_ptr) {
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <UART_init+0x6>
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <UART_init+0x8>
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	9c 83       	std	Y+4, r25	; 0x04
     e06:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBRRValue = 0;
     e08:	1a 82       	std	Y+2, r1	; 0x02
     e0a:	19 82       	std	Y+1, r1	; 0x01

	/*Calculating the value of UBRR to obtain certain baud rate*/
	UBRRValue = (uint16) (((F_CPU / (config_ptr->baud_rate * 8UL))) - 1);
     e0c:	eb 81       	ldd	r30, Y+3	; 0x03
     e0e:	fc 81       	ldd	r31, Y+4	; 0x04
     e10:	83 81       	ldd	r24, Z+3	; 0x03
     e12:	94 81       	ldd	r25, Z+4	; 0x04
     e14:	a5 81       	ldd	r26, Z+5	; 0x05
     e16:	b6 81       	ldd	r27, Z+6	; 0x06
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	aa 1f       	adc	r26, r26
     e1e:	bb 1f       	adc	r27, r27
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	aa 1f       	adc	r26, r26
     e26:	bb 1f       	adc	r27, r27
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	aa 1f       	adc	r26, r26
     e2e:	bb 1f       	adc	r27, r27
     e30:	9c 01       	movw	r18, r24
     e32:	ad 01       	movw	r20, r26
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	92 e1       	ldi	r25, 0x12	; 18
     e38:	aa e7       	ldi	r26, 0x7A	; 122
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	bc 01       	movw	r22, r24
     e3e:	cd 01       	movw	r24, r26
     e40:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodsi4>
     e44:	da 01       	movw	r26, r20
     e46:	c9 01       	movw	r24, r18
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	9a 83       	std	Y+2, r25	; 0x02
     e4c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Writing this bit to one to reduce the divisor of the baud rate divider
	 * from 16 to 8 to double the transfer rate.
	 */
	UCSRA = 1 << U2X;
     e4e:	eb e2       	ldi	r30, 0x2B	; 43
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	80 83       	st	Z, r24
	 * Writing RXEN bit and TXEN to one to enable the USART Receiver.
	 * The Receiver and transmitter will override normal port operation
	 * for the RxD and TxD pins when enabled.
	 * if 9 bit mode were chosen set UCZ2 to 1 "masking bit 2 in bit_data which is one when 9 bit mode is chosen"
	 */
	UCSRB = (1 << TXEN) | (1 << RXEN) | ((config_ptr->bit_data & 0x04) << 1);
     e56:	aa e2       	ldi	r26, 0x2A	; 42
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb 81       	ldd	r30, Y+3	; 0x03
     e5c:	fc 81       	ldd	r31, Y+4	; 0x04
     e5e:	80 81       	ld	r24, Z
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	84 70       	andi	r24, 0x04	; 4
     e66:	90 70       	andi	r25, 0x00	; 0
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	88 61       	ori	r24, 0x18	; 24
     e6e:	8c 93       	st	X, r24
	 * USMEL bit is zero to choose asynchronous mode
	 * select parity mode in UPM1:0 bits
	 * select data bits in UCSZ0 & UCSZ1 bits "masking first two bits only in bit_data"
	 * select stop bits in USBS bit
	 */
	UCSRC = (1 << URSEL) | (config_ptr->stop_bit << 3)
     e70:	a0 e4       	ldi	r26, 0x40	; 64
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	eb 81       	ldd	r30, Y+3	; 0x03
     e76:	fc 81       	ldd	r31, Y+4	; 0x04
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	28 2f       	mov	r18, r24
     e8c:	20 68       	ori	r18, 0x80	; 128
     e8e:	eb 81       	ldd	r30, Y+3	; 0x03
     e90:	fc 81       	ldd	r31, Y+4	; 0x04
     e92:	80 81       	ld	r24, Z
     e94:	88 2f       	mov	r24, r24
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	83 70       	andi	r24, 0x03	; 3
     e9a:	90 70       	andi	r25, 0x00	; 0
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	28 2b       	or	r18, r24
     ea2:	eb 81       	ldd	r30, Y+3	; 0x03
     ea4:	fc 81       	ldd	r31, Y+4	; 0x04
     ea6:	81 81       	ldd	r24, Z+1	; 0x01
     ea8:	88 2f       	mov	r24, r24
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	82 95       	swap	r24
     eae:	92 95       	swap	r25
     eb0:	90 7f       	andi	r25, 0xF0	; 240
     eb2:	98 27       	eor	r25, r24
     eb4:	80 7f       	andi	r24, 0xF0	; 240
     eb6:	98 27       	eor	r25, r24
     eb8:	82 2b       	or	r24, r18
     eba:	8c 93       	st	X, r24
	 * Writing URSEL to zero to select register UBBRH to be accessed
	 * determine the content of UBRRL register depending on the baud rate
	 * UBRR = (Fosc/(8*baudrate))-1
	 * put the Lower 8 bits in UBRRL register and 8:11 bits in UBRRH
	 */
	UBRRH = 0;
     ebc:	e0 e4       	ldi	r30, 0x40	; 64
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	10 82       	st	Z, r1
	UBRRH = UBRRValue >> 8;
     ec2:	e0 e4       	ldi	r30, 0x40	; 64
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
     eca:	89 2f       	mov	r24, r25
     ecc:	99 27       	eor	r25, r25
     ece:	80 83       	st	Z, r24
	UBRRL = UBRRValue & 0x00FF;
     ed0:	e9 e2       	ldi	r30, 0x29	; 41
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	80 83       	st	Z, r24

}
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <UART_sendData>:
/*
 * Description:
 * sending Data with UART
 */
void UART_sendData(uint8 data) {
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	LOOP_UNTIL_BIT_IS_SET(UCSRA, UDRE);
     ef2:	eb e2       	ldi	r30, 0x2B	; 43
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	80 72       	andi	r24, 0x20	; 32
     efe:	90 70       	andi	r25, 0x00	; 0
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	b9 f3       	breq	.-18     	; 0xef2 <UART_sendData+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     f04:	ec e2       	ldi	r30, 0x2C	; 44
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	80 83       	st	Z, r24
}
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	08 95       	ret

00000f14 <UART_receiveData>:
/*
 * Description:
 * receiving Data with UART
 */
uint8 UART_receiveData(void) {
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	LOOP_UNTIL_BIT_IS_SET(UCSRA, RXC);
     f1c:	eb e2       	ldi	r30, 0x2B	; 43
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	88 23       	and	r24, r24
     f24:	dc f7       	brge	.-10     	; 0xf1c <UART_receiveData+0x8>
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
     f26:	ec e2       	ldi	r30, 0x2C	; 44
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	00 d0       	rcall	.+0      	; 0xf38 <UART_sendString+0x6>
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	9b 83       	std	Y+3, r25	; 0x03
     f40:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     f42:	19 82       	std	Y+1, r1	; 0x01
     f44:	0e c0       	rjmp	.+28     	; 0xf62 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendData(Str[i]);
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	9b 81       	ldd	r25, Y+3	; 0x03
     f50:	fc 01       	movw	r30, r24
     f52:	e2 0f       	add	r30, r18
     f54:	f3 1f       	adc	r31, r19
     f56:	80 81       	ld	r24, Z
     f58:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
		i++;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	8f 5f       	subi	r24, 0xFF	; 255
     f60:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	9b 81       	ldd	r25, Y+3	; 0x03
     f6c:	fc 01       	movw	r30, r24
     f6e:	e2 0f       	add	r30, r18
     f70:	f3 1f       	adc	r31, r19
     f72:	80 81       	ld	r24, Z
     f74:	88 23       	and	r24, r24
     f76:	39 f7       	brne	.-50     	; 0xf46 <UART_sendString+0x14>
		UART_sendData(Str[i]);
		i++;
	}
}
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	00 d0       	rcall	.+0      	; 0xf8e <UART_receiveString+0xa>
     f8e:	0f 92       	push	r0
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	9b 83       	std	Y+3, r25	; 0x03
     f96:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     f98:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveData();
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	9b 81       	ldd	r25, Y+3	; 0x03
     fa4:	8c 01       	movw	r16, r24
     fa6:	02 0f       	add	r16, r18
     fa8:	13 1f       	adc	r17, r19
     faa:	0e 94 8a 07 	call	0xf14	; 0xf14 <UART_receiveData>
     fae:	f8 01       	movw	r30, r16
     fb0:	80 83       	st	Z, r24
     fb2:	0f c0       	rjmp	.+30     	; 0xfd2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveData();
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	8c 01       	movw	r16, r24
     fc6:	02 0f       	add	r16, r18
     fc8:	13 1f       	adc	r17, r19
     fca:	0e 94 8a 07 	call	0xf14	; 0xf14 <UART_receiveData>
     fce:	f8 01       	movw	r30, r16
     fd0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveData();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	9b 81       	ldd	r25, Y+3	; 0x03
     fdc:	fc 01       	movw	r30, r24
     fde:	e2 0f       	add	r30, r18
     fe0:	f3 1f       	adc	r31, r19
     fe2:	80 81       	ld	r24, Z
     fe4:	83 32       	cpi	r24, 0x23	; 35
     fe6:	31 f7       	brne	.-52     	; 0xfb4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveData();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	9b 81       	ldd	r25, Y+3	; 0x03
     ff2:	fc 01       	movw	r30, r24
     ff4:	e2 0f       	add	r30, r18
     ff6:	f3 1f       	adc	r31, r19
     ff8:	10 82       	st	Z, r1
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	08 95       	ret

0000100a <PWM_Timer0_Start>:
 * Timer0 will be used with pre-scaler F_CPU/64
 * F_PWM=(F_CPU)/(256*N) = (8*10^6)/(256*64) = 490Hz
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */
void PWM_Timer0_Start(uint8 duty_cycle) {
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    101a:	e2 e5       	ldi	r30, 0x52	; 82
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	10 82       	st	Z, r1

	OCR0 = (duty_cycle / 100.0) * 255; // Set Compare Value
    1020:	0c e5       	ldi	r16, 0x5C	; 92
    1022:	10 e0       	ldi	r17, 0x00	; 0
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	88 2f       	mov	r24, r24
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	aa 27       	eor	r26, r26
    102c:	97 fd       	sbrc	r25, 7
    102e:	a0 95       	com	r26
    1030:	ba 2f       	mov	r27, r26
    1032:	bc 01       	movw	r22, r24
    1034:	cd 01       	movw	r24, r26
    1036:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	bc 01       	movw	r22, r24
    1040:	cd 01       	movw	r24, r26
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	48 ec       	ldi	r20, 0xC8	; 200
    1048:	52 e4       	ldi	r21, 0x42	; 66
    104a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	4f e7       	ldi	r20, 0x7F	; 127
    105c:	53 e4       	ldi	r21, 0x43	; 67
    105e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	bc 01       	movw	r22, r24
    1068:	cd 01       	movw	r24, r26
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	f8 01       	movw	r30, r16
    1074:	80 83       	st	Z, r24

	DDRB |= (1 << PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1076:	a7 e3       	ldi	r26, 0x37	; 55
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e7 e3       	ldi	r30, 0x37	; 55
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	88 60       	ori	r24, 0x08	; 8
    1082:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
	 */
	TCCR0 = (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS01)
    1084:	e3 e5       	ldi	r30, 0x53	; 83
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8b e6       	ldi	r24, 0x6B	; 107
    108a:	80 83       	st	Z, r24
			| (1 << CS00);
}
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	08 95       	ret

00001098 <Timer1_init>:
 * 1. initial value of the timer
 * 2. compare value for compare mode
 * 3. prescaler
 * 4. mode of the timer
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	00 d0       	rcall	.+0      	; 0x109e <Timer1_init+0x6>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <Timer1_init+0x8>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Putting the initial value in TCNT1 Register
	 * Save the initial value in the global variable to initialize the register with each interrupt
	 */
	TCNT1 = Config_Ptr->initial_value;
    10a8:	ac e4       	ldi	r26, 0x4C	; 76
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e9 81       	ldd	r30, Y+1	; 0x01
    10ae:	fa 81       	ldd	r31, Y+2	; 0x02
    10b0:	80 81       	ld	r24, Z
    10b2:	91 81       	ldd	r25, Z+1	; 0x01
    10b4:	11 96       	adiw	r26, 0x01	; 1
    10b6:	9c 93       	st	X, r25
    10b8:	8e 93       	st	-X, r24
	G_initialValue = Config_Ptr->initial_value;
    10ba:	e9 81       	ldd	r30, Y+1	; 0x01
    10bc:	fa 81       	ldd	r31, Y+2	; 0x02
    10be:	80 81       	ld	r24, Z
    10c0:	91 81       	ldd	r25, Z+1	; 0x01
    10c2:	90 93 84 01 	sts	0x0184, r25
    10c6:	80 93 83 01 	sts	0x0183, r24
	/*
	 * Sets FOC1A/FOC1B For Non-PWM Mode
	 */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    10ca:	ef e4       	ldi	r30, 0x4F	; 79
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	8c e0       	ldi	r24, 0x0C	; 12
    10d0:	80 83       	st	Z, r24
	 * select the requested mode pins "WGM10 ,WGM11, WGM12"
	 * normal Mode 000
	 * compare mode 100
	 * for compare mode put the compare value in OCR1A register
	 */
	switch (Config_Ptr->mode) {
    10d2:	e9 81       	ldd	r30, Y+1	; 0x01
    10d4:	fa 81       	ldd	r31, Y+2	; 0x02
    10d6:	85 81       	ldd	r24, Z+5	; 0x05
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	3c 83       	std	Y+4, r19	; 0x04
    10de:	2b 83       	std	Y+3, r18	; 0x03
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	9c 81       	ldd	r25, Y+4	; 0x04
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	31 f0       	breq	.+12     	; 0x10f4 <Timer1_init+0x5c>
    10e8:	2b 81       	ldd	r18, Y+3	; 0x03
    10ea:	3c 81       	ldd	r19, Y+4	; 0x04
    10ec:	21 30       	cpi	r18, 0x01	; 1
    10ee:	31 05       	cpc	r19, r1
    10f0:	31 f0       	breq	.+12     	; 0x10fe <Timer1_init+0x66>
    10f2:	19 c0       	rjmp	.+50     	; 0x1126 <Timer1_init+0x8e>
	case NORMAL_MODE:
		TIMSK = 1 << TOIE1;
    10f4:	e9 e5       	ldi	r30, 0x59	; 89
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	84 e0       	ldi	r24, 0x04	; 4
    10fa:	80 83       	st	Z, r24
    10fc:	14 c0       	rjmp	.+40     	; 0x1126 <Timer1_init+0x8e>
		break;
	case CTC_MODE:
		TIMSK = (1 << OCIE1A);
    10fe:	e9 e5       	ldi	r30, 0x59	; 89
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 e1       	ldi	r24, 0x10	; 16
    1104:	80 83       	st	Z, r24
		TCCR1B |= (1 << WGM12);
    1106:	ae e4       	ldi	r26, 0x4E	; 78
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ee e4       	ldi	r30, 0x4E	; 78
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	88 60       	ori	r24, 0x08	; 8
    1112:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;
    1114:	aa e4       	ldi	r26, 0x4A	; 74
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e9 81       	ldd	r30, Y+1	; 0x01
    111a:	fa 81       	ldd	r31, Y+2	; 0x02
    111c:	82 81       	ldd	r24, Z+2	; 0x02
    111e:	93 81       	ldd	r25, Z+3	; 0x03
    1120:	11 96       	adiw	r26, 0x01	; 1
    1122:	9c 93       	st	X, r25
    1124:	8e 93       	st	-X, r24
	 * F CPU / 8 -> 010
	 * F CPU / 64 -> 011
	 * F CPU / 256 -> 100
	 * F CPU / 1024 -> 101
	 */
	TCCR1B |= (Config_Ptr->prescaler & 0x07);
    1126:	ae e4       	ldi	r26, 0x4E	; 78
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	ee e4       	ldi	r30, 0x4E	; 78
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	98 2f       	mov	r25, r24
    1132:	e9 81       	ldd	r30, Y+1	; 0x01
    1134:	fa 81       	ldd	r31, Y+2	; 0x02
    1136:	84 81       	ldd	r24, Z+4	; 0x04
    1138:	87 70       	andi	r24, 0x07	; 7
    113a:	89 2b       	or	r24, r25
    113c:	8c 93       	st	X, r24
}
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <Timer1_deInit>:
/*
 * Description:
 * Function to disable timer 1
 */
void Timer1_deInit(void) {
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
	//Clear Prescaler
	TCCR1B = TCCR1B & 0XF8;
    1154:	ae e4       	ldi	r26, 0x4E	; 78
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	ee e4       	ldi	r30, 0x4E	; 78
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	88 7f       	andi	r24, 0xF8	; 248
    1160:	8c 93       	st	X, r24
	//Close Timer 1 Overflow Interrupt
	CLEAR_BIT(TIMSK, TOIE1);
    1162:	a9 e5       	ldi	r26, 0x59	; 89
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e9 e5       	ldi	r30, 0x59	; 89
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	8b 7f       	andi	r24, 0xFB	; 251
    116e:	8c 93       	st	X, r24
	//Close Timer 1 Compare Interrupt For Channel A
	CLEAR_BIT(TIMSK, OCIE1A);
    1170:	a9 e5       	ldi	r26, 0x59	; 89
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e9 e5       	ldi	r30, 0x59	; 89
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	8f 7e       	andi	r24, 0xEF	; 239
    117c:	8c 93       	st	X, r24
	//Close Timer 1 Compare Interrupt For Channel B
	CLEAR_BIT(TIMSK, OCIE1B);
    117e:	a9 e5       	ldi	r26, 0x59	; 89
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e9 e5       	ldi	r30, 0x59	; 89
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	87 7f       	andi	r24, 0xF7	; 247
    118a:	8c 93       	st	X, r24
}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <Timer1_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address
 */
void Timer1_setCallBack(void (*a_ptr)(void)) {
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	00 d0       	rcall	.+0      	; 0x1198 <Timer1_setCallBack+0x6>
    1198:	cd b7       	in	r28, 0x3d	; 61
    119a:	de b7       	in	r29, 0x3e	; 62
    119c:	9a 83       	std	Y+2, r25	; 0x02
    119e:	89 83       	std	Y+1, r24	; 0x01
	timer1CallBack = a_ptr;
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	9a 81       	ldd	r25, Y+2	; 0x02
    11a4:	90 93 81 01 	sts	0x0181, r25
    11a8:	80 93 80 01 	sts	0x0180, r24
}
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <__vector_9>:

/*
 * ISR for Timer 1 Normal Mode
 */
ISR(TIMER1_OVF_vect) {
    11b6:	1f 92       	push	r1
    11b8:	0f 92       	push	r0
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	0f 92       	push	r0
    11be:	11 24       	eor	r1, r1
    11c0:	2f 93       	push	r18
    11c2:	3f 93       	push	r19
    11c4:	4f 93       	push	r20
    11c6:	5f 93       	push	r21
    11c8:	6f 93       	push	r22
    11ca:	7f 93       	push	r23
    11cc:	8f 93       	push	r24
    11ce:	9f 93       	push	r25
    11d0:	af 93       	push	r26
    11d2:	bf 93       	push	r27
    11d4:	ef 93       	push	r30
    11d6:	ff 93       	push	r31
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = G_initialValue; /*initialize TCNT1 with the initial value*/
    11e0:	ec e4       	ldi	r30, 0x4C	; 76
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 91 83 01 	lds	r24, 0x0183
    11e8:	90 91 84 01 	lds	r25, 0x0184
    11ec:	91 83       	std	Z+1, r25	; 0x01
    11ee:	80 83       	st	Z, r24
	if (timer1CallBack != NULL_PTR) {
    11f0:	80 91 80 01 	lds	r24, 0x0180
    11f4:	90 91 81 01 	lds	r25, 0x0181
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	29 f0       	breq	.+10     	; 0x1206 <__vector_9+0x50>
		timer1CallBack();
    11fc:	e0 91 80 01 	lds	r30, 0x0180
    1200:	f0 91 81 01 	lds	r31, 0x0181
    1204:	09 95       	icall
	}
}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	ff 91       	pop	r31
    120c:	ef 91       	pop	r30
    120e:	bf 91       	pop	r27
    1210:	af 91       	pop	r26
    1212:	9f 91       	pop	r25
    1214:	8f 91       	pop	r24
    1216:	7f 91       	pop	r23
    1218:	6f 91       	pop	r22
    121a:	5f 91       	pop	r21
    121c:	4f 91       	pop	r20
    121e:	3f 91       	pop	r19
    1220:	2f 91       	pop	r18
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <__vector_7>:
/*
 * ISR for Timer 1 compare Mode
 */
ISR(TIMER1_COMPA_vect) {
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	2f 93       	push	r18
    1238:	3f 93       	push	r19
    123a:	4f 93       	push	r20
    123c:	5f 93       	push	r21
    123e:	6f 93       	push	r22
    1240:	7f 93       	push	r23
    1242:	8f 93       	push	r24
    1244:	9f 93       	push	r25
    1246:	af 93       	push	r26
    1248:	bf 93       	push	r27
    124a:	ef 93       	push	r30
    124c:	ff 93       	push	r31
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = G_initialValue; /*initialize TCNT1 with the initial value*/
    1256:	ec e4       	ldi	r30, 0x4C	; 76
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 91 83 01 	lds	r24, 0x0183
    125e:	90 91 84 01 	lds	r25, 0x0184
    1262:	91 83       	std	Z+1, r25	; 0x01
    1264:	80 83       	st	Z, r24
	if (timer1CallBack != NULL_PTR) {
    1266:	80 91 80 01 	lds	r24, 0x0180
    126a:	90 91 81 01 	lds	r25, 0x0181
    126e:	00 97       	sbiw	r24, 0x00	; 0
    1270:	29 f0       	breq	.+10     	; 0x127c <__vector_7+0x50>
		timer1CallBack();
    1272:	e0 91 80 01 	lds	r30, 0x0180
    1276:	f0 91 81 01 	lds	r31, 0x0181
    127a:	09 95       	icall
	}
}
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	0f 90       	pop	r0
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	0f 90       	pop	r0
    129e:	1f 90       	pop	r1
    12a0:	18 95       	reti

000012a2 <TWI_init>:
 * Description:
 * Function to initialize I2C with :
 * 1. Baud Rate
 * 2. Device address
 */
void TWI_init(const TWI_ConfigType *Config_Ptr) {
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <TWI_init+0x6>
    12a8:	0f 92       	push	r0
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	9b 83       	std	Y+3, r25	; 0x03
    12b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 twbrValue = 0;
    12b2:	19 82       	std	Y+1, r1	; 0x01
	 *TWSR No prescaler -> 00 "TWPS0,TWPS1"
	 *SCL Frequency = (F_CPU)/(16+2*(TWBR)*4^TWPS
	 *SCL Frequency = (F_CPU)/(16+2*(TWBR)*4^0
	 *TWBR = F_CPU / (2* SCL Frequency) - 8
	 */
	twbrValue = (uint8) ((uint16) F_CPU / (2 * Config_Ptr->bit_rate)) - 8;
    12b4:	ea 81       	ldd	r30, Y+2	; 0x02
    12b6:	fb 81       	ldd	r31, Y+3	; 0x03
    12b8:	81 81       	ldd	r24, Z+1	; 0x01
    12ba:	92 81       	ldd	r25, Z+2	; 0x02
    12bc:	a3 81       	ldd	r26, Z+3	; 0x03
    12be:	b4 81       	ldd	r27, Z+4	; 0x04
    12c0:	9c 01       	movw	r18, r24
    12c2:	ad 01       	movw	r20, r26
    12c4:	22 0f       	add	r18, r18
    12c6:	33 1f       	adc	r19, r19
    12c8:	44 1f       	adc	r20, r20
    12ca:	55 1f       	adc	r21, r21
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	92 e1       	ldi	r25, 0x12	; 18
    12d0:	a0 e0       	ldi	r26, 0x00	; 0
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__udivmodsi4>
    12dc:	da 01       	movw	r26, r20
    12de:	c9 01       	movw	r24, r18
    12e0:	88 50       	subi	r24, 0x08	; 8
    12e2:	89 83       	std	Y+1, r24	; 0x01
	TWSR = 0;
    12e4:	e1 e2       	ldi	r30, 0x21	; 33
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	10 82       	st	Z, r1
	TWBR = twbrValue;
    12ea:	e0 e2       	ldi	r30, 0x20	; 32
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	80 83       	st	Z, r24
	/* Two Wire Bus address my address if any master device want to call me: 0x01 (used in case this MC is a slave device)
	 General Call Recognition: Off */
	TWAR = Config_Ptr->address << 1;
    12f2:	a2 e2       	ldi	r26, 0x22	; 34
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	ea 81       	ldd	r30, Y+2	; 0x02
    12f8:	fb 81       	ldd	r31, Y+3	; 0x03
    12fa:	80 81       	ld	r24, Z
    12fc:	88 0f       	add	r24, r24
    12fe:	8c 93       	st	X, r24
	/*
	 * Enabling TWI
	 */
	TWCR = 1 << TWEN;
    1300:	e6 e5       	ldi	r30, 0x56	; 86
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	80 83       	st	Z, r24
}
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <TWI_start>:
/*
 * Description:
 * Function to Send Start bit
 */
void TWI_start(void) {
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    131c:	e6 e5       	ldi	r30, 0x56	; 86
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	84 ea       	ldi	r24, 0xA4	; 164
    1322:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	LOOP_UNTIL_BIT_IS_SET(TWCR, TWINT);
    1324:	e6 e5       	ldi	r30, 0x56	; 86
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	88 23       	and	r24, r24
    132c:	dc f7       	brge	.-10     	; 0x1324 <TWI_start+0x10>
}
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	08 95       	ret

00001334 <TWI_stop>:
/*
 * Description:
 * Function to Send Stop bit
 */
void TWI_stop(void) {
    1334:	df 93       	push	r29
    1336:	cf 93       	push	r28
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    133c:	e6 e5       	ldi	r30, 0x56	; 86
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	84 e9       	ldi	r24, 0x94	; 148
    1342:	80 83       	st	Z, r24
}
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <TWI_writeByte>:
/*
 * Description:
 * function to put next data byte to be transmitted
 * and wait for it to be sent successfully
 */
void TWI_writeByte(uint8 data) {
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	0f 92       	push	r0
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
    1354:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWDR = data;
    1356:	e3 e2       	ldi	r30, 0x23	; 35
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	80 83       	st	Z, r24
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    135e:	e6 e5       	ldi	r30, 0x56	; 86
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	84 e8       	ldi	r24, 0x84	; 132
    1364:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	LOOP_UNTIL_BIT_IS_SET(TWCR, TWINT);
    1366:	e6 e5       	ldi	r30, 0x56	; 86
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	88 23       	and	r24, r24
    136e:	dc f7       	brge	.-10     	; 0x1366 <TWI_writeByte+0x1c>
}
    1370:	0f 90       	pop	r0
    1372:	cf 91       	pop	r28
    1374:	df 91       	pop	r29
    1376:	08 95       	ret

00001378 <TWI_readByteWithACK>:
/*
 * Description:
 * Function to read byte and send acknowledge bit after receiving
 * Wait until the byte is received successfully
 */
uint8 TWI_readByteWithACK(void) {
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1380:	e6 e5       	ldi	r30, 0x56	; 86
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	84 ec       	ldi	r24, 0xC4	; 196
    1386:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	LOOP_UNTIL_BIT_IS_SET(TWCR, TWINT);
    1388:	e6 e5       	ldi	r30, 0x56	; 86
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	88 23       	and	r24, r24
    1390:	dc f7       	brge	.-10     	; 0x1388 <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    1392:	e3 e2       	ldi	r30, 0x23	; 35
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
}
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <TWI_readByteWithNACK>:
/*
 * Description:
 * Function to read byte without sending acknowledge bit after receiving
 * wait until the bit is received successfully
 */
uint8 TWI_readByteWithNACK(void) {
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    13a6:	e6 e5       	ldi	r30, 0x56	; 86
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	84 e8       	ldi	r24, 0x84	; 132
    13ac:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	LOOP_UNTIL_BIT_IS_SET(TWCR, TWINT);
    13ae:	e6 e5       	ldi	r30, 0x56	; 86
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	88 23       	and	r24, r24
    13b6:	dc f7       	brge	.-10     	; 0x13ae <TWI_readByteWithNACK+0x10>
	/* Read Data */
	return TWDR;
    13b8:	e3 e2       	ldi	r30, 0x23	; 35
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <TWI_getStatus>:
/*
 * Description:
 * Function to get the status of the TWI logic and the Two-wire Serial Bus.
 */
uint8 TWI_getStatus(void) {
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	0f 92       	push	r0
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    13ce:	e1 e2       	ldi	r30, 0x21	; 33
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	88 7f       	andi	r24, 0xF8	; 248
    13d6:	89 83       	std	Y+1, r24	; 0x01
	return status;
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13da:	0f 90       	pop	r0
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <DCMotor_init>:
/*
 * Description:
 * initializing motor pins to be output
 * stop the motor at the beginning
 */
void DCMotor_init(void) {
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN_1_ID, PIN_OUTPUT);
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	60 e0       	ldi	r22, 0x00	; 0
    13ee:	41 e0       	ldi	r20, 0x01	; 1
    13f0:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_PIN_2_ID, PIN_OUTPUT);
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	61 e0       	ldi	r22, 0x01	; 1
    13f8:	41 e0       	ldi	r20, 0x01	; 1
    13fa:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <GPIO_setupPinDirection>

	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_LOW);
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_LOW);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	61 e0       	ldi	r22, 0x01	; 1
    140c:	40 e0       	ldi	r20, 0x00	; 0
    140e:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_writePin>
}
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <DCMotor_rotate>:
 * The function responsible for rotate the DC Motor CW/ or A-CW or
 * stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the
 * required speed value.
 */
void DCMotor_rotate(DCMotorState state, uint8 speed) {
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	00 d0       	rcall	.+0      	; 0x141e <DCMotor_rotate+0x6>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <DCMotor_rotate+0x8>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	6a 83       	std	Y+2, r22	; 0x02
	switch (state) {
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3c 83       	std	Y+4, r19	; 0x04
    1430:	2b 83       	std	Y+3, r18	; 0x03
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	91 05       	cpc	r25, r1
    143a:	a1 f0       	breq	.+40     	; 0x1464 <DCMotor_rotate+0x4c>
    143c:	2b 81       	ldd	r18, Y+3	; 0x03
    143e:	3c 81       	ldd	r19, Y+4	; 0x04
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	e9 f0       	breq	.+58     	; 0x1480 <DCMotor_rotate+0x68>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	31 f5       	brne	.+76     	; 0x149a <DCMotor_rotate+0x82>
	case STOP:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_LOW);
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_LOW);
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_writePin>
    1462:	1b c0       	rjmp	.+54     	; 0x149a <DCMotor_rotate+0x82>
		break;
	case CLOCK_WISE:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_HIGH);
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	41 e0       	ldi	r20, 0x01	; 1
    146a:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_LOW);
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_writePin>
		PWM_Timer0_Start(speed);
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	0e 94 05 08 	call	0x100a	; 0x100a <PWM_Timer0_Start>
    147e:	0d c0       	rjmp	.+26     	; 0x149a <DCMotor_rotate+0x82>
		break;
	case ANTI_CLOCK_WISE:
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_1_ID, LOGIC_LOW);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	40 e0       	ldi	r20, 0x00	; 0
    1486:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_PIN_2_ID, LOGIC_HIGH);
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	41 e0       	ldi	r20, 0x01	; 1
    1490:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_writePin>
		PWM_Timer0_Start(speed);
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	0e 94 05 08 	call	0x100a	; 0x100a <PWM_Timer0_Start>
	}

}
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,GPIO_PinDirectionType direction) {
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <GPIO_setupPinDirection+0x6>
    14ae:	00 d0       	rcall	.+0      	; 0x14b0 <GPIO_setupPinDirection+0x8>
    14b0:	0f 92       	push	r0
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	6a 83       	std	Y+2, r22	; 0x02
    14ba:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 30       	cpi	r24, 0x08	; 8
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <GPIO_setupPinDirection+0x1c>
    14c2:	d5 c0       	rjmp	.+426    	; 0x166e <GPIO_setupPinDirection+0x1c6>
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	84 30       	cpi	r24, 0x04	; 4
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <GPIO_setupPinDirection+0x24>
    14ca:	d1 c0       	rjmp	.+418    	; 0x166e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3d 83       	std	Y+5, r19	; 0x05
    14d4:	2c 83       	std	Y+4, r18	; 0x04
    14d6:	8c 81       	ldd	r24, Y+4	; 0x04
    14d8:	9d 81       	ldd	r25, Y+5	; 0x05
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <GPIO_setupPinDirection+0x3a>
    14e0:	43 c0       	rjmp	.+134    	; 0x1568 <GPIO_setupPinDirection+0xc0>
    14e2:	2c 81       	ldd	r18, Y+4	; 0x04
    14e4:	3d 81       	ldd	r19, Y+5	; 0x05
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	2c f4       	brge	.+10     	; 0x14f6 <GPIO_setupPinDirection+0x4e>
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	9d 81       	ldd	r25, Y+5	; 0x05
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	71 f0       	breq	.+28     	; 0x1510 <GPIO_setupPinDirection+0x68>
    14f4:	bc c0       	rjmp	.+376    	; 0x166e <GPIO_setupPinDirection+0x1c6>
    14f6:	2c 81       	ldd	r18, Y+4	; 0x04
    14f8:	3d 81       	ldd	r19, Y+5	; 0x05
    14fa:	22 30       	cpi	r18, 0x02	; 2
    14fc:	31 05       	cpc	r19, r1
    14fe:	09 f4       	brne	.+2      	; 0x1502 <GPIO_setupPinDirection+0x5a>
    1500:	5f c0       	rjmp	.+190    	; 0x15c0 <GPIO_setupPinDirection+0x118>
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	83 30       	cpi	r24, 0x03	; 3
    1508:	91 05       	cpc	r25, r1
    150a:	09 f4       	brne	.+2      	; 0x150e <GPIO_setupPinDirection+0x66>
    150c:	85 c0       	rjmp	.+266    	; 0x1618 <GPIO_setupPinDirection+0x170>
    150e:	af c0       	rjmp	.+350    	; 0x166e <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	a1 f4       	brne	.+40     	; 0x153e <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    1516:	aa e3       	ldi	r26, 0x3A	; 58
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	ea e3       	ldi	r30, 0x3A	; 58
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	48 2f       	mov	r20, r24
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 2e       	mov	r0, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <GPIO_setupPinDirection+0x8c>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <GPIO_setupPinDirection+0x88>
    1538:	84 2b       	or	r24, r20
    153a:	8c 93       	st	X, r24
    153c:	98 c0       	rjmp	.+304    	; 0x166e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    153e:	aa e3       	ldi	r26, 0x3A	; 58
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	ea e3       	ldi	r30, 0x3A	; 58
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <GPIO_setupPinDirection+0xb4>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <GPIO_setupPinDirection+0xb0>
    1560:	80 95       	com	r24
    1562:	84 23       	and	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	83 c0       	rjmp	.+262    	; 0x166e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	a1 f4       	brne	.+40     	; 0x1596 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    156e:	a7 e3       	ldi	r26, 0x37	; 55
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e7 e3       	ldi	r30, 0x37	; 55
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <GPIO_setupPinDirection+0xe4>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <GPIO_setupPinDirection+0xe0>
    1590:	84 2b       	or	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	6c c0       	rjmp	.+216    	; 0x166e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    1596:	a7 e3       	ldi	r26, 0x37	; 55
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e7 e3       	ldi	r30, 0x37	; 55
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <GPIO_setupPinDirection+0x10c>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <GPIO_setupPinDirection+0x108>
    15b8:	80 95       	com	r24
    15ba:	84 23       	and	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	57 c0       	rjmp	.+174    	; 0x166e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	a1 f4       	brne	.+40     	; 0x15ee <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    15c6:	a4 e3       	ldi	r26, 0x34	; 52
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e4 e3       	ldi	r30, 0x34	; 52
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <GPIO_setupPinDirection+0x13c>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <GPIO_setupPinDirection+0x138>
    15e8:	84 2b       	or	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	40 c0       	rjmp	.+128    	; 0x166e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    15ee:	a4 e3       	ldi	r26, 0x34	; 52
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e4 e3       	ldi	r30, 0x34	; 52
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <GPIO_setupPinDirection+0x164>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <GPIO_setupPinDirection+0x160>
    1610:	80 95       	com	r24
    1612:	84 23       	and	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	2b c0       	rjmp	.+86     	; 0x166e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	a1 f4       	brne	.+40     	; 0x1646 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    161e:	a1 e3       	ldi	r26, 0x31	; 49
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e1 e3       	ldi	r30, 0x31	; 49
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <GPIO_setupPinDirection+0x194>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <GPIO_setupPinDirection+0x190>
    1640:	84 2b       	or	r24, r20
    1642:	8c 93       	st	X, r24
    1644:	14 c0       	rjmp	.+40     	; 0x166e <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    1646:	a1 e3       	ldi	r26, 0x31	; 49
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e1 e3       	ldi	r30, 0x31	; 49
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	48 2f       	mov	r20, r24
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	02 2e       	mov	r0, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <GPIO_setupPinDirection+0x1bc>
    1660:	88 0f       	add	r24, r24
    1662:	99 1f       	adc	r25, r25
    1664:	0a 94       	dec	r0
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <GPIO_setupPinDirection+0x1b8>
    1668:	80 95       	com	r24
    166a:	84 23       	and	r24, r20
    166c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	00 d0       	rcall	.+0      	; 0x1684 <GPIO_writePin+0x6>
    1684:	00 d0       	rcall	.+0      	; 0x1686 <GPIO_writePin+0x8>
    1686:	0f 92       	push	r0
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	89 83       	std	Y+1, r24	; 0x01
    168e:	6a 83       	std	Y+2, r22	; 0x02
    1690:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	88 30       	cpi	r24, 0x08	; 8
    1696:	08 f0       	brcs	.+2      	; 0x169a <GPIO_writePin+0x1c>
    1698:	d5 c0       	rjmp	.+426    	; 0x1844 <GPIO_writePin+0x1c6>
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	84 30       	cpi	r24, 0x04	; 4
    169e:	08 f0       	brcs	.+2      	; 0x16a2 <GPIO_writePin+0x24>
    16a0:	d1 c0       	rjmp	.+418    	; 0x1844 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* write the pin value as required */
		switch (port_num) {
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	3d 83       	std	Y+5, r19	; 0x05
    16aa:	2c 83       	std	Y+4, r18	; 0x04
    16ac:	8c 81       	ldd	r24, Y+4	; 0x04
    16ae:	9d 81       	ldd	r25, Y+5	; 0x05
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <GPIO_writePin+0x3a>
    16b6:	43 c0       	rjmp	.+134    	; 0x173e <GPIO_writePin+0xc0>
    16b8:	2c 81       	ldd	r18, Y+4	; 0x04
    16ba:	3d 81       	ldd	r19, Y+5	; 0x05
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	2c f4       	brge	.+10     	; 0x16cc <GPIO_writePin+0x4e>
    16c2:	8c 81       	ldd	r24, Y+4	; 0x04
    16c4:	9d 81       	ldd	r25, Y+5	; 0x05
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	71 f0       	breq	.+28     	; 0x16e6 <GPIO_writePin+0x68>
    16ca:	bc c0       	rjmp	.+376    	; 0x1844 <GPIO_writePin+0x1c6>
    16cc:	2c 81       	ldd	r18, Y+4	; 0x04
    16ce:	3d 81       	ldd	r19, Y+5	; 0x05
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	31 05       	cpc	r19, r1
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <GPIO_writePin+0x5a>
    16d6:	5f c0       	rjmp	.+190    	; 0x1796 <GPIO_writePin+0x118>
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	9d 81       	ldd	r25, Y+5	; 0x05
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	91 05       	cpc	r25, r1
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <GPIO_writePin+0x66>
    16e2:	85 c0       	rjmp	.+266    	; 0x17ee <GPIO_writePin+0x170>
    16e4:	af c0       	rjmp	.+350    	; 0x1844 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
    16e6:	8b 81       	ldd	r24, Y+3	; 0x03
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	a1 f4       	brne	.+40     	; 0x1714 <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    16ec:	ab e3       	ldi	r26, 0x3B	; 59
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	eb e3       	ldi	r30, 0x3B	; 59
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	48 2f       	mov	r20, r24
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	28 2f       	mov	r18, r24
    16fc:	30 e0       	ldi	r19, 0x00	; 0
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	02 2e       	mov	r0, r18
    1704:	02 c0       	rjmp	.+4      	; 0x170a <GPIO_writePin+0x8c>
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	0a 94       	dec	r0
    170c:	e2 f7       	brpl	.-8      	; 0x1706 <GPIO_writePin+0x88>
    170e:	84 2b       	or	r24, r20
    1710:	8c 93       	st	X, r24
    1712:	98 c0       	rjmp	.+304    	; 0x1844 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    1714:	ab e3       	ldi	r26, 0x3B	; 59
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	eb e3       	ldi	r30, 0x3B	; 59
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <GPIO_writePin+0xb4>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <GPIO_writePin+0xb0>
    1736:	80 95       	com	r24
    1738:	84 23       	and	r24, r20
    173a:	8c 93       	st	X, r24
    173c:	83 c0       	rjmp	.+262    	; 0x1844 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	81 30       	cpi	r24, 0x01	; 1
    1742:	a1 f4       	brne	.+40     	; 0x176c <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    1744:	a8 e3       	ldi	r26, 0x38	; 56
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	e8 e3       	ldi	r30, 0x38	; 56
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	48 2f       	mov	r20, r24
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	28 2f       	mov	r18, r24
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 2e       	mov	r0, r18
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <GPIO_writePin+0xe4>
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	0a 94       	dec	r0
    1764:	e2 f7       	brpl	.-8      	; 0x175e <GPIO_writePin+0xe0>
    1766:	84 2b       	or	r24, r20
    1768:	8c 93       	st	X, r24
    176a:	6c c0       	rjmp	.+216    	; 0x1844 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    176c:	a8 e3       	ldi	r26, 0x38	; 56
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e8 e3       	ldi	r30, 0x38	; 56
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <GPIO_writePin+0x10c>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <GPIO_writePin+0x108>
    178e:	80 95       	com	r24
    1790:	84 23       	and	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	57 c0       	rjmp	.+174    	; 0x1844 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	a1 f4       	brne	.+40     	; 0x17c4 <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    179c:	a5 e3       	ldi	r26, 0x35	; 53
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e5 e3       	ldi	r30, 0x35	; 53
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 2e       	mov	r0, r18
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <GPIO_writePin+0x13c>
    17b6:	88 0f       	add	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	0a 94       	dec	r0
    17bc:	e2 f7       	brpl	.-8      	; 0x17b6 <GPIO_writePin+0x138>
    17be:	84 2b       	or	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	40 c0       	rjmp	.+128    	; 0x1844 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    17c4:	a5 e3       	ldi	r26, 0x35	; 53
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e5 e3       	ldi	r30, 0x35	; 53
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <GPIO_writePin+0x164>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <GPIO_writePin+0x160>
    17e6:	80 95       	com	r24
    17e8:	84 23       	and	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	2b c0       	rjmp	.+86     	; 0x1844 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	a1 f4       	brne	.+40     	; 0x181c <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    17f4:	a2 e3       	ldi	r26, 0x32	; 50
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e2 e3       	ldi	r30, 0x32	; 50
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	48 2f       	mov	r20, r24
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	28 2f       	mov	r18, r24
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	02 2e       	mov	r0, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <GPIO_writePin+0x194>
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <GPIO_writePin+0x190>
    1816:	84 2b       	or	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	14 c0       	rjmp	.+40     	; 0x1844 <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    181c:	a2 e3       	ldi	r26, 0x32	; 50
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e2 e3       	ldi	r30, 0x32	; 50
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	48 2f       	mov	r20, r24
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 2e       	mov	r0, r18
    1834:	02 c0       	rjmp	.+4      	; 0x183a <GPIO_writePin+0x1bc>
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	0a 94       	dec	r0
    183c:	e2 f7       	brpl	.-8      	; 0x1836 <GPIO_writePin+0x1b8>
    183e:	80 95       	com	r24
    1840:	84 23       	and	r24, r20
    1842:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <GPIO_readPin+0x6>
    185a:	00 d0       	rcall	.+0      	; 0x185c <GPIO_readPin+0x8>
    185c:	0f 92       	push	r0
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	8a 83       	std	Y+2, r24	; 0x02
    1864:	6b 83       	std	Y+3, r22	; 0x03

	uint8 value = LOGIC_LOW;
    1866:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	88 30       	cpi	r24, 0x08	; 8
    186c:	08 f0       	brcs	.+2      	; 0x1870 <GPIO_readPin+0x1c>
    186e:	84 c0       	rjmp	.+264    	; 0x1978 <GPIO_readPin+0x124>
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	84 30       	cpi	r24, 0x04	; 4
    1874:	08 f0       	brcs	.+2      	; 0x1878 <GPIO_readPin+0x24>
    1876:	80 c0       	rjmp	.+256    	; 0x1978 <GPIO_readPin+0x124>
		/* Do Nothing */
	} else {
		/* read the pin value */
		switch (port_num) {
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	3d 83       	std	Y+5, r19	; 0x05
    1880:	2c 83       	std	Y+4, r18	; 0x04
    1882:	4c 81       	ldd	r20, Y+4	; 0x04
    1884:	5d 81       	ldd	r21, Y+5	; 0x05
    1886:	41 30       	cpi	r20, 0x01	; 1
    1888:	51 05       	cpc	r21, r1
    188a:	79 f1       	breq	.+94     	; 0x18ea <GPIO_readPin+0x96>
    188c:	8c 81       	ldd	r24, Y+4	; 0x04
    188e:	9d 81       	ldd	r25, Y+5	; 0x05
    1890:	82 30       	cpi	r24, 0x02	; 2
    1892:	91 05       	cpc	r25, r1
    1894:	34 f4       	brge	.+12     	; 0x18a2 <GPIO_readPin+0x4e>
    1896:	2c 81       	ldd	r18, Y+4	; 0x04
    1898:	3d 81       	ldd	r19, Y+5	; 0x05
    189a:	21 15       	cp	r18, r1
    189c:	31 05       	cpc	r19, r1
    189e:	69 f0       	breq	.+26     	; 0x18ba <GPIO_readPin+0x66>
    18a0:	6b c0       	rjmp	.+214    	; 0x1978 <GPIO_readPin+0x124>
    18a2:	4c 81       	ldd	r20, Y+4	; 0x04
    18a4:	5d 81       	ldd	r21, Y+5	; 0x05
    18a6:	42 30       	cpi	r20, 0x02	; 2
    18a8:	51 05       	cpc	r21, r1
    18aa:	b9 f1       	breq	.+110    	; 0x191a <GPIO_readPin+0xc6>
    18ac:	8c 81       	ldd	r24, Y+4	; 0x04
    18ae:	9d 81       	ldd	r25, Y+5	; 0x05
    18b0:	83 30       	cpi	r24, 0x03	; 3
    18b2:	91 05       	cpc	r25, r1
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <GPIO_readPin+0x64>
    18b6:	49 c0       	rjmp	.+146    	; 0x194a <GPIO_readPin+0xf6>
    18b8:	5f c0       	rjmp	.+190    	; 0x1978 <GPIO_readPin+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num)) {
    18ba:	e9 e3       	ldi	r30, 0x39	; 57
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a9 01       	movw	r20, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <GPIO_readPin+0x7e>
    18ce:	55 95       	asr	r21
    18d0:	47 95       	ror	r20
    18d2:	8a 95       	dec	r24
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <GPIO_readPin+0x7a>
    18d6:	ca 01       	movw	r24, r20
    18d8:	81 70       	andi	r24, 0x01	; 1
    18da:	90 70       	andi	r25, 0x00	; 0
    18dc:	88 23       	and	r24, r24
    18de:	19 f0       	breq	.+6      	; 0x18e6 <GPIO_readPin+0x92>
				value = LOGIC_HIGH;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	49 c0       	rjmp	.+146    	; 0x1978 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    18e6:	19 82       	std	Y+1, r1	; 0x01
    18e8:	47 c0       	rjmp	.+142    	; 0x1978 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num)) {
    18ea:	e6 e3       	ldi	r30, 0x36	; 54
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a9 01       	movw	r20, r18
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <GPIO_readPin+0xae>
    18fe:	55 95       	asr	r21
    1900:	47 95       	ror	r20
    1902:	8a 95       	dec	r24
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <GPIO_readPin+0xaa>
    1906:	ca 01       	movw	r24, r20
    1908:	81 70       	andi	r24, 0x01	; 1
    190a:	90 70       	andi	r25, 0x00	; 0
    190c:	88 23       	and	r24, r24
    190e:	19 f0       	breq	.+6      	; 0x1916 <GPIO_readPin+0xc2>
				value = LOGIC_HIGH;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	31 c0       	rjmp	.+98     	; 0x1978 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    1916:	19 82       	std	Y+1, r1	; 0x01
    1918:	2f c0       	rjmp	.+94     	; 0x1978 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num)) {
    191a:	e3 e3       	ldi	r30, 0x33	; 51
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a9 01       	movw	r20, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <GPIO_readPin+0xde>
    192e:	55 95       	asr	r21
    1930:	47 95       	ror	r20
    1932:	8a 95       	dec	r24
    1934:	e2 f7       	brpl	.-8      	; 0x192e <GPIO_readPin+0xda>
    1936:	ca 01       	movw	r24, r20
    1938:	81 70       	andi	r24, 0x01	; 1
    193a:	90 70       	andi	r25, 0x00	; 0
    193c:	88 23       	and	r24, r24
    193e:	19 f0       	breq	.+6      	; 0x1946 <GPIO_readPin+0xf2>
				value = LOGIC_HIGH;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	19 c0       	rjmp	.+50     	; 0x1978 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    1946:	19 82       	std	Y+1, r1	; 0x01
    1948:	17 c0       	rjmp	.+46     	; 0x1978 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num)) {
    194a:	e0 e3       	ldi	r30, 0x30	; 48
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	88 2f       	mov	r24, r24
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a9 01       	movw	r20, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <GPIO_readPin+0x10e>
    195e:	55 95       	asr	r21
    1960:	47 95       	ror	r20
    1962:	8a 95       	dec	r24
    1964:	e2 f7       	brpl	.-8      	; 0x195e <GPIO_readPin+0x10a>
    1966:	ca 01       	movw	r24, r20
    1968:	81 70       	andi	r24, 0x01	; 1
    196a:	90 70       	andi	r25, 0x00	; 0
    196c:	88 23       	and	r24, r24
    196e:	19 f0       	breq	.+6      	; 0x1976 <GPIO_readPin+0x122>
				value = LOGIC_HIGH;
    1970:	81 e0       	ldi	r24, 0x01	; 1
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    1976:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    1978:	89 81       	ldd	r24, Y+1	; 0x01
}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	00 d0       	rcall	.+0      	; 0x1990 <GPIO_setupPortDirection+0x6>
    1990:	00 d0       	rcall	.+0      	; 0x1992 <GPIO_setupPortDirection+0x8>
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	89 83       	std	Y+1, r24	; 0x01
    1998:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	84 30       	cpi	r24, 0x04	; 4
    199e:	90 f5       	brcc	.+100    	; 0x1a04 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	3c 83       	std	Y+4, r19	; 0x04
    19a8:	2b 83       	std	Y+3, r18	; 0x03
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	91 05       	cpc	r25, r1
    19b2:	d1 f0       	breq	.+52     	; 0x19e8 <GPIO_setupPortDirection+0x5e>
    19b4:	2b 81       	ldd	r18, Y+3	; 0x03
    19b6:	3c 81       	ldd	r19, Y+4	; 0x04
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	2c f4       	brge	.+10     	; 0x19c8 <GPIO_setupPortDirection+0x3e>
    19be:	8b 81       	ldd	r24, Y+3	; 0x03
    19c0:	9c 81       	ldd	r25, Y+4	; 0x04
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	61 f0       	breq	.+24     	; 0x19de <GPIO_setupPortDirection+0x54>
    19c6:	1e c0       	rjmp	.+60     	; 0x1a04 <GPIO_setupPortDirection+0x7a>
    19c8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ca:	3c 81       	ldd	r19, Y+4	; 0x04
    19cc:	22 30       	cpi	r18, 0x02	; 2
    19ce:	31 05       	cpc	r19, r1
    19d0:	81 f0       	breq	.+32     	; 0x19f2 <GPIO_setupPortDirection+0x68>
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	9c 81       	ldd	r25, Y+4	; 0x04
    19d6:	83 30       	cpi	r24, 0x03	; 3
    19d8:	91 05       	cpc	r25, r1
    19da:	81 f0       	breq	.+32     	; 0x19fc <GPIO_setupPortDirection+0x72>
    19dc:	13 c0       	rjmp	.+38     	; 0x1a04 <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    19de:	ea e3       	ldi	r30, 0x3A	; 58
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	80 83       	st	Z, r24
    19e6:	0e c0       	rjmp	.+28     	; 0x1a04 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19e8:	e7 e3       	ldi	r30, 0x37	; 55
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	80 83       	st	Z, r24
    19f0:	09 c0       	rjmp	.+18     	; 0x1a04 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19f2:	e4 e3       	ldi	r30, 0x34	; 52
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	80 83       	st	Z, r24
    19fa:	04 c0       	rjmp	.+8      	; 0x1a04 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19fc:	e1 e3       	ldi	r30, 0x31	; 49
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	0f 90       	pop	r0
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <GPIO_writePort+0x6>
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <GPIO_writePort+0x8>
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	84 30       	cpi	r24, 0x04	; 4
    1a26:	90 f5       	brcc	.+100    	; 0x1a8c <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* write the port direction as required */
		switch (port_num) {
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	3c 83       	std	Y+4, r19	; 0x04
    1a30:	2b 83       	std	Y+3, r18	; 0x03
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	9c 81       	ldd	r25, Y+4	; 0x04
    1a36:	81 30       	cpi	r24, 0x01	; 1
    1a38:	91 05       	cpc	r25, r1
    1a3a:	d1 f0       	breq	.+52     	; 0x1a70 <GPIO_writePort+0x5e>
    1a3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a40:	22 30       	cpi	r18, 0x02	; 2
    1a42:	31 05       	cpc	r19, r1
    1a44:	2c f4       	brge	.+10     	; 0x1a50 <GPIO_writePort+0x3e>
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	61 f0       	breq	.+24     	; 0x1a66 <GPIO_writePort+0x54>
    1a4e:	1e c0       	rjmp	.+60     	; 0x1a8c <GPIO_writePort+0x7a>
    1a50:	2b 81       	ldd	r18, Y+3	; 0x03
    1a52:	3c 81       	ldd	r19, Y+4	; 0x04
    1a54:	22 30       	cpi	r18, 0x02	; 2
    1a56:	31 05       	cpc	r19, r1
    1a58:	81 f0       	breq	.+32     	; 0x1a7a <GPIO_writePort+0x68>
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	83 30       	cpi	r24, 0x03	; 3
    1a60:	91 05       	cpc	r25, r1
    1a62:	81 f0       	breq	.+32     	; 0x1a84 <GPIO_writePort+0x72>
    1a64:	13 c0       	rjmp	.+38     	; 0x1a8c <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    1a66:	eb e3       	ldi	r30, 0x3B	; 59
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	80 83       	st	Z, r24
    1a6e:	0e c0       	rjmp	.+28     	; 0x1a8c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a70:	e8 e3       	ldi	r30, 0x38	; 56
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	80 83       	st	Z, r24
    1a78:	09 c0       	rjmp	.+18     	; 0x1a8c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a7a:	e5 e3       	ldi	r30, 0x35	; 53
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	80 83       	st	Z, r24
    1a82:	04 c0       	rjmp	.+8      	; 0x1a8c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a84:	e2 e3       	ldi	r30, 0x32	; 50
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	80 83       	st	Z, r24
			break;
		}
	}

}
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <GPIO_readPort+0x6>
    1aa0:	00 d0       	rcall	.+0      	; 0x1aa2 <GPIO_readPort+0x8>
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = 0;
    1aa8:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	84 30       	cpi	r24, 0x04	; 4
    1aae:	90 f5       	brcc	.+100    	; 0x1b14 <GPIO_readPort+0x7a>
		/* Do Nothing */
	} else {
		/* read the port value as required */
		switch (port_num) {
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	3c 83       	std	Y+4, r19	; 0x04
    1ab8:	2b 83       	std	Y+3, r18	; 0x03
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	81 30       	cpi	r24, 0x01	; 1
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	d1 f0       	breq	.+52     	; 0x1af8 <GPIO_readPort+0x5e>
    1ac4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac8:	22 30       	cpi	r18, 0x02	; 2
    1aca:	31 05       	cpc	r19, r1
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <GPIO_readPort+0x3e>
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	00 97       	sbiw	r24, 0x00	; 0
    1ad4:	61 f0       	breq	.+24     	; 0x1aee <GPIO_readPort+0x54>
    1ad6:	1e c0       	rjmp	.+60     	; 0x1b14 <GPIO_readPort+0x7a>
    1ad8:	2b 81       	ldd	r18, Y+3	; 0x03
    1ada:	3c 81       	ldd	r19, Y+4	; 0x04
    1adc:	22 30       	cpi	r18, 0x02	; 2
    1ade:	31 05       	cpc	r19, r1
    1ae0:	81 f0       	breq	.+32     	; 0x1b02 <GPIO_readPort+0x68>
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	83 30       	cpi	r24, 0x03	; 3
    1ae8:	91 05       	cpc	r25, r1
    1aea:	81 f0       	breq	.+32     	; 0x1b0c <GPIO_readPort+0x72>
    1aec:	13 c0       	rjmp	.+38     	; 0x1b14 <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    1aee:	e9 e3       	ldi	r30, 0x39	; 57
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	0e c0       	rjmp	.+28     	; 0x1b14 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1af8:	e6 e3       	ldi	r30, 0x36	; 54
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	09 c0       	rjmp	.+18     	; 0x1b14 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1b02:	e3 e3       	ldi	r30, 0x33	; 51
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	04 c0       	rjmp	.+8      	; 0x1b14 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1b0c:	e0 e3       	ldi	r30, 0x30	; 48
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1b14:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <EEPROM_writeByte>:
#include <util/delay.h>
/*
 * Description:
 * A function to write a byte in the external EEPROM in a certain address
 */
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data) {
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <EEPROM_writeByte+0x6>
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <EEPROM_writeByte+0x8>
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    1b36:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1b3a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <TWI_getStatus>
    1b3e:	88 30       	cpi	r24, 0x08	; 8
    1b40:	11 f0       	breq	.+4      	; 0x1b46 <EEPROM_writeByte+0x22>
		return ERROR;
    1b42:	1c 82       	std	Y+4, r1	; 0x04
    1b44:	28 c0       	rjmp	.+80     	; 0x1b96 <EEPROM_writeByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8) (0xA0 | ((u16addr & 0x0700) >> 7)));
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	80 70       	andi	r24, 0x00	; 0
    1b4c:	97 70       	andi	r25, 0x07	; 7
    1b4e:	88 0f       	add	r24, r24
    1b50:	89 2f       	mov	r24, r25
    1b52:	88 1f       	adc	r24, r24
    1b54:	99 0b       	sbc	r25, r25
    1b56:	91 95       	neg	r25
    1b58:	80 6a       	ori	r24, 0xA0	; 160
    1b5a:	0e 94 a5 09 	call	0x134a	; 0x134a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1b5e:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <TWI_getStatus>
    1b62:	88 31       	cpi	r24, 0x18	; 24
    1b64:	11 f0       	breq	.+4      	; 0x1b6a <EEPROM_writeByte+0x46>
		return ERROR;
    1b66:	1c 82       	std	Y+4, r1	; 0x04
    1b68:	16 c0       	rjmp	.+44     	; 0x1b96 <EEPROM_writeByte+0x72>

	/* Send the required memory location address */
	TWI_writeByte((uint8) (u16addr));
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	0e 94 a5 09 	call	0x134a	; 0x134a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b70:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <TWI_getStatus>
    1b74:	88 32       	cpi	r24, 0x28	; 40
    1b76:	11 f0       	breq	.+4      	; 0x1b7c <EEPROM_writeByte+0x58>
		return ERROR;
    1b78:	1c 82       	std	Y+4, r1	; 0x04
    1b7a:	0d c0       	rjmp	.+26     	; 0x1b96 <EEPROM_writeByte+0x72>

	/* write byte to eeprom */
	TWI_writeByte(u8data);
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	0e 94 a5 09 	call	0x134a	; 0x134a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b82:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <TWI_getStatus>
    1b86:	88 32       	cpi	r24, 0x28	; 40
    1b88:	11 f0       	breq	.+4      	; 0x1b8e <EEPROM_writeByte+0x6a>
		return ERROR;
    1b8a:	1c 82       	std	Y+4, r1	; 0x04
    1b8c:	04 c0       	rjmp	.+8      	; 0x1b96 <EEPROM_writeByte+0x72>

	/* Send the Stop Bit */
	TWI_stop();
    1b8e:	0e 94 9a 09 	call	0x1334	; 0x1334 <TWI_stop>

	return SUCCESS;
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	8c 83       	std	Y+4, r24	; 0x04
    1b96:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <EEPROM_readByte>:
/*
 * Description:
 * A function to read a byte from the external EEPROM from a certain address
 */
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data) {
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	00 d0       	rcall	.+0      	; 0x1bac <EEPROM_readByte+0x6>
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <EEPROM_readByte+0x8>
    1bae:	0f 92       	push	r0
    1bb0:	cd b7       	in	r28, 0x3d	; 61
    1bb2:	de b7       	in	r29, 0x3e	; 62
    1bb4:	9a 83       	std	Y+2, r25	; 0x02
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	7c 83       	std	Y+4, r23	; 0x04
    1bba:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    1bbc:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_start>
	if (TWI_getStatus() != TWI_START)
    1bc0:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <TWI_getStatus>
    1bc4:	88 30       	cpi	r24, 0x08	; 8
    1bc6:	11 f0       	breq	.+4      	; 0x1bcc <EEPROM_readByte+0x26>
		return ERROR;
    1bc8:	1d 82       	std	Y+5, r1	; 0x05
    1bca:	44 c0       	rjmp	.+136    	; 0x1c54 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8) ((0xA0) | ((u16addr & 0x0700) >> 7)));
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	80 70       	andi	r24, 0x00	; 0
    1bd2:	97 70       	andi	r25, 0x07	; 7
    1bd4:	88 0f       	add	r24, r24
    1bd6:	89 2f       	mov	r24, r25
    1bd8:	88 1f       	adc	r24, r24
    1bda:	99 0b       	sbc	r25, r25
    1bdc:	91 95       	neg	r25
    1bde:	80 6a       	ori	r24, 0xA0	; 160
    1be0:	0e 94 a5 09 	call	0x134a	; 0x134a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1be4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <TWI_getStatus>
    1be8:	88 31       	cpi	r24, 0x18	; 24
    1bea:	11 f0       	breq	.+4      	; 0x1bf0 <EEPROM_readByte+0x4a>
		return ERROR;
    1bec:	1d 82       	std	Y+5, r1	; 0x05
    1bee:	32 c0       	rjmp	.+100    	; 0x1c54 <EEPROM_readByte+0xae>

	/* Send the required memory location address */
	TWI_writeByte((uint8) (u16addr));
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	0e 94 a5 09 	call	0x134a	; 0x134a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bf6:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <TWI_getStatus>
    1bfa:	88 32       	cpi	r24, 0x28	; 40
    1bfc:	11 f0       	breq	.+4      	; 0x1c02 <EEPROM_readByte+0x5c>
		return ERROR;
    1bfe:	1d 82       	std	Y+5, r1	; 0x05
    1c00:	29 c0       	rjmp	.+82     	; 0x1c54 <EEPROM_readByte+0xae>

	/* Send the Repeated Start Bit */
	TWI_start();
    1c02:	0e 94 8a 09 	call	0x1314	; 0x1314 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
    1c06:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <TWI_getStatus>
    1c0a:	80 31       	cpi	r24, 0x10	; 16
    1c0c:	11 f0       	breq	.+4      	; 0x1c12 <EEPROM_readByte+0x6c>
		return ERROR;
    1c0e:	1d 82       	std	Y+5, r1	; 0x05
    1c10:	21 c0       	rjmp	.+66     	; 0x1c54 <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8) ((0xA0) | ((u16addr & 0x0700) >> 7) | 1));
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	80 70       	andi	r24, 0x00	; 0
    1c18:	97 70       	andi	r25, 0x07	; 7
    1c1a:	88 0f       	add	r24, r24
    1c1c:	89 2f       	mov	r24, r25
    1c1e:	88 1f       	adc	r24, r24
    1c20:	99 0b       	sbc	r25, r25
    1c22:	91 95       	neg	r25
    1c24:	81 6a       	ori	r24, 0xA1	; 161
    1c26:	0e 94 a5 09 	call	0x134a	; 0x134a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1c2a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <TWI_getStatus>
    1c2e:	80 34       	cpi	r24, 0x40	; 64
    1c30:	11 f0       	breq	.+4      	; 0x1c36 <EEPROM_readByte+0x90>
		return ERROR;
    1c32:	1d 82       	std	Y+5, r1	; 0x05
    1c34:	0f c0       	rjmp	.+30     	; 0x1c54 <EEPROM_readByte+0xae>

	/* Read Byte from Memory without send ACK */
	*u8data = TWI_readByteWithNACK();
    1c36:	0e 94 cf 09 	call	0x139e	; 0x139e <TWI_readByteWithNACK>
    1c3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c3e:	80 83       	st	Z, r24
	if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1c40:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <TWI_getStatus>
    1c44:	88 35       	cpi	r24, 0x58	; 88
    1c46:	11 f0       	breq	.+4      	; 0x1c4c <EEPROM_readByte+0xa6>
		return ERROR;
    1c48:	1d 82       	std	Y+5, r1	; 0x05
    1c4a:	04 c0       	rjmp	.+8      	; 0x1c54 <EEPROM_readByte+0xae>

	/* Send the Stop Bit */
	TWI_stop();
    1c4c:	0e 94 9a 09 	call	0x1334	; 0x1334 <TWI_stop>

	return SUCCESS;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	8d 83       	std	Y+5, r24	; 0x05
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <EEPROM_writeSting>:
/*
 * Description:
 * A function to write a string in the external EEPROM in a certain address
 */
void EEPROM_writeSting(uint16 u16startAddr, uint8 *u8data) {
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	63 97       	sbiw	r28, 0x13	; 19
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	99 8b       	std	Y+17, r25	; 0x11
    1c7c:	88 8b       	std	Y+16, r24	; 0x10
    1c7e:	7b 8b       	std	Y+19, r23	; 0x13
    1c80:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i = 0;
    1c82:	1f 86       	std	Y+15, r1	; 0x0f
    1c84:	8a c0       	rjmp	.+276    	; 0x1d9a <EEPROM_writeSting+0x134>
	while (u8data[i] != '\0') {
		EEPROM_writeByte(u16startAddr + i, u8data[i]);
    1c86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c88:	28 2f       	mov	r18, r24
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	88 89       	ldd	r24, Y+16	; 0x10
    1c8e:	99 89       	ldd	r25, Y+17	; 0x11
    1c90:	a9 01       	movw	r20, r18
    1c92:	48 0f       	add	r20, r24
    1c94:	59 1f       	adc	r21, r25
    1c96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c9e:	9b 89       	ldd	r25, Y+19	; 0x13
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	e2 0f       	add	r30, r18
    1ca4:	f3 1f       	adc	r31, r19
    1ca6:	20 81       	ld	r18, Z
    1ca8:	ca 01       	movw	r24, r20
    1caa:	62 2f       	mov	r22, r18
    1cac:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <EEPROM_writeByte>
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	a0 e2       	ldi	r26, 0x20	; 32
    1cb6:	b1 e4       	ldi	r27, 0x41	; 65
    1cb8:	8b 87       	std	Y+11, r24	; 0x0b
    1cba:	9c 87       	std	Y+12, r25	; 0x0c
    1cbc:	ad 87       	std	Y+13, r26	; 0x0d
    1cbe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	4a ef       	ldi	r20, 0xFA	; 250
    1cce:	54 e4       	ldi	r21, 0x44	; 68
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	8f 83       	std	Y+7, r24	; 0x07
    1cda:	98 87       	std	Y+8, r25	; 0x08
    1cdc:	a9 87       	std	Y+9, r26	; 0x09
    1cde:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ce0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce2:	78 85       	ldd	r23, Y+8	; 0x08
    1ce4:	89 85       	ldd	r24, Y+9	; 0x09
    1ce6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e8       	ldi	r20, 0x80	; 128
    1cee:	5f e3       	ldi	r21, 0x3F	; 63
    1cf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cf4:	88 23       	and	r24, r24
    1cf6:	2c f4       	brge	.+10     	; 0x1d02 <EEPROM_writeSting+0x9c>
		__ticks = 1;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	3f c0       	rjmp	.+126    	; 0x1d80 <EEPROM_writeSting+0x11a>
	else if (__tmp > 65535)
    1d02:	6f 81       	ldd	r22, Y+7	; 0x07
    1d04:	78 85       	ldd	r23, Y+8	; 0x08
    1d06:	89 85       	ldd	r24, Y+9	; 0x09
    1d08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	3f ef       	ldi	r19, 0xFF	; 255
    1d0e:	4f e7       	ldi	r20, 0x7F	; 127
    1d10:	57 e4       	ldi	r21, 0x47	; 71
    1d12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d16:	18 16       	cp	r1, r24
    1d18:	4c f5       	brge	.+82     	; 0x1d6c <EEPROM_writeSting+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e2       	ldi	r20, 0x20	; 32
    1d28:	51 e4       	ldi	r21, 0x41	; 65
    1d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	9e 83       	std	Y+6, r25	; 0x06
    1d40:	8d 83       	std	Y+5, r24	; 0x05
    1d42:	0f c0       	rjmp	.+30     	; 0x1d62 <EEPROM_writeSting+0xfc>
    1d44:	88 ec       	ldi	r24, 0xC8	; 200
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9c 83       	std	Y+4, r25	; 0x04
    1d4a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <EEPROM_writeSting+0xea>
    1d54:	9c 83       	std	Y+4, r25	; 0x04
    1d56:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d62:	8d 81       	ldd	r24, Y+5	; 0x05
    1d64:	9e 81       	ldd	r25, Y+6	; 0x06
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	69 f7       	brne	.-38     	; 0x1d44 <EEPROM_writeSting+0xde>
    1d6a:	14 c0       	rjmp	.+40     	; 0x1d94 <EEPROM_writeSting+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d6e:	78 85       	ldd	r23, Y+8	; 0x08
    1d70:	89 85       	ldd	r24, Y+9	; 0x09
    1d72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	8d 81       	ldd	r24, Y+5	; 0x05
    1d82:	9e 81       	ldd	r25, Y+6	; 0x06
    1d84:	9a 83       	std	Y+2, r25	; 0x02
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <EEPROM_writeSting+0x126>
    1d90:	9a 83       	std	Y+2, r25	; 0x02
    1d92:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		i++;
    1d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	8f 87       	std	Y+15, r24	; 0x0f
 * Description:
 * A function to write a string in the external EEPROM in a certain address
 */
void EEPROM_writeSting(uint16 u16startAddr, uint8 *u8data) {
	uint8 i = 0;
	while (u8data[i] != '\0') {
    1d9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	8a 89       	ldd	r24, Y+18	; 0x12
    1da2:	9b 89       	ldd	r25, Y+19	; 0x13
    1da4:	fc 01       	movw	r30, r24
    1da6:	e2 0f       	add	r30, r18
    1da8:	f3 1f       	adc	r31, r19
    1daa:	80 81       	ld	r24, Z
    1dac:	88 23       	and	r24, r24
    1dae:	09 f0       	breq	.+2      	; 0x1db2 <EEPROM_writeSting+0x14c>
    1db0:	6a cf       	rjmp	.-300    	; 0x1c86 <EEPROM_writeSting+0x20>
		EEPROM_writeByte(u16startAddr + i, u8data[i]);
		_delay_ms(10);
		i++;
	}
}
    1db2:	63 96       	adiw	r28, 0x13	; 19
    1db4:	0f b6       	in	r0, 0x3f	; 63
    1db6:	f8 94       	cli
    1db8:	de bf       	out	0x3e, r29	; 62
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	cd bf       	out	0x3d, r28	; 61
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <EEPROM_readString>:
/*
 * Description:
 * A function to read a String with a certain size from the external EEPROM from a certain address
 */
void EEPROM_readString(uint16 u16startAddr, uint8 *u8data, uint8 bytesNumber) {
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	64 97       	sbiw	r28, 0x14	; 20
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	99 8b       	std	Y+17, r25	; 0x11
    1dda:	88 8b       	std	Y+16, r24	; 0x10
    1ddc:	7b 8b       	std	Y+19, r23	; 0x13
    1dde:	6a 8b       	std	Y+18, r22	; 0x12
    1de0:	4c 8b       	std	Y+20, r20	; 0x14
	uint8 i = 0;
    1de2:	1f 86       	std	Y+15, r1	; 0x0f
    1de4:	88 c0       	rjmp	.+272    	; 0x1ef6 <EEPROM_readString+0x132>
	while (i < bytesNumber) {
		EEPROM_readByte(u16startAddr + i, &u8data[i]);
    1de6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	88 89       	ldd	r24, Y+16	; 0x10
    1dee:	99 89       	ldd	r25, Y+17	; 0x11
    1df0:	a9 01       	movw	r20, r18
    1df2:	48 0f       	add	r20, r24
    1df4:	59 1f       	adc	r21, r25
    1df6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	8a 89       	ldd	r24, Y+18	; 0x12
    1dfe:	9b 89       	ldd	r25, Y+19	; 0x13
    1e00:	28 0f       	add	r18, r24
    1e02:	39 1f       	adc	r19, r25
    1e04:	ca 01       	movw	r24, r20
    1e06:	b9 01       	movw	r22, r18
    1e08:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <EEPROM_readByte>
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a0 e2       	ldi	r26, 0x20	; 32
    1e12:	b1 e4       	ldi	r27, 0x41	; 65
    1e14:	8b 87       	std	Y+11, r24	; 0x0b
    1e16:	9c 87       	std	Y+12, r25	; 0x0c
    1e18:	ad 87       	std	Y+13, r26	; 0x0d
    1e1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e20:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e22:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	4a ef       	ldi	r20, 0xFA	; 250
    1e2a:	54 e4       	ldi	r21, 0x44	; 68
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	8f 83       	std	Y+7, r24	; 0x07
    1e36:	98 87       	std	Y+8, r25	; 0x08
    1e38:	a9 87       	std	Y+9, r26	; 0x09
    1e3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e3e:	78 85       	ldd	r23, Y+8	; 0x08
    1e40:	89 85       	ldd	r24, Y+9	; 0x09
    1e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e8       	ldi	r20, 0x80	; 128
    1e4a:	5f e3       	ldi	r21, 0x3F	; 63
    1e4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e50:	88 23       	and	r24, r24
    1e52:	2c f4       	brge	.+10     	; 0x1e5e <EEPROM_readString+0x9a>
		__ticks = 1;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	9e 83       	std	Y+6, r25	; 0x06
    1e5a:	8d 83       	std	Y+5, r24	; 0x05
    1e5c:	3f c0       	rjmp	.+126    	; 0x1edc <EEPROM_readString+0x118>
	else if (__tmp > 65535)
    1e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e60:	78 85       	ldd	r23, Y+8	; 0x08
    1e62:	89 85       	ldd	r24, Y+9	; 0x09
    1e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	3f ef       	ldi	r19, 0xFF	; 255
    1e6a:	4f e7       	ldi	r20, 0x7F	; 127
    1e6c:	57 e4       	ldi	r21, 0x47	; 71
    1e6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e72:	18 16       	cp	r1, r24
    1e74:	4c f5       	brge	.+82     	; 0x1ec8 <EEPROM_readString+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e2       	ldi	r20, 0x20	; 32
    1e84:	51 e4       	ldi	r21, 0x41	; 65
    1e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9e 83       	std	Y+6, r25	; 0x06
    1e9c:	8d 83       	std	Y+5, r24	; 0x05
    1e9e:	0f c0       	rjmp	.+30     	; 0x1ebe <EEPROM_readString+0xfa>
    1ea0:	88 ec       	ldi	r24, 0xC8	; 200
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9c 83       	std	Y+4, r25	; 0x04
    1ea6:	8b 83       	std	Y+3, r24	; 0x03
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <EEPROM_readString+0xe8>
    1eb0:	9c 83       	std	Y+4, r25	; 0x04
    1eb2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	69 f7       	brne	.-38     	; 0x1ea0 <EEPROM_readString+0xdc>
    1ec6:	14 c0       	rjmp	.+40     	; 0x1ef0 <EEPROM_readString+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eca:	78 85       	ldd	r23, Y+8	; 0x08
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9e 83       	std	Y+6, r25	; 0x06
    1eda:	8d 83       	std	Y+5, r24	; 0x05
    1edc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ede:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <EEPROM_readString+0x124>
    1eec:	9a 83       	std	Y+2, r25	; 0x02
    1eee:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		i++;
    1ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef2:	8f 5f       	subi	r24, 0xFF	; 255
    1ef4:	8f 87       	std	Y+15, r24	; 0x0f
 * Description:
 * A function to read a String with a certain size from the external EEPROM from a certain address
 */
void EEPROM_readString(uint16 u16startAddr, uint8 *u8data, uint8 bytesNumber) {
	uint8 i = 0;
	while (i < bytesNumber) {
    1ef6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ef8:	8c 89       	ldd	r24, Y+20	; 0x14
    1efa:	98 17       	cp	r25, r24
    1efc:	08 f4       	brcc	.+2      	; 0x1f00 <EEPROM_readString+0x13c>
    1efe:	73 cf       	rjmp	.-282    	; 0x1de6 <EEPROM_readString+0x22>
		EEPROM_readByte(u16startAddr + i, &u8data[i]);
		_delay_ms(10);
		i++;
	}
	u8data[i] = '\0';
    1f00:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	8a 89       	ldd	r24, Y+18	; 0x12
    1f08:	9b 89       	ldd	r25, Y+19	; 0x13
    1f0a:	fc 01       	movw	r30, r24
    1f0c:	e2 0f       	add	r30, r18
    1f0e:	f3 1f       	adc	r31, r19
    1f10:	10 82       	st	Z, r1
}
    1f12:	64 96       	adiw	r28, 0x14	; 20
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <Buzzer_init>:
 * Description:
 * function to initialize buzzer by :
 * Setting the pin to output
 * initially turning off the buzzer
 */
void Buzzer_init() {
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
	/*Defining Buzzer pin as output*/
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	41 e0       	ldi	r20, 0x01	; 1
    1f32:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <GPIO_setupPinDirection>
	/*Initially turning off the buzzer*/
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	40 e0       	ldi	r20, 0x00	; 0
    1f3c:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_writePin>
}
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <Buzzer_on>:
/*
 * Description:
 * function to turn the buzzer on
 */
void Buzzer_on() {
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	cd b7       	in	r28, 0x3d	; 61
    1f4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	60 e0       	ldi	r22, 0x00	; 0
    1f52:	41 e0       	ldi	r20, 0x01	; 1
    1f54:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_writePin>
}
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <Buzzer_off>:
/*
 * Description:
 * function to turn the buzzer off
 */
void Buzzer_off() {
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	60 e0       	ldi	r22, 0x00	; 0
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	0e 94 3f 0b 	call	0x167e	; 0x167e <GPIO_writePin>
}
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <wrongPassword>:
/*
 * Description:
 * function for timer for closing the buzzer after one minute
 * will be set as call back function when the user enters a wrong password 3 times
 */
void wrongPassword() {
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1f7e:	80 91 82 01 	lds	r24, 0x0182
    1f82:	8f 5f       	subi	r24, 0xFF	; 255
    1f84:	80 93 82 01 	sts	0x0182, r24
	if (g_tick == 6) {
    1f88:	80 91 82 01 	lds	r24, 0x0182
    1f8c:	86 30       	cpi	r24, 0x06	; 6
    1f8e:	49 f4       	brne	.+18     	; 0x1fa2 <wrongPassword+0x2c>
		Buzzer_off();
    1f90:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <Buzzer_off>
		UART_sendData('D');
    1f94:	84 e4       	ldi	r24, 0x44	; 68
    1f96:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
		Timer1_deInit();
    1f9a:	0e 94 a6 08 	call	0x114c	; 0x114c <Timer1_deInit>
		g_tick = 0;
    1f9e:	10 92 82 01 	sts	0x0182, r1
	}
}
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <openDoor>:
/*
 * Description:
 * function for timer for handling the logic after the user Enters the right password
 * will be set as call back function when the user enters the right password and wants to open the door
 */
void openDoor() {
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1fb0:	80 91 82 01 	lds	r24, 0x0182
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
    1fb6:	80 93 82 01 	sts	0x0182, r24
	/*
	 * after 15 seconds:
	 * Stop the motor and send 'U' for the HMI ECU to inform it that the door has been opened and will hold
	 * and then set the timer to make an interrupt after 3 seconds
	 */
	if (g_tick == 2) {
    1fba:	80 91 82 01 	lds	r24, 0x0182
    1fbe:	82 30       	cpi	r24, 0x02	; 2
    1fc0:	61 f4       	brne	.+24     	; 0x1fda <openDoor+0x32>
		DCMotor_rotate(STOP, 0);
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	60 e0       	ldi	r22, 0x00	; 0
    1fc6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <DCMotor_rotate>
		UART_sendData('U');
    1fca:	85 e5       	ldi	r24, 0x55	; 85
    1fcc:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
		Timer1_init(&timerConfig_3_Seconds);
    1fd0:	8e e6       	ldi	r24, 0x6E	; 110
    1fd2:	91 e0       	ldi	r25, 0x01	; 1
    1fd4:	0e 94 4c 08 	call	0x1098	; 0x1098 <Timer1_init>
    1fd8:	1f c0       	rjmp	.+62     	; 0x2018 <openDoor+0x70>
		/*
		 * after 3 more seconds:
		 * rotate the motor anti-clock wise and send 'H' for the HMI ECU to inform it that the door is closing
		 * and then set the timer to make an interrupt after 7.5 seconds
		 */
	} else if (g_tick == 3) {
    1fda:	80 91 82 01 	lds	r24, 0x0182
    1fde:	83 30       	cpi	r24, 0x03	; 3
    1fe0:	61 f4       	brne	.+24     	; 0x1ffa <openDoor+0x52>
		DCMotor_rotate(ANTI_CLOCK_WISE, MOTOR_FULL_SPEED);
    1fe2:	82 e0       	ldi	r24, 0x02	; 2
    1fe4:	64 e6       	ldi	r22, 0x64	; 100
    1fe6:	0e 94 0c 0a 	call	0x1418	; 0x1418 <DCMotor_rotate>
		UART_sendData('H');
    1fea:	88 e4       	ldi	r24, 0x48	; 72
    1fec:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
		Timer1_init(&timerConfig_7_5_Seconds);
    1ff0:	88 e6       	ldi	r24, 0x68	; 104
    1ff2:	91 e0       	ldi	r25, 0x01	; 1
    1ff4:	0e 94 4c 08 	call	0x1098	; 0x1098 <Timer1_init>
    1ff8:	0f c0       	rjmp	.+30     	; 0x2018 <openDoor+0x70>
		/*
		 * after 15 more seconds:
		 * stop the motor and send 'L' for the HMI ECU to inform it that the door has been closed
		 * and then stop the timer and reset the ticks variable
		 */
	} else if (g_tick == 5) {
    1ffa:	80 91 82 01 	lds	r24, 0x0182
    1ffe:	85 30       	cpi	r24, 0x05	; 5
    2000:	59 f4       	brne	.+22     	; 0x2018 <openDoor+0x70>
		DCMotor_rotate(STOP, 0);
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	0e 94 0c 0a 	call	0x1418	; 0x1418 <DCMotor_rotate>
		UART_sendData('L');
    200a:	8c e4       	ldi	r24, 0x4C	; 76
    200c:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
		Timer1_deInit();
    2010:	0e 94 a6 08 	call	0x114c	; 0x114c <Timer1_deInit>
		g_tick = 0;
    2014:	10 92 82 01 	sts	0x0182, r1
	}
}
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <arePasswordsEqual>:
/*
 * Description:
 * functions that checks the equality of two strings
 */
uint8 arePasswordsEqual(uint8 *firstPassword, uint8 *secondPassword) {
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	00 d0       	rcall	.+0      	; 0x2024 <arePasswordsEqual+0x6>
    2024:	00 d0       	rcall	.+0      	; 0x2026 <arePasswordsEqual+0x8>
    2026:	00 d0       	rcall	.+0      	; 0x2028 <arePasswordsEqual+0xa>
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	9b 83       	std	Y+3, r25	; 0x03
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	7d 83       	std	Y+5, r23	; 0x05
    2032:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    2034:	19 82       	std	Y+1, r1	; 0x01
    2036:	19 c0       	rjmp	.+50     	; 0x206a <arePasswordsEqual+0x4c>
	while (firstPassword[i] != '\0') {
		if (firstPassword[i] != secondPassword[i])
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	9b 81       	ldd	r25, Y+3	; 0x03
    2042:	fc 01       	movw	r30, r24
    2044:	e2 0f       	add	r30, r18
    2046:	f3 1f       	adc	r31, r19
    2048:	40 81       	ld	r20, Z
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	28 2f       	mov	r18, r24
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	8c 81       	ldd	r24, Y+4	; 0x04
    2052:	9d 81       	ldd	r25, Y+5	; 0x05
    2054:	fc 01       	movw	r30, r24
    2056:	e2 0f       	add	r30, r18
    2058:	f3 1f       	adc	r31, r19
    205a:	80 81       	ld	r24, Z
    205c:	48 17       	cp	r20, r24
    205e:	11 f0       	breq	.+4      	; 0x2064 <arePasswordsEqual+0x46>
			return FALSE;
    2060:	1e 82       	std	Y+6, r1	; 0x06
    2062:	10 c0       	rjmp	.+32     	; 0x2084 <arePasswordsEqual+0x66>
		i++;
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	8f 5f       	subi	r24, 0xFF	; 255
    2068:	89 83       	std	Y+1, r24	; 0x01
 * Description:
 * functions that checks the equality of two strings
 */
uint8 arePasswordsEqual(uint8 *firstPassword, uint8 *secondPassword) {
	uint8 i = 0;
	while (firstPassword[i] != '\0') {
    206a:	89 81       	ldd	r24, Y+1	; 0x01
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	9b 81       	ldd	r25, Y+3	; 0x03
    2074:	fc 01       	movw	r30, r24
    2076:	e2 0f       	add	r30, r18
    2078:	f3 1f       	adc	r31, r19
    207a:	80 81       	ld	r24, Z
    207c:	88 23       	and	r24, r24
    207e:	e1 f6       	brne	.-72     	; 0x2038 <arePasswordsEqual+0x1a>
		if (firstPassword[i] != secondPassword[i])
			return FALSE;
		i++;
	}
	return TRUE;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	8e 83       	std	Y+6, r24	; 0x06
    2084:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2086:	26 96       	adiw	r28, 0x06	; 6
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <main>:
/*******************************************************************************
 *                      		 Main      			                           *
 *******************************************************************************/
int main(void) {
    2098:	df 93       	push	r29
    209a:	cf 93       	push	r28
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	a7 97       	sbiw	r28, 0x27	; 39
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
	/*
	 * Modules and devices Initializations
	 * Timer, TWI, UART, Motor and Buzzer
	 */
	/* Set TWI Speed to 400KHz and define controller address to 0x01 "when it is considered a slave" */
	TWI_ConfigType twiConfig = { 0x01, RATE_400K };
    20ac:	9e 01       	movw	r18, r28
    20ae:	2d 5f       	subi	r18, 0xFD	; 253
    20b0:	3f 4f       	sbci	r19, 0xFF	; 255
    20b2:	3f 8f       	std	Y+31, r19	; 0x1f
    20b4:	2e 8f       	std	Y+30, r18	; 0x1e
    20b6:	8b e7       	ldi	r24, 0x7B	; 123
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	99 a3       	std	Y+33, r25	; 0x21
    20bc:	88 a3       	std	Y+32, r24	; 0x20
    20be:	95 e0       	ldi	r25, 0x05	; 5
    20c0:	9a a3       	std	Y+34, r25	; 0x22
    20c2:	e8 a1       	ldd	r30, Y+32	; 0x20
    20c4:	f9 a1       	ldd	r31, Y+33	; 0x21
    20c6:	00 80       	ld	r0, Z
    20c8:	28 a1       	ldd	r18, Y+32	; 0x20
    20ca:	39 a1       	ldd	r19, Y+33	; 0x21
    20cc:	2f 5f       	subi	r18, 0xFF	; 255
    20ce:	3f 4f       	sbci	r19, 0xFF	; 255
    20d0:	39 a3       	std	Y+33, r19	; 0x21
    20d2:	28 a3       	std	Y+32, r18	; 0x20
    20d4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    20d6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    20d8:	00 82       	st	Z, r0
    20da:	2e 8d       	ldd	r18, Y+30	; 0x1e
    20dc:	3f 8d       	ldd	r19, Y+31	; 0x1f
    20de:	2f 5f       	subi	r18, 0xFF	; 255
    20e0:	3f 4f       	sbci	r19, 0xFF	; 255
    20e2:	3f 8f       	std	Y+31, r19	; 0x1f
    20e4:	2e 8f       	std	Y+30, r18	; 0x1e
    20e6:	3a a1       	ldd	r19, Y+34	; 0x22
    20e8:	31 50       	subi	r19, 0x01	; 1
    20ea:	3a a3       	std	Y+34, r19	; 0x22
    20ec:	8a a1       	ldd	r24, Y+34	; 0x22
    20ee:	88 23       	and	r24, r24
    20f0:	41 f7       	brne	.-48     	; 0x20c2 <main+0x2a>
	TWI_init(&twiConfig);
    20f2:	ce 01       	movw	r24, r28
    20f4:	03 96       	adiw	r24, 0x03	; 3
    20f6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <TWI_init>
	/*Set UART frame to 8 bit data, no parity bit and single stop bit
	 *Baud rate to 9600
	 */
	UART_ConfigType uartConfig = { EIGHT_BITS, NO_PARITY, ONE_BIT, RATE_9600 };
    20fa:	fe 01       	movw	r30, r28
    20fc:	38 96       	adiw	r30, 0x08	; 8
    20fe:	fc a3       	std	Y+36, r31	; 0x24
    2100:	eb a3       	std	Y+35, r30	; 0x23
    2102:	24 e7       	ldi	r18, 0x74	; 116
    2104:	31 e0       	ldi	r19, 0x01	; 1
    2106:	3e a3       	std	Y+38, r19	; 0x26
    2108:	2d a3       	std	Y+37, r18	; 0x25
    210a:	37 e0       	ldi	r19, 0x07	; 7
    210c:	3f a3       	std	Y+39, r19	; 0x27
    210e:	ed a1       	ldd	r30, Y+37	; 0x25
    2110:	fe a1       	ldd	r31, Y+38	; 0x26
    2112:	00 80       	ld	r0, Z
    2114:	2d a1       	ldd	r18, Y+37	; 0x25
    2116:	3e a1       	ldd	r19, Y+38	; 0x26
    2118:	2f 5f       	subi	r18, 0xFF	; 255
    211a:	3f 4f       	sbci	r19, 0xFF	; 255
    211c:	3e a3       	std	Y+38, r19	; 0x26
    211e:	2d a3       	std	Y+37, r18	; 0x25
    2120:	eb a1       	ldd	r30, Y+35	; 0x23
    2122:	fc a1       	ldd	r31, Y+36	; 0x24
    2124:	00 82       	st	Z, r0
    2126:	2b a1       	ldd	r18, Y+35	; 0x23
    2128:	3c a1       	ldd	r19, Y+36	; 0x24
    212a:	2f 5f       	subi	r18, 0xFF	; 255
    212c:	3f 4f       	sbci	r19, 0xFF	; 255
    212e:	3c a3       	std	Y+36, r19	; 0x24
    2130:	2b a3       	std	Y+35, r18	; 0x23
    2132:	3f a1       	ldd	r19, Y+39	; 0x27
    2134:	31 50       	subi	r19, 0x01	; 1
    2136:	3f a3       	std	Y+39, r19	; 0x27
    2138:	8f a1       	ldd	r24, Y+39	; 0x27
    213a:	88 23       	and	r24, r24
    213c:	41 f7       	brne	.-48     	; 0x210e <main+0x76>
	UART_init(&uartConfig);
    213e:	ce 01       	movw	r24, r28
    2140:	08 96       	adiw	r24, 0x08	; 8
    2142:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <UART_init>
	/*
	 * Motor and buzzer initialization by setting their pins to output and turning them off initially
	 */
	Buzzer_init();
    2146:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <Buzzer_init>
	DCMotor_init();
    214a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <DCMotor_init>
	/*
	 * Enable global interrupt
	 */
	SREG = 1 << 7;
    214e:	ef e5       	ldi	r30, 0x5F	; 95
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 e8       	ldi	r24, 0x80	; 128
    2154:	80 83       	st	Z, r24
	uint8 firstPassword[6], secondPassword2[6];
	/* Flags for checking matching passwords and
	 * check if it is the first time for the user to use the program
	 * variable for holding UART received data
	 */
	uint8 matchingPasswordFlag = FALSE, firstTimeFlag, uartData;
    2156:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Holding until the HMI finishes initializations
	 */
	while (UART_receiveData() != 0xFF)
    2158:	0e 94 8a 07 	call	0xf14	; 0xf14 <UART_receiveData>
    215c:	8f 3f       	cpi	r24, 0xFF	; 255
    215e:	e1 f7       	brne	.-8      	; 0x2158 <main+0xc0>
		;
	/*
	 * read the address that holds the first time flag
	 */
	EEPROM_readByte(FIRSTTIMEFLAGADDRESS, &firstTimeFlag);
    2160:	9e 01       	movw	r18, r28
    2162:	25 5e       	subi	r18, 0xE5	; 229
    2164:	3f 4f       	sbci	r19, 0xFF	; 255
    2166:	80 e2       	ldi	r24, 0x20	; 32
    2168:	93 e0       	ldi	r25, 0x03	; 3
    216a:	b9 01       	movw	r22, r18
    216c:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <EEPROM_readByte>
	/* if it is the first time "the value stored in the address doesn't equal 'F'"
	 * Store 'F' in this location
	 */
	if (firstTimeFlag != 'F') {
    2170:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2172:	86 34       	cpi	r24, 0x46	; 70
    2174:	29 f0       	breq	.+10     	; 0x2180 <main+0xe8>
		EEPROM_writeByte(FIRSTTIMEFLAGADDRESS, 'F');
    2176:	80 e2       	ldi	r24, 0x20	; 32
    2178:	93 e0       	ldi	r25, 0x03	; 3
    217a:	66 e4       	ldi	r22, 0x46	; 70
    217c:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <EEPROM_writeByte>
	}
	/*
	 * send 'Y' to the HMI ECU to inform that it will receive the first time flag value
	 */
	UART_sendData('Y');
    2180:	89 e5       	ldi	r24, 0x59	; 89
    2182:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
	UART_sendData(firstTimeFlag);
    2186:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2188:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>

	/*control code */
	while (1) {
		/*receiving values from HMI to get informed by what action is happening*/
		uartData = UART_receiveData();
    218c:	0e 94 8a 07 	call	0xf14	; 0xf14 <UART_receiveData>
    2190:	89 83       	std	Y+1, r24	; 0x01
		switch (uartData) {
    2192:	89 81       	ldd	r24, Y+1	; 0x01
    2194:	e8 2f       	mov	r30, r24
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	fd 8f       	std	Y+29, r31	; 0x1d
    219a:	ec 8f       	std	Y+28, r30	; 0x1c
    219c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    219e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    21a0:	25 34       	cpi	r18, 0x45	; 69
    21a2:	31 05       	cpc	r19, r1
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <main+0x110>
    21a6:	66 c0       	rjmp	.+204    	; 0x2274 <main+0x1dc>
    21a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21ac:	86 34       	cpi	r24, 0x46	; 70
    21ae:	91 05       	cpc	r25, r1
    21b0:	34 f4       	brge	.+12     	; 0x21be <main+0x126>
    21b2:	ec 8d       	ldd	r30, Y+28	; 0x1c
    21b4:	fd 8d       	ldd	r31, Y+29	; 0x1d
    21b6:	e3 34       	cpi	r30, 0x43	; 67
    21b8:	f1 05       	cpc	r31, r1
    21ba:	69 f0       	breq	.+26     	; 0x21d6 <main+0x13e>
    21bc:	e7 cf       	rjmp	.-50     	; 0x218c <main+0xf4>
    21be:	2c 8d       	ldd	r18, Y+28	; 0x1c
    21c0:	3d 8d       	ldd	r19, Y+29	; 0x1d
    21c2:	2d 34       	cpi	r18, 0x4D	; 77
    21c4:	31 05       	cpc	r19, r1
    21c6:	89 f1       	breq	.+98     	; 0x222a <main+0x192>
    21c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21cc:	84 35       	cpi	r24, 0x54	; 84
    21ce:	91 05       	cpc	r25, r1
    21d0:	09 f4       	brne	.+2      	; 0x21d4 <main+0x13c>
    21d2:	5b c0       	rjmp	.+182    	; 0x228a <main+0x1f2>
    21d4:	db cf       	rjmp	.-74     	; 0x218c <main+0xf4>
		 * if HMI sent 'C' that means it will start sending passwords for set or reset and
		 * will wait for the result
		 */
		case 'C':
			/*receiving first input password*/
			UART_receiveString(firstPassword);
    21d6:	ce 01       	movw	r24, r28
    21d8:	0f 96       	adiw	r24, 0x0f	; 15
    21da:	0e 94 c2 07 	call	0xf84	; 0xf84 <UART_receiveString>
			/*send 'C' to inform HMI to start sending the second password*/
			UART_sendData('C');
    21de:	83 e4       	ldi	r24, 0x43	; 67
    21e0:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
			/*receiving second input password*/
			UART_receiveString(secondPassword2);
    21e4:	ce 01       	movw	r24, r28
    21e6:	45 96       	adiw	r24, 0x15	; 21
    21e8:	0e 94 c2 07 	call	0xf84	; 0xf84 <UART_receiveString>
			/*checks two passwords equality*/
			matchingPasswordFlag = arePasswordsEqual(firstPassword,
    21ec:	ce 01       	movw	r24, r28
    21ee:	0f 96       	adiw	r24, 0x0f	; 15
    21f0:	9e 01       	movw	r18, r28
    21f2:	2b 5e       	subi	r18, 0xEB	; 235
    21f4:	3f 4f       	sbci	r19, 0xFF	; 255
    21f6:	b9 01       	movw	r22, r18
    21f8:	0e 94 0f 10 	call	0x201e	; 0x201e <arePasswordsEqual>
    21fc:	8a 83       	std	Y+2, r24	; 0x02
					secondPassword2);
			/*send 'C' to inform HMI that it will receive the result of the comparison*/
			UART_sendData('C');
    21fe:	83 e4       	ldi	r24, 0x43	; 67
    2200:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
			/*send 'A' if the two passwords are matched and 'B' it they aren't*/
			if (matchingPasswordFlag) {
    2204:	8a 81       	ldd	r24, Y+2	; 0x02
    2206:	88 23       	and	r24, r24
    2208:	61 f0       	breq	.+24     	; 0x2222 <main+0x18a>
				UART_sendData('A');
    220a:	81 e4       	ldi	r24, 0x41	; 65
    220c:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
				EEPROM_writeSting(PASSSTARTADDRESS, firstPassword);
    2210:	9e 01       	movw	r18, r28
    2212:	21 5f       	subi	r18, 0xF1	; 241
    2214:	3f 4f       	sbci	r19, 0xFF	; 255
    2216:	81 e1       	ldi	r24, 0x11	; 17
    2218:	93 e0       	ldi	r25, 0x03	; 3
    221a:	b9 01       	movw	r22, r18
    221c:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <EEPROM_writeSting>
    2220:	b5 cf       	rjmp	.-150    	; 0x218c <main+0xf4>
			} else
				UART_sendData('B');
    2222:	82 e4       	ldi	r24, 0x42	; 66
    2224:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
    2228:	b1 cf       	rjmp	.-158    	; 0x218c <main+0xf4>
			 * check if it matches the stored password and
			 * will wait for the result
			 */
		case 'M':
			/*receiving input password*/
			UART_receiveString(firstPassword);
    222a:	ce 01       	movw	r24, r28
    222c:	0f 96       	adiw	r24, 0x0f	; 15
    222e:	0e 94 c2 07 	call	0xf84	; 0xf84 <UART_receiveString>
			/*retrieve password stored in memory*/
			EEPROM_readString(PASSSTARTADDRESS, secondPassword2, 5);
    2232:	9e 01       	movw	r18, r28
    2234:	2b 5e       	subi	r18, 0xEB	; 235
    2236:	3f 4f       	sbci	r19, 0xFF	; 255
    2238:	81 e1       	ldi	r24, 0x11	; 17
    223a:	93 e0       	ldi	r25, 0x03	; 3
    223c:	b9 01       	movw	r22, r18
    223e:	45 e0       	ldi	r20, 0x05	; 5
    2240:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <EEPROM_readString>
			secondPassword2[5] = '\0';
    2244:	1a 8e       	std	Y+26, r1	; 0x1a
			/*check the input password*/
			matchingPasswordFlag = arePasswordsEqual(firstPassword,
    2246:	ce 01       	movw	r24, r28
    2248:	0f 96       	adiw	r24, 0x0f	; 15
    224a:	9e 01       	movw	r18, r28
    224c:	2b 5e       	subi	r18, 0xEB	; 235
    224e:	3f 4f       	sbci	r19, 0xFF	; 255
    2250:	b9 01       	movw	r22, r18
    2252:	0e 94 0f 10 	call	0x201e	; 0x201e <arePasswordsEqual>
    2256:	8a 83       	std	Y+2, r24	; 0x02
					secondPassword2);
			/*send 'Z' to inform HMI that it will receive the result of the comparison*/
			UART_sendData('Z');
    2258:	8a e5       	ldi	r24, 0x5A	; 90
    225a:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
			/*send 'A' if the two passwords are matched and 'B' it they aren't*/
			if (matchingPasswordFlag) {
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	88 23       	and	r24, r24
    2262:	21 f0       	breq	.+8      	; 0x226c <main+0x1d4>
				UART_sendData('A');
    2264:	81 e4       	ldi	r24, 0x41	; 65
    2266:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
    226a:	90 cf       	rjmp	.-224    	; 0x218c <main+0xf4>
			} else
				UART_sendData('B');
    226c:	82 e4       	ldi	r24, 0x42	; 66
    226e:	0e 94 73 07 	call	0xee6	; 0xee6 <UART_sendData>
    2272:	8c cf       	rjmp	.-232    	; 0x218c <main+0xf4>
			 * if HMI sent 'E' that means that user entered a wrong password 3 times
			 * the control ECU starts the buzzer and initializes the timer
			 * set the call back to the wrong password function
			 */
		case 'E':
			Buzzer_on();
    2274:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <Buzzer_on>
			Timer1_init(&timerConfig_7_5_Seconds);
    2278:	88 e6       	ldi	r24, 0x68	; 104
    227a:	91 e0       	ldi	r25, 0x01	; 1
    227c:	0e 94 4c 08 	call	0x1098	; 0x1098 <Timer1_init>
			Timer1_setCallBack(wrongPassword);
    2280:	8b eb       	ldi	r24, 0xBB	; 187
    2282:	9f e0       	ldi	r25, 0x0F	; 15
    2284:	0e 94 c9 08 	call	0x1192	; 0x1192 <Timer1_setCallBack>
    2288:	81 cf       	rjmp	.-254    	; 0x218c <main+0xf4>
			 * if HMI sent 'T' that means that user entered the right password
			 * the control ECU starts the motor and initializes the timer
			 * set the call back to the open door function
			 */
		case 'T':
			DCMotor_rotate(CLOCK_WISE, MOTOR_FULL_SPEED);
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	64 e6       	ldi	r22, 0x64	; 100
    228e:	0e 94 0c 0a 	call	0x1418	; 0x1418 <DCMotor_rotate>
			Timer1_init(&timerConfig_7_5_Seconds);
    2292:	88 e6       	ldi	r24, 0x68	; 104
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	0e 94 4c 08 	call	0x1098	; 0x1098 <Timer1_init>
			Timer1_setCallBack(openDoor);
    229a:	84 ed       	ldi	r24, 0xD4	; 212
    229c:	9f e0       	ldi	r25, 0x0F	; 15
    229e:	0e 94 c9 08 	call	0x1192	; 0x1192 <Timer1_setCallBack>
    22a2:	74 cf       	rjmp	.-280    	; 0x218c <main+0xf4>

000022a4 <__udivmodsi4>:
    22a4:	a1 e2       	ldi	r26, 0x21	; 33
    22a6:	1a 2e       	mov	r1, r26
    22a8:	aa 1b       	sub	r26, r26
    22aa:	bb 1b       	sub	r27, r27
    22ac:	fd 01       	movw	r30, r26
    22ae:	0d c0       	rjmp	.+26     	; 0x22ca <__udivmodsi4_ep>

000022b0 <__udivmodsi4_loop>:
    22b0:	aa 1f       	adc	r26, r26
    22b2:	bb 1f       	adc	r27, r27
    22b4:	ee 1f       	adc	r30, r30
    22b6:	ff 1f       	adc	r31, r31
    22b8:	a2 17       	cp	r26, r18
    22ba:	b3 07       	cpc	r27, r19
    22bc:	e4 07       	cpc	r30, r20
    22be:	f5 07       	cpc	r31, r21
    22c0:	20 f0       	brcs	.+8      	; 0x22ca <__udivmodsi4_ep>
    22c2:	a2 1b       	sub	r26, r18
    22c4:	b3 0b       	sbc	r27, r19
    22c6:	e4 0b       	sbc	r30, r20
    22c8:	f5 0b       	sbc	r31, r21

000022ca <__udivmodsi4_ep>:
    22ca:	66 1f       	adc	r22, r22
    22cc:	77 1f       	adc	r23, r23
    22ce:	88 1f       	adc	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	1a 94       	dec	r1
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <__udivmodsi4_loop>
    22d6:	60 95       	com	r22
    22d8:	70 95       	com	r23
    22da:	80 95       	com	r24
    22dc:	90 95       	com	r25
    22de:	9b 01       	movw	r18, r22
    22e0:	ac 01       	movw	r20, r24
    22e2:	bd 01       	movw	r22, r26
    22e4:	cf 01       	movw	r24, r30
    22e6:	08 95       	ret

000022e8 <__prologue_saves__>:
    22e8:	2f 92       	push	r2
    22ea:	3f 92       	push	r3
    22ec:	4f 92       	push	r4
    22ee:	5f 92       	push	r5
    22f0:	6f 92       	push	r6
    22f2:	7f 92       	push	r7
    22f4:	8f 92       	push	r8
    22f6:	9f 92       	push	r9
    22f8:	af 92       	push	r10
    22fa:	bf 92       	push	r11
    22fc:	cf 92       	push	r12
    22fe:	df 92       	push	r13
    2300:	ef 92       	push	r14
    2302:	ff 92       	push	r15
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	ca 1b       	sub	r28, r26
    2312:	db 0b       	sbc	r29, r27
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	09 94       	ijmp

00002320 <__epilogue_restores__>:
    2320:	2a 88       	ldd	r2, Y+18	; 0x12
    2322:	39 88       	ldd	r3, Y+17	; 0x11
    2324:	48 88       	ldd	r4, Y+16	; 0x10
    2326:	5f 84       	ldd	r5, Y+15	; 0x0f
    2328:	6e 84       	ldd	r6, Y+14	; 0x0e
    232a:	7d 84       	ldd	r7, Y+13	; 0x0d
    232c:	8c 84       	ldd	r8, Y+12	; 0x0c
    232e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2330:	aa 84       	ldd	r10, Y+10	; 0x0a
    2332:	b9 84       	ldd	r11, Y+9	; 0x09
    2334:	c8 84       	ldd	r12, Y+8	; 0x08
    2336:	df 80       	ldd	r13, Y+7	; 0x07
    2338:	ee 80       	ldd	r14, Y+6	; 0x06
    233a:	fd 80       	ldd	r15, Y+5	; 0x05
    233c:	0c 81       	ldd	r16, Y+4	; 0x04
    233e:	1b 81       	ldd	r17, Y+3	; 0x03
    2340:	aa 81       	ldd	r26, Y+2	; 0x02
    2342:	b9 81       	ldd	r27, Y+1	; 0x01
    2344:	ce 0f       	add	r28, r30
    2346:	d1 1d       	adc	r29, r1
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	ed 01       	movw	r28, r26
    2354:	08 95       	ret

00002356 <_exit>:
    2356:	f8 94       	cli

00002358 <__stop_program>:
    2358:	ff cf       	rjmp	.-2      	; 0x2358 <__stop_program>
