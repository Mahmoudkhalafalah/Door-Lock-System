
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003806  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c0  00800060  00003806  0000389a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800220  00800220  00003a5a  2**0
                  ALLOC
  3 .stab         000030e4  00000000  00000000  00003a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000157a  00000000  00000000  00006b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000080ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000827a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000848e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000aaa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000bf6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000d27c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000d45c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000d763  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e17d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 48 09 	jmp	0x1290	; 0x1290 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e0       	ldi	r30, 0x06	; 6
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 32       	cpi	r26, 0x20	; 32
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e2       	ldi	r26, 0x20	; 32
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 27 19 	call	0x324e	; 0x324e <main>
      8a:	0c 94 01 1c 	jmp	0x3802	; 0x3802 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e1       	ldi	r26, 0x10	; 16
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ca 1b 	jmp	0x3794	; 0x3794 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e1       	ldi	r24, 0x10	; 16
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e6 1b 	jmp	0x37cc	; 0x37cc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d2 1b 	jmp	0x37a4	; 0x37a4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e1       	ldi	r22, 0x10	; 16
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ee 1b 	jmp	0x37dc	; 0x37dc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 da 1b 	jmp	0x37b4	; 0x37b4 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 f6 1b 	jmp	0x37ec	; 0x37ec <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 d2 1b 	jmp	0x37a4	; 0x37a4 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 ee 1b 	jmp	0x37dc	; 0x37dc <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e8 5e       	subi	r30, 0xE8	; 232
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <UART_init>:
 * baud rate & frame:
 * 1-parity bit
 * 2-number of data bits
 * 3-stop bits"
 */
void UART_init(const UART_ConfigType *config_ptr) {
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <UART_init+0x6>
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <UART_init+0x8>
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9c 83       	std	Y+4, r25	; 0x04
     ef8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 UBRRValue = 0;
     efa:	1a 82       	std	Y+2, r1	; 0x02
     efc:	19 82       	std	Y+1, r1	; 0x01

	/*Calculating the value of UBRR to obtain certain baud rate*/
	UBRRValue = (uint16) (((F_CPU / (config_ptr->baud_rate * 8UL))) - 1);
     efe:	eb 81       	ldd	r30, Y+3	; 0x03
     f00:	fc 81       	ldd	r31, Y+4	; 0x04
     f02:	83 81       	ldd	r24, Z+3	; 0x03
     f04:	94 81       	ldd	r25, Z+4	; 0x04
     f06:	a5 81       	ldd	r26, Z+5	; 0x05
     f08:	b6 81       	ldd	r27, Z+6	; 0x06
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	aa 1f       	adc	r26, r26
     f10:	bb 1f       	adc	r27, r27
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	aa 1f       	adc	r26, r26
     f18:	bb 1f       	adc	r27, r27
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	aa 1f       	adc	r26, r26
     f20:	bb 1f       	adc	r27, r27
     f22:	9c 01       	movw	r18, r24
     f24:	ad 01       	movw	r20, r26
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	92 e1       	ldi	r25, 0x12	; 18
     f2a:	aa e7       	ldi	r26, 0x7A	; 122
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	bc 01       	movw	r22, r24
     f30:	cd 01       	movw	r24, r26
     f32:	0e 94 8d 1b 	call	0x371a	; 0x371a <__udivmodsi4>
     f36:	da 01       	movw	r26, r20
     f38:	c9 01       	movw	r24, r18
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Writing this bit to one to reduce the divisor of the baud rate divider
	 * from 16 to 8 to double the transfer rate.
	 */
	UCSRA = 1 << U2X;
     f40:	eb e2       	ldi	r30, 0x2B	; 43
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	82 e0       	ldi	r24, 0x02	; 2
     f46:	80 83       	st	Z, r24
	 * Writing RXEN bit and TXEN to one to enable the USART Receiver.
	 * The Receiver and transmitter will override normal port operation
	 * for the RxD and TxD pins when enabled.
	 * if 9 bit mode were chosen set UCZ2 to 1 "masking bit 2 in bit_data which is one when 9 bit mode is chosen"
	 */
	UCSRB = (1 << TXEN) | (1 << RXEN) | ((config_ptr->bit_data & 0x04) << 1);
     f48:	aa e2       	ldi	r26, 0x2A	; 42
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	eb 81       	ldd	r30, Y+3	; 0x03
     f4e:	fc 81       	ldd	r31, Y+4	; 0x04
     f50:	80 81       	ld	r24, Z
     f52:	88 2f       	mov	r24, r24
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	84 70       	andi	r24, 0x04	; 4
     f58:	90 70       	andi	r25, 0x00	; 0
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	88 61       	ori	r24, 0x18	; 24
     f60:	8c 93       	st	X, r24
	 * USMEL bit is zero to choose asynchronous mode
	 * select parity mode in UPM1:0 bits
	 * select data bits in UCSZ0 & UCSZ1 bits "masking first two bits only in bit_data"
	 * select stop bits in USBS bit
	 */
	UCSRC = (1 << URSEL) | (config_ptr->stop_bit << 3)
     f62:	a0 e4       	ldi	r26, 0x40	; 64
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	eb 81       	ldd	r30, Y+3	; 0x03
     f68:	fc 81       	ldd	r31, Y+4	; 0x04
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	88 2f       	mov	r24, r24
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	28 2f       	mov	r18, r24
     f7e:	20 68       	ori	r18, 0x80	; 128
     f80:	eb 81       	ldd	r30, Y+3	; 0x03
     f82:	fc 81       	ldd	r31, Y+4	; 0x04
     f84:	80 81       	ld	r24, Z
     f86:	88 2f       	mov	r24, r24
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	83 70       	andi	r24, 0x03	; 3
     f8c:	90 70       	andi	r25, 0x00	; 0
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	28 2b       	or	r18, r24
     f94:	eb 81       	ldd	r30, Y+3	; 0x03
     f96:	fc 81       	ldd	r31, Y+4	; 0x04
     f98:	81 81       	ldd	r24, Z+1	; 0x01
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	82 95       	swap	r24
     fa0:	92 95       	swap	r25
     fa2:	90 7f       	andi	r25, 0xF0	; 240
     fa4:	98 27       	eor	r25, r24
     fa6:	80 7f       	andi	r24, 0xF0	; 240
     fa8:	98 27       	eor	r25, r24
     faa:	82 2b       	or	r24, r18
     fac:	8c 93       	st	X, r24
	 * Writing URSEL to zero to select register UBBRH to be accessed
	 * determine the content of UBRRL register depending on the baud rate
	 * UBRR = (Fosc/(8*baudrate))-1
	 * put the Lower 8 bits in UBRRL register and 8:11 bits in UBRRH
	 */
	UBRRH = 0;
     fae:	e0 e4       	ldi	r30, 0x40	; 64
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	10 82       	st	Z, r1
	UBRRH = UBRRValue >> 8;
     fb4:	e0 e4       	ldi	r30, 0x40	; 64
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	89 2f       	mov	r24, r25
     fbe:	99 27       	eor	r25, r25
     fc0:	80 83       	st	Z, r24
	UBRRL = UBRRValue & 0x00FF;
     fc2:	e9 e2       	ldi	r30, 0x29	; 41
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	80 83       	st	Z, r24

}
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	cf 91       	pop	r28
     fd4:	df 91       	pop	r29
     fd6:	08 95       	ret

00000fd8 <UART_sendData>:
/*
 * Description:
 * sending Data with UART
 */
void UART_sendData(uint8 data) {
     fd8:	df 93       	push	r29
     fda:	cf 93       	push	r28
     fdc:	0f 92       	push	r0
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	LOOP_UNTIL_BIT_IS_SET(UCSRA, UDRE);
     fe4:	eb e2       	ldi	r30, 0x2B	; 43
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	88 2f       	mov	r24, r24
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	80 72       	andi	r24, 0x20	; 32
     ff0:	90 70       	andi	r25, 0x00	; 0
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	b9 f3       	breq	.-18     	; 0xfe4 <UART_sendData+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     ff6:	ec e2       	ldi	r30, 0x2C	; 44
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	80 83       	st	Z, r24
}
     ffe:	0f 90       	pop	r0
    1000:	cf 91       	pop	r28
    1002:	df 91       	pop	r29
    1004:	08 95       	ret

00001006 <UART_receiveData>:
/*
 * Description:
 * receiving Data with UART
 */
uint8 UART_receiveData(void) {
    1006:	df 93       	push	r29
    1008:	cf 93       	push	r28
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	LOOP_UNTIL_BIT_IS_SET(UCSRA, RXC);
    100e:	eb e2       	ldi	r30, 0x2B	; 43
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	88 23       	and	r24, r24
    1016:	dc f7       	brge	.-10     	; 0x100e <UART_receiveData+0x8>
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    1018:	ec e2       	ldi	r30, 0x2C	; 44
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
}
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <UART_sendString+0x6>
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	9b 83       	std	Y+3, r25	; 0x03
    1032:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1034:	19 82       	std	Y+1, r1	; 0x01
    1036:	0e c0       	rjmp	.+28     	; 0x1054 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendData(Str[i]);
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	fc 01       	movw	r30, r24
    1044:	e2 0f       	add	r30, r18
    1046:	f3 1f       	adc	r31, r19
    1048:	80 81       	ld	r24, Z
    104a:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <UART_sendData>
		i++;
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	fc 01       	movw	r30, r24
    1060:	e2 0f       	add	r30, r18
    1062:	f3 1f       	adc	r31, r19
    1064:	80 81       	ld	r24, Z
    1066:	88 23       	and	r24, r24
    1068:	39 f7       	brne	.-50     	; 0x1038 <UART_sendString+0x14>
		UART_sendData(Str[i]);
		i++;
	}
}
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	00 d0       	rcall	.+0      	; 0x1080 <UART_receiveString+0xa>
    1080:	0f 92       	push	r0
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	9b 83       	std	Y+3, r25	; 0x03
    1088:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    108a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveData();
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	9b 81       	ldd	r25, Y+3	; 0x03
    1096:	8c 01       	movw	r16, r24
    1098:	02 0f       	add	r16, r18
    109a:	13 1f       	adc	r17, r19
    109c:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    10a0:	f8 01       	movw	r30, r16
    10a2:	80 83       	st	Z, r24
    10a4:	0f c0       	rjmp	.+30     	; 0x10c4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
    10a6:	89 81       	ldd	r24, Y+1	; 0x01
    10a8:	8f 5f       	subi	r24, 0xFF	; 255
    10aa:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveData();
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	9b 81       	ldd	r25, Y+3	; 0x03
    10b6:	8c 01       	movw	r16, r24
    10b8:	02 0f       	add	r16, r18
    10ba:	13 1f       	adc	r17, r19
    10bc:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    10c0:	f8 01       	movw	r30, r16
    10c2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveData();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	9b 81       	ldd	r25, Y+3	; 0x03
    10ce:	fc 01       	movw	r30, r24
    10d0:	e2 0f       	add	r30, r18
    10d2:	f3 1f       	adc	r31, r19
    10d4:	80 81       	ld	r24, Z
    10d6:	83 32       	cpi	r24, 0x23	; 35
    10d8:	31 f7       	brne	.-52     	; 0x10a6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveData();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	9b 81       	ldd	r25, Y+3	; 0x03
    10e4:	fc 01       	movw	r30, r24
    10e6:	e2 0f       	add	r30, r18
    10e8:	f3 1f       	adc	r31, r19
    10ea:	10 82       	st	Z, r1
}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	08 95       	ret

000010fc <Timer1_init>:
 * 1. initial value of the timer
 * 2. compare value for compare mode
 * 3. prescaler
 * 4. mode of the timer
 */
void Timer1_init(const Timer1_ConfigType *Config_Ptr) {
    10fc:	df 93       	push	r29
    10fe:	cf 93       	push	r28
    1100:	00 d0       	rcall	.+0      	; 0x1102 <Timer1_init+0x6>
    1102:	00 d0       	rcall	.+0      	; 0x1104 <Timer1_init+0x8>
    1104:	cd b7       	in	r28, 0x3d	; 61
    1106:	de b7       	in	r29, 0x3e	; 62
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Putting the initial value in TCNT1 Register
	 * Save the initial value in the global variable to initialize the register with each interrupt
	 */
	TCNT1 = Config_Ptr->initial_value;
    110c:	ac e4       	ldi	r26, 0x4C	; 76
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e9 81       	ldd	r30, Y+1	; 0x01
    1112:	fa 81       	ldd	r31, Y+2	; 0x02
    1114:	80 81       	ld	r24, Z
    1116:	91 81       	ldd	r25, Z+1	; 0x01
    1118:	11 96       	adiw	r26, 0x01	; 1
    111a:	9c 93       	st	X, r25
    111c:	8e 93       	st	-X, r24
	G_initialValue = Config_Ptr->initial_value;
    111e:	e9 81       	ldd	r30, Y+1	; 0x01
    1120:	fa 81       	ldd	r31, Y+2	; 0x02
    1122:	80 81       	ld	r24, Z
    1124:	91 81       	ldd	r25, Z+1	; 0x01
    1126:	90 93 26 02 	sts	0x0226, r25
    112a:	80 93 25 02 	sts	0x0225, r24
	/*
	 * Sets FOC1A/FOC1B For Non-PWM Mode
	 */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    112e:	ef e4       	ldi	r30, 0x4F	; 79
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8c e0       	ldi	r24, 0x0C	; 12
    1134:	80 83       	st	Z, r24
	 * select the requested mode pins "WGM10 ,WGM11, WGM12"
	 * normal Mode 000
	 * compare mode 100
	 * for compare mode put the compare value in OCR1A register
	 */
	switch (Config_Ptr->mode) {
    1136:	e9 81       	ldd	r30, Y+1	; 0x01
    1138:	fa 81       	ldd	r31, Y+2	; 0x02
    113a:	85 81       	ldd	r24, Z+5	; 0x05
    113c:	28 2f       	mov	r18, r24
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	3c 83       	std	Y+4, r19	; 0x04
    1142:	2b 83       	std	Y+3, r18	; 0x03
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	9c 81       	ldd	r25, Y+4	; 0x04
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	31 f0       	breq	.+12     	; 0x1158 <Timer1_init+0x5c>
    114c:	2b 81       	ldd	r18, Y+3	; 0x03
    114e:	3c 81       	ldd	r19, Y+4	; 0x04
    1150:	21 30       	cpi	r18, 0x01	; 1
    1152:	31 05       	cpc	r19, r1
    1154:	31 f0       	breq	.+12     	; 0x1162 <Timer1_init+0x66>
    1156:	19 c0       	rjmp	.+50     	; 0x118a <Timer1_init+0x8e>
	case NORMAL_MODE:
		TIMSK = 1 << TOIE1;
    1158:	e9 e5       	ldi	r30, 0x59	; 89
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	84 e0       	ldi	r24, 0x04	; 4
    115e:	80 83       	st	Z, r24
    1160:	14 c0       	rjmp	.+40     	; 0x118a <Timer1_init+0x8e>
		break;
	case CTC_MODE:
		TIMSK = (1 << OCIE1A);
    1162:	e9 e5       	ldi	r30, 0x59	; 89
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 e1       	ldi	r24, 0x10	; 16
    1168:	80 83       	st	Z, r24
		TCCR1B |= (1 << WGM12);
    116a:	ae e4       	ldi	r26, 0x4E	; 78
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ee e4       	ldi	r30, 0x4E	; 78
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	88 60       	ori	r24, 0x08	; 8
    1176:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;
    1178:	aa e4       	ldi	r26, 0x4A	; 74
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e9 81       	ldd	r30, Y+1	; 0x01
    117e:	fa 81       	ldd	r31, Y+2	; 0x02
    1180:	82 81       	ldd	r24, Z+2	; 0x02
    1182:	93 81       	ldd	r25, Z+3	; 0x03
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	9c 93       	st	X, r25
    1188:	8e 93       	st	-X, r24
	 * F CPU / 8 -> 010
	 * F CPU / 64 -> 011
	 * F CPU / 256 -> 100
	 * F CPU / 1024 -> 101
	 */
	TCCR1B |= (Config_Ptr->prescaler & 0x07);
    118a:	ae e4       	ldi	r26, 0x4E	; 78
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	ee e4       	ldi	r30, 0x4E	; 78
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	98 2f       	mov	r25, r24
    1196:	e9 81       	ldd	r30, Y+1	; 0x01
    1198:	fa 81       	ldd	r31, Y+2	; 0x02
    119a:	84 81       	ldd	r24, Z+4	; 0x04
    119c:	87 70       	andi	r24, 0x07	; 7
    119e:	89 2b       	or	r24, r25
    11a0:	8c 93       	st	X, r24
}
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <Timer1_deInit>:
/*
 * Description:
 * Function to disable timer 1
 */
void Timer1_deInit(void) {
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
	//Clear Prescaler
	TCCR1B = TCCR1B & 0XF8;
    11b8:	ae e4       	ldi	r26, 0x4E	; 78
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ee e4       	ldi	r30, 0x4E	; 78
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	88 7f       	andi	r24, 0xF8	; 248
    11c4:	8c 93       	st	X, r24
	//Close Timer 1 Overflow Interrupt
	CLEAR_BIT(TIMSK, TOIE1);
    11c6:	a9 e5       	ldi	r26, 0x59	; 89
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e9 e5       	ldi	r30, 0x59	; 89
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8b 7f       	andi	r24, 0xFB	; 251
    11d2:	8c 93       	st	X, r24
	//Close Timer 1 Compare Interrupt For Channel A
	CLEAR_BIT(TIMSK, OCIE1A);
    11d4:	a9 e5       	ldi	r26, 0x59	; 89
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e9 e5       	ldi	r30, 0x59	; 89
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8f 7e       	andi	r24, 0xEF	; 239
    11e0:	8c 93       	st	X, r24
	//Close Timer 1 Compare Interrupt For Channel B
	CLEAR_BIT(TIMSK, OCIE1B);
    11e2:	a9 e5       	ldi	r26, 0x59	; 89
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e9 e5       	ldi	r30, 0x59	; 89
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	87 7f       	andi	r24, 0xF7	; 247
    11ee:	8c 93       	st	X, r24
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <Timer1_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address
 */
void Timer1_setCallBack(void (*a_ptr)(void)) {
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	00 d0       	rcall	.+0      	; 0x11fc <Timer1_setCallBack+0x6>
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    1200:	9a 83       	std	Y+2, r25	; 0x02
    1202:	89 83       	std	Y+1, r24	; 0x01
	timer1CallBack = a_ptr;
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	9a 81       	ldd	r25, Y+2	; 0x02
    1208:	90 93 21 02 	sts	0x0221, r25
    120c:	80 93 20 02 	sts	0x0220, r24
}
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <__vector_9>:

/*
 * ISR for Timer 1 Normal Mode
 */
ISR(TIMER1_OVF_vect) {
    121a:	1f 92       	push	r1
    121c:	0f 92       	push	r0
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	0f 92       	push	r0
    1222:	11 24       	eor	r1, r1
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	5f 93       	push	r21
    122c:	6f 93       	push	r22
    122e:	7f 93       	push	r23
    1230:	8f 93       	push	r24
    1232:	9f 93       	push	r25
    1234:	af 93       	push	r26
    1236:	bf 93       	push	r27
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
    123c:	df 93       	push	r29
    123e:	cf 93       	push	r28
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = G_initialValue; /*initialize TCNT1 with the initial value*/
    1244:	ec e4       	ldi	r30, 0x4C	; 76
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 91 25 02 	lds	r24, 0x0225
    124c:	90 91 26 02 	lds	r25, 0x0226
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	80 83       	st	Z, r24
	if (timer1CallBack != NULL_PTR) {
    1254:	80 91 20 02 	lds	r24, 0x0220
    1258:	90 91 21 02 	lds	r25, 0x0221
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	29 f0       	breq	.+10     	; 0x126a <__vector_9+0x50>
		timer1CallBack();
    1260:	e0 91 20 02 	lds	r30, 0x0220
    1264:	f0 91 21 02 	lds	r31, 0x0221
    1268:	09 95       	icall
	}
}
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	0f 90       	pop	r0
    128c:	1f 90       	pop	r1
    128e:	18 95       	reti

00001290 <__vector_7>:
/*
 * ISR for Timer 1 compare Mode
 */
ISR(TIMER1_COMPA_vect) {
    1290:	1f 92       	push	r1
    1292:	0f 92       	push	r0
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	0f 92       	push	r0
    1298:	11 24       	eor	r1, r1
    129a:	2f 93       	push	r18
    129c:	3f 93       	push	r19
    129e:	4f 93       	push	r20
    12a0:	5f 93       	push	r21
    12a2:	6f 93       	push	r22
    12a4:	7f 93       	push	r23
    12a6:	8f 93       	push	r24
    12a8:	9f 93       	push	r25
    12aa:	af 93       	push	r26
    12ac:	bf 93       	push	r27
    12ae:	ef 93       	push	r30
    12b0:	ff 93       	push	r31
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = G_initialValue; /*initialize TCNT1 with the initial value*/
    12ba:	ec e4       	ldi	r30, 0x4C	; 76
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 91 25 02 	lds	r24, 0x0225
    12c2:	90 91 26 02 	lds	r25, 0x0226
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	80 83       	st	Z, r24
	if (timer1CallBack != NULL_PTR) {
    12ca:	80 91 20 02 	lds	r24, 0x0220
    12ce:	90 91 21 02 	lds	r25, 0x0221
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	29 f0       	breq	.+10     	; 0x12e0 <__vector_7+0x50>
		timer1CallBack();
    12d6:	e0 91 20 02 	lds	r30, 0x0220
    12da:	f0 91 21 02 	lds	r31, 0x0221
    12de:	09 95       	icall
	}
}
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	0f 90       	pop	r0
    1302:	1f 90       	pop	r1
    1304:	18 95       	reti

00001306 <LCD_Init>:
 * 4. function set for 8 or 4 bit mode
 * 5. Display control
 * 6. Clear display
 * 7. Entry mode set
 */
void LCD_Init() {
    1306:	0f 93       	push	r16
    1308:	1f 93       	push	r17
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	c6 54       	subi	r28, 0x46	; 70
    1314:	d0 40       	sbci	r29, 0x00	; 0
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61

	GPIO_setupPinDirection(LCD_CTRL_PORT, LCD_RS, PIN_OUTPUT);
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	41 e0       	ldi	r20, 0x01	; 1
    1326:	0e 94 a1 14 	call	0x2942	; 0x2942 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_CTRL_PORT, LCD_E, PIN_OUTPUT);
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	61 e0       	ldi	r22, 0x01	; 1
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	0e 94 a1 14 	call	0x2942	; 0x2942 <GPIO_setupPinDirection>
    1334:	fe 01       	movw	r30, r28
    1336:	ed 5b       	subi	r30, 0xBD	; 189
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	a0 ea       	ldi	r26, 0xA0	; 160
    1340:	b1 e4       	ldi	r27, 0x41	; 65
    1342:	80 83       	st	Z, r24
    1344:	91 83       	std	Z+1, r25	; 0x01
    1346:	a2 83       	std	Z+2, r26	; 0x02
    1348:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    134a:	8e 01       	movw	r16, r28
    134c:	01 5c       	subi	r16, 0xC1	; 193
    134e:	1f 4f       	sbci	r17, 0xFF	; 255
    1350:	fe 01       	movw	r30, r28
    1352:	ed 5b       	subi	r30, 0xBD	; 189
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	60 81       	ld	r22, Z
    1358:	71 81       	ldd	r23, Z+1	; 0x01
    135a:	82 81       	ldd	r24, Z+2	; 0x02
    135c:	93 81       	ldd	r25, Z+3	; 0x03
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	4a ef       	ldi	r20, 0xFA	; 250
    1364:	54 e4       	ldi	r21, 0x44	; 68
    1366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	f8 01       	movw	r30, r16
    1370:	80 83       	st	Z, r24
    1372:	91 83       	std	Z+1, r25	; 0x01
    1374:	a2 83       	std	Z+2, r26	; 0x02
    1376:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1378:	fe 01       	movw	r30, r28
    137a:	ff 96       	adiw	r30, 0x3f	; 63
    137c:	60 81       	ld	r22, Z
    137e:	71 81       	ldd	r23, Z+1	; 0x01
    1380:	82 81       	ldd	r24, Z+2	; 0x02
    1382:	93 81       	ldd	r25, Z+3	; 0x03
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1390:	88 23       	and	r24, r24
    1392:	2c f4       	brge	.+10     	; 0x139e <LCD_Init+0x98>
		__ticks = 1;
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	9e af       	std	Y+62, r25	; 0x3e
    139a:	8d af       	std	Y+61, r24	; 0x3d
    139c:	46 c0       	rjmp	.+140    	; 0x142a <LCD_Init+0x124>
	else if (__tmp > 65535)
    139e:	fe 01       	movw	r30, r28
    13a0:	ff 96       	adiw	r30, 0x3f	; 63
    13a2:	60 81       	ld	r22, Z
    13a4:	71 81       	ldd	r23, Z+1	; 0x01
    13a6:	82 81       	ldd	r24, Z+2	; 0x02
    13a8:	93 81       	ldd	r25, Z+3	; 0x03
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	3f ef       	ldi	r19, 0xFF	; 255
    13ae:	4f e7       	ldi	r20, 0x7F	; 127
    13b0:	57 e4       	ldi	r21, 0x47	; 71
    13b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13b6:	18 16       	cp	r1, r24
    13b8:	64 f5       	brge	.+88     	; 0x1412 <LCD_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ba:	fe 01       	movw	r30, r28
    13bc:	ed 5b       	subi	r30, 0xBD	; 189
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	60 81       	ld	r22, Z
    13c2:	71 81       	ldd	r23, Z+1	; 0x01
    13c4:	82 81       	ldd	r24, Z+2	; 0x02
    13c6:	93 81       	ldd	r25, Z+3	; 0x03
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e2       	ldi	r20, 0x20	; 32
    13ce:	51 e4       	ldi	r21, 0x41	; 65
    13d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	bc 01       	movw	r22, r24
    13da:	cd 01       	movw	r24, r26
    13dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	9e af       	std	Y+62, r25	; 0x3e
    13e6:	8d af       	std	Y+61, r24	; 0x3d
    13e8:	0f c0       	rjmp	.+30     	; 0x1408 <LCD_Init+0x102>
    13ea:	88 ec       	ldi	r24, 0xC8	; 200
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	9c af       	std	Y+60, r25	; 0x3c
    13f0:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    13f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	f1 f7       	brne	.-4      	; 0x13f6 <LCD_Init+0xf0>
    13fa:	9c af       	std	Y+60, r25	; 0x3c
    13fc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1400:	9e ad       	ldd	r25, Y+62	; 0x3e
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	9e af       	std	Y+62, r25	; 0x3e
    1406:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1408:	8d ad       	ldd	r24, Y+61	; 0x3d
    140a:	9e ad       	ldd	r25, Y+62	; 0x3e
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	69 f7       	brne	.-38     	; 0x13ea <LCD_Init+0xe4>
    1410:	16 c0       	rjmp	.+44     	; 0x143e <LCD_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1412:	fe 01       	movw	r30, r28
    1414:	ff 96       	adiw	r30, 0x3f	; 63
    1416:	60 81       	ld	r22, Z
    1418:	71 81       	ldd	r23, Z+1	; 0x01
    141a:	82 81       	ldd	r24, Z+2	; 0x02
    141c:	93 81       	ldd	r25, Z+3	; 0x03
    141e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1422:	dc 01       	movw	r26, r24
    1424:	cb 01       	movw	r24, r22
    1426:	9e af       	std	Y+62, r25	; 0x3e
    1428:	8d af       	std	Y+61, r24	; 0x3d
    142a:	8d ad       	ldd	r24, Y+61	; 0x3d
    142c:	9e ad       	ldd	r25, Y+62	; 0x3e
    142e:	9a af       	std	Y+58, r25	; 0x3a
    1430:	89 af       	std	Y+57, r24	; 0x39
    1432:	89 ad       	ldd	r24, Y+57	; 0x39
    1434:	9a ad       	ldd	r25, Y+58	; 0x3a
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <LCD_Init+0x130>
    143a:	9a af       	std	Y+58, r25	; 0x3a
    143c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(20);
#if (LCD_Mode == 8)
	GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	6f ef       	ldi	r22, 0xFF	; 255
    1442:	0e 94 12 17 	call	0x2e24	; 0x2e24 <GPIO_setupPortDirection>
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	a0 ef       	ldi	r26, 0xF0	; 240
    144c:	b1 e4       	ldi	r27, 0x41	; 65
    144e:	8d ab       	std	Y+53, r24	; 0x35
    1450:	9e ab       	std	Y+54, r25	; 0x36
    1452:	af ab       	std	Y+55, r26	; 0x37
    1454:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1456:	6d a9       	ldd	r22, Y+53	; 0x35
    1458:	7e a9       	ldd	r23, Y+54	; 0x36
    145a:	8f a9       	ldd	r24, Y+55	; 0x37
    145c:	98 ad       	ldd	r25, Y+56	; 0x38
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	4a ef       	ldi	r20, 0xFA	; 250
    1464:	54 e4       	ldi	r21, 0x44	; 68
    1466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146a:	dc 01       	movw	r26, r24
    146c:	cb 01       	movw	r24, r22
    146e:	89 ab       	std	Y+49, r24	; 0x31
    1470:	9a ab       	std	Y+50, r25	; 0x32
    1472:	ab ab       	std	Y+51, r26	; 0x33
    1474:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1476:	69 a9       	ldd	r22, Y+49	; 0x31
    1478:	7a a9       	ldd	r23, Y+50	; 0x32
    147a:	8b a9       	ldd	r24, Y+51	; 0x33
    147c:	9c a9       	ldd	r25, Y+52	; 0x34
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	40 e8       	ldi	r20, 0x80	; 128
    1484:	5f e3       	ldi	r21, 0x3F	; 63
    1486:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    148a:	88 23       	and	r24, r24
    148c:	2c f4       	brge	.+10     	; 0x1498 <LCD_Init+0x192>
		__ticks = 1;
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	98 ab       	std	Y+48, r25	; 0x30
    1494:	8f a7       	std	Y+47, r24	; 0x2f
    1496:	3f c0       	rjmp	.+126    	; 0x1516 <LCD_Init+0x210>
	else if (__tmp > 65535)
    1498:	69 a9       	ldd	r22, Y+49	; 0x31
    149a:	7a a9       	ldd	r23, Y+50	; 0x32
    149c:	8b a9       	ldd	r24, Y+51	; 0x33
    149e:	9c a9       	ldd	r25, Y+52	; 0x34
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	3f ef       	ldi	r19, 0xFF	; 255
    14a4:	4f e7       	ldi	r20, 0x7F	; 127
    14a6:	57 e4       	ldi	r21, 0x47	; 71
    14a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14ac:	18 16       	cp	r1, r24
    14ae:	4c f5       	brge	.+82     	; 0x1502 <LCD_Init+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b0:	6d a9       	ldd	r22, Y+53	; 0x35
    14b2:	7e a9       	ldd	r23, Y+54	; 0x36
    14b4:	8f a9       	ldd	r24, Y+55	; 0x37
    14b6:	98 ad       	ldd	r25, Y+56	; 0x38
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	40 e2       	ldi	r20, 0x20	; 32
    14be:	51 e4       	ldi	r21, 0x41	; 65
    14c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	bc 01       	movw	r22, r24
    14ca:	cd 01       	movw	r24, r26
    14cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d0:	dc 01       	movw	r26, r24
    14d2:	cb 01       	movw	r24, r22
    14d4:	98 ab       	std	Y+48, r25	; 0x30
    14d6:	8f a7       	std	Y+47, r24	; 0x2f
    14d8:	0f c0       	rjmp	.+30     	; 0x14f8 <LCD_Init+0x1f2>
    14da:	88 ec       	ldi	r24, 0xC8	; 200
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	9e a7       	std	Y+46, r25	; 0x2e
    14e0:	8d a7       	std	Y+45, r24	; 0x2d
    14e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    14e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	f1 f7       	brne	.-4      	; 0x14e6 <LCD_Init+0x1e0>
    14ea:	9e a7       	std	Y+46, r25	; 0x2e
    14ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    14f0:	98 a9       	ldd	r25, Y+48	; 0x30
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	98 ab       	std	Y+48, r25	; 0x30
    14f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    14fa:	98 a9       	ldd	r25, Y+48	; 0x30
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	69 f7       	brne	.-38     	; 0x14da <LCD_Init+0x1d4>
    1500:	14 c0       	rjmp	.+40     	; 0x152a <LCD_Init+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1502:	69 a9       	ldd	r22, Y+49	; 0x31
    1504:	7a a9       	ldd	r23, Y+50	; 0x32
    1506:	8b a9       	ldd	r24, Y+51	; 0x33
    1508:	9c a9       	ldd	r25, Y+52	; 0x34
    150a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    150e:	dc 01       	movw	r26, r24
    1510:	cb 01       	movw	r24, r22
    1512:	98 ab       	std	Y+48, r25	; 0x30
    1514:	8f a7       	std	Y+47, r24	; 0x2f
    1516:	8f a5       	ldd	r24, Y+47	; 0x2f
    1518:	98 a9       	ldd	r25, Y+48	; 0x30
    151a:	9c a7       	std	Y+44, r25	; 0x2c
    151c:	8b a7       	std	Y+43, r24	; 0x2b
    151e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1520:	9c a5       	ldd	r25, Y+44	; 0x2c
    1522:	01 97       	sbiw	r24, 0x01	; 1
    1524:	f1 f7       	brne	.-4      	; 0x1522 <LCD_Init+0x21c>
    1526:	9c a7       	std	Y+44, r25	; 0x2c
    1528:	8b a7       	std	Y+43, r24	; 0x2b
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_D7_PIN, PIN_OUTPUT);
#endif

	_delay_ms(30);
#if (LCD_Mode == 8)
	LCD_sendCommand(0x38);
    152a:	88 e3       	ldi	r24, 0x38	; 56
    152c:	0e 94 03 0c 	call	0x1806	; 0x1806 <LCD_sendCommand>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	a0 e8       	ldi	r26, 0x80	; 128
    1536:	bf e3       	ldi	r27, 0x3F	; 63
    1538:	8f a3       	std	Y+39, r24	; 0x27
    153a:	98 a7       	std	Y+40, r25	; 0x28
    153c:	a9 a7       	std	Y+41, r26	; 0x29
    153e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1540:	6f a1       	ldd	r22, Y+39	; 0x27
    1542:	78 a5       	ldd	r23, Y+40	; 0x28
    1544:	89 a5       	ldd	r24, Y+41	; 0x29
    1546:	9a a5       	ldd	r25, Y+42	; 0x2a
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	4a ef       	ldi	r20, 0xFA	; 250
    154e:	54 e4       	ldi	r21, 0x44	; 68
    1550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	8b a3       	std	Y+35, r24	; 0x23
    155a:	9c a3       	std	Y+36, r25	; 0x24
    155c:	ad a3       	std	Y+37, r26	; 0x25
    155e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1560:	6b a1       	ldd	r22, Y+35	; 0x23
    1562:	7c a1       	ldd	r23, Y+36	; 0x24
    1564:	8d a1       	ldd	r24, Y+37	; 0x25
    1566:	9e a1       	ldd	r25, Y+38	; 0x26
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e8       	ldi	r20, 0x80	; 128
    156e:	5f e3       	ldi	r21, 0x3F	; 63
    1570:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1574:	88 23       	and	r24, r24
    1576:	2c f4       	brge	.+10     	; 0x1582 <LCD_Init+0x27c>
		__ticks = 1;
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	9a a3       	std	Y+34, r25	; 0x22
    157e:	89 a3       	std	Y+33, r24	; 0x21
    1580:	3f c0       	rjmp	.+126    	; 0x1600 <LCD_Init+0x2fa>
	else if (__tmp > 65535)
    1582:	6b a1       	ldd	r22, Y+35	; 0x23
    1584:	7c a1       	ldd	r23, Y+36	; 0x24
    1586:	8d a1       	ldd	r24, Y+37	; 0x25
    1588:	9e a1       	ldd	r25, Y+38	; 0x26
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	3f ef       	ldi	r19, 0xFF	; 255
    158e:	4f e7       	ldi	r20, 0x7F	; 127
    1590:	57 e4       	ldi	r21, 0x47	; 71
    1592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1596:	18 16       	cp	r1, r24
    1598:	4c f5       	brge	.+82     	; 0x15ec <LCD_Init+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159a:	6f a1       	ldd	r22, Y+39	; 0x27
    159c:	78 a5       	ldd	r23, Y+40	; 0x28
    159e:	89 a5       	ldd	r24, Y+41	; 0x29
    15a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e2       	ldi	r20, 0x20	; 32
    15a8:	51 e4       	ldi	r21, 0x41	; 65
    15aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	bc 01       	movw	r22, r24
    15b4:	cd 01       	movw	r24, r26
    15b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	9a a3       	std	Y+34, r25	; 0x22
    15c0:	89 a3       	std	Y+33, r24	; 0x21
    15c2:	0f c0       	rjmp	.+30     	; 0x15e2 <LCD_Init+0x2dc>
    15c4:	88 ec       	ldi	r24, 0xC8	; 200
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	98 a3       	std	Y+32, r25	; 0x20
    15ca:	8f 8f       	std	Y+31, r24	; 0x1f
    15cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15ce:	98 a1       	ldd	r25, Y+32	; 0x20
    15d0:	01 97       	sbiw	r24, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <LCD_Init+0x2ca>
    15d4:	98 a3       	std	Y+32, r25	; 0x20
    15d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d8:	89 a1       	ldd	r24, Y+33	; 0x21
    15da:	9a a1       	ldd	r25, Y+34	; 0x22
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	9a a3       	std	Y+34, r25	; 0x22
    15e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e2:	89 a1       	ldd	r24, Y+33	; 0x21
    15e4:	9a a1       	ldd	r25, Y+34	; 0x22
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	69 f7       	brne	.-38     	; 0x15c4 <LCD_Init+0x2be>
    15ea:	14 c0       	rjmp	.+40     	; 0x1614 <LCD_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ec:	6b a1       	ldd	r22, Y+35	; 0x23
    15ee:	7c a1       	ldd	r23, Y+36	; 0x24
    15f0:	8d a1       	ldd	r24, Y+37	; 0x25
    15f2:	9e a1       	ldd	r25, Y+38	; 0x26
    15f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	9a a3       	std	Y+34, r25	; 0x22
    15fe:	89 a3       	std	Y+33, r24	; 0x21
    1600:	89 a1       	ldd	r24, Y+33	; 0x21
    1602:	9a a1       	ldd	r25, Y+34	; 0x22
    1604:	9e 8f       	std	Y+30, r25	; 0x1e
    1606:	8d 8f       	std	Y+29, r24	; 0x1d
    1608:	8d 8d       	ldd	r24, Y+29	; 0x1d
    160a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    160c:	01 97       	sbiw	r24, 0x01	; 1
    160e:	f1 f7       	brne	.-4      	; 0x160c <LCD_Init+0x306>
    1610:	9e 8f       	std	Y+30, r25	; 0x1e
    1612:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_sendCommand(0x0C);
    1614:	8c e0       	ldi	r24, 0x0C	; 12
    1616:	0e 94 03 0c 	call	0x1806	; 0x1806 <LCD_sendCommand>
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a0 e8       	ldi	r26, 0x80	; 128
    1620:	bf e3       	ldi	r27, 0x3F	; 63
    1622:	89 8f       	std	Y+25, r24	; 0x19
    1624:	9a 8f       	std	Y+26, r25	; 0x1a
    1626:	ab 8f       	std	Y+27, r26	; 0x1b
    1628:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162a:	69 8d       	ldd	r22, Y+25	; 0x19
    162c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    162e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1630:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	4a ef       	ldi	r20, 0xFA	; 250
    1638:	54 e4       	ldi	r21, 0x44	; 68
    163a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	8d 8b       	std	Y+21, r24	; 0x15
    1644:	9e 8b       	std	Y+22, r25	; 0x16
    1646:	af 8b       	std	Y+23, r26	; 0x17
    1648:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    164a:	6d 89       	ldd	r22, Y+21	; 0x15
    164c:	7e 89       	ldd	r23, Y+22	; 0x16
    164e:	8f 89       	ldd	r24, Y+23	; 0x17
    1650:	98 8d       	ldd	r25, Y+24	; 0x18
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e8       	ldi	r20, 0x80	; 128
    1658:	5f e3       	ldi	r21, 0x3F	; 63
    165a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    165e:	88 23       	and	r24, r24
    1660:	2c f4       	brge	.+10     	; 0x166c <LCD_Init+0x366>
		__ticks = 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9c 8b       	std	Y+20, r25	; 0x14
    1668:	8b 8b       	std	Y+19, r24	; 0x13
    166a:	3f c0       	rjmp	.+126    	; 0x16ea <LCD_Init+0x3e4>
	else if (__tmp > 65535)
    166c:	6d 89       	ldd	r22, Y+21	; 0x15
    166e:	7e 89       	ldd	r23, Y+22	; 0x16
    1670:	8f 89       	ldd	r24, Y+23	; 0x17
    1672:	98 8d       	ldd	r25, Y+24	; 0x18
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	3f ef       	ldi	r19, 0xFF	; 255
    1678:	4f e7       	ldi	r20, 0x7F	; 127
    167a:	57 e4       	ldi	r21, 0x47	; 71
    167c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1680:	18 16       	cp	r1, r24
    1682:	4c f5       	brge	.+82     	; 0x16d6 <LCD_Init+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1684:	69 8d       	ldd	r22, Y+25	; 0x19
    1686:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1688:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	40 e2       	ldi	r20, 0x20	; 32
    1692:	51 e4       	ldi	r21, 0x41	; 65
    1694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	9c 8b       	std	Y+20, r25	; 0x14
    16aa:	8b 8b       	std	Y+19, r24	; 0x13
    16ac:	0f c0       	rjmp	.+30     	; 0x16cc <LCD_Init+0x3c6>
    16ae:	88 ec       	ldi	r24, 0xC8	; 200
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9a 8b       	std	Y+18, r25	; 0x12
    16b4:	89 8b       	std	Y+17, r24	; 0x11
    16b6:	89 89       	ldd	r24, Y+17	; 0x11
    16b8:	9a 89       	ldd	r25, Y+18	; 0x12
    16ba:	01 97       	sbiw	r24, 0x01	; 1
    16bc:	f1 f7       	brne	.-4      	; 0x16ba <LCD_Init+0x3b4>
    16be:	9a 8b       	std	Y+18, r25	; 0x12
    16c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c2:	8b 89       	ldd	r24, Y+19	; 0x13
    16c4:	9c 89       	ldd	r25, Y+20	; 0x14
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	9c 8b       	std	Y+20, r25	; 0x14
    16ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16cc:	8b 89       	ldd	r24, Y+19	; 0x13
    16ce:	9c 89       	ldd	r25, Y+20	; 0x14
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	69 f7       	brne	.-38     	; 0x16ae <LCD_Init+0x3a8>
    16d4:	14 c0       	rjmp	.+40     	; 0x16fe <LCD_Init+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d6:	6d 89       	ldd	r22, Y+21	; 0x15
    16d8:	7e 89       	ldd	r23, Y+22	; 0x16
    16da:	8f 89       	ldd	r24, Y+23	; 0x17
    16dc:	98 8d       	ldd	r25, Y+24	; 0x18
    16de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	9c 8b       	std	Y+20, r25	; 0x14
    16e8:	8b 8b       	std	Y+19, r24	; 0x13
    16ea:	8b 89       	ldd	r24, Y+19	; 0x13
    16ec:	9c 89       	ldd	r25, Y+20	; 0x14
    16ee:	98 8b       	std	Y+16, r25	; 0x10
    16f0:	8f 87       	std	Y+15, r24	; 0x0f
    16f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f4:	98 89       	ldd	r25, Y+16	; 0x10
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <LCD_Init+0x3f0>
    16fa:	98 8b       	std	Y+16, r25	; 0x10
    16fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_sendCommand(0x01);
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	0e 94 03 0c 	call	0x1806	; 0x1806 <LCD_sendCommand>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a0 e0       	ldi	r26, 0x00	; 0
    170a:	b0 e4       	ldi	r27, 0x40	; 64
    170c:	8b 87       	std	Y+11, r24	; 0x0b
    170e:	9c 87       	std	Y+12, r25	; 0x0c
    1710:	ad 87       	std	Y+13, r26	; 0x0d
    1712:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1714:	6b 85       	ldd	r22, Y+11	; 0x0b
    1716:	7c 85       	ldd	r23, Y+12	; 0x0c
    1718:	8d 85       	ldd	r24, Y+13	; 0x0d
    171a:	9e 85       	ldd	r25, Y+14	; 0x0e
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	4a ef       	ldi	r20, 0xFA	; 250
    1722:	54 e4       	ldi	r21, 0x44	; 68
    1724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	8f 83       	std	Y+7, r24	; 0x07
    172e:	98 87       	std	Y+8, r25	; 0x08
    1730:	a9 87       	std	Y+9, r26	; 0x09
    1732:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1734:	6f 81       	ldd	r22, Y+7	; 0x07
    1736:	78 85       	ldd	r23, Y+8	; 0x08
    1738:	89 85       	ldd	r24, Y+9	; 0x09
    173a:	9a 85       	ldd	r25, Y+10	; 0x0a
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	5f e3       	ldi	r21, 0x3F	; 63
    1744:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1748:	88 23       	and	r24, r24
    174a:	2c f4       	brge	.+10     	; 0x1756 <LCD_Init+0x450>
		__ticks = 1;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	9e 83       	std	Y+6, r25	; 0x06
    1752:	8d 83       	std	Y+5, r24	; 0x05
    1754:	3f c0       	rjmp	.+126    	; 0x17d4 <LCD_Init+0x4ce>
	else if (__tmp > 65535)
    1756:	6f 81       	ldd	r22, Y+7	; 0x07
    1758:	78 85       	ldd	r23, Y+8	; 0x08
    175a:	89 85       	ldd	r24, Y+9	; 0x09
    175c:	9a 85       	ldd	r25, Y+10	; 0x0a
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	3f ef       	ldi	r19, 0xFF	; 255
    1762:	4f e7       	ldi	r20, 0x7F	; 127
    1764:	57 e4       	ldi	r21, 0x47	; 71
    1766:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    176a:	18 16       	cp	r1, r24
    176c:	4c f5       	brge	.+82     	; 0x17c0 <LCD_Init+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    176e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1770:	7c 85       	ldd	r23, Y+12	; 0x0c
    1772:	8d 85       	ldd	r24, Y+13	; 0x0d
    1774:	9e 85       	ldd	r25, Y+14	; 0x0e
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e2       	ldi	r20, 0x20	; 32
    177c:	51 e4       	ldi	r21, 0x41	; 65
    177e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	bc 01       	movw	r22, r24
    1788:	cd 01       	movw	r24, r26
    178a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	9e 83       	std	Y+6, r25	; 0x06
    1794:	8d 83       	std	Y+5, r24	; 0x05
    1796:	0f c0       	rjmp	.+30     	; 0x17b6 <LCD_Init+0x4b0>
    1798:	88 ec       	ldi	r24, 0xC8	; 200
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	8b 83       	std	Y+3, r24	; 0x03
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <LCD_Init+0x49e>
    17a8:	9c 83       	std	Y+4, r25	; 0x04
    17aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	9e 83       	std	Y+6, r25	; 0x06
    17b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17b6:	8d 81       	ldd	r24, Y+5	; 0x05
    17b8:	9e 81       	ldd	r25, Y+6	; 0x06
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	69 f7       	brne	.-38     	; 0x1798 <LCD_Init+0x492>
    17be:	14 c0       	rjmp	.+40     	; 0x17e8 <LCD_Init+0x4e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c0:	6f 81       	ldd	r22, Y+7	; 0x07
    17c2:	78 85       	ldd	r23, Y+8	; 0x08
    17c4:	89 85       	ldd	r24, Y+9	; 0x09
    17c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	9e 83       	std	Y+6, r25	; 0x06
    17d2:	8d 83       	std	Y+5, r24	; 0x05
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	9a 83       	std	Y+2, r25	; 0x02
    17da:	89 83       	std	Y+1, r24	; 0x01
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
    17de:	9a 81       	ldd	r25, Y+2	; 0x02
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <LCD_Init+0x4da>
    17e4:	9a 83       	std	Y+2, r25	; 0x02
    17e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_sendCommand(0x06);
    17e8:	86 e0       	ldi	r24, 0x06	; 6
    17ea:	0e 94 03 0c 	call	0x1806	; 0x1806 <LCD_sendCommand>
	_delay_ms(1);
	LCD_sendCommand(0x01);
	_delay_ms(2);
	LCD_sendCommand(0x06);
#endif
}
    17ee:	ca 5b       	subi	r28, 0xBA	; 186
    17f0:	df 4f       	sbci	r29, 0xFF	; 255
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	08 95       	ret

00001806 <LCD_sendCommand>:
 * Clear RS pin
 * Set enable pin
 * send command
 * clear enable pin
 */
void LCD_sendCommand(uint8 Instruction) {
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	e9 97       	sbiw	r28, 0x39	; 57
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_CTRL_PORT, LCD_RS, LOGIC_LOW);
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <GPIO_writePin>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	a0 e8       	ldi	r26, 0x80	; 128
    182c:	bf e3       	ldi	r27, 0x3F	; 63
    182e:	8d ab       	std	Y+53, r24	; 0x35
    1830:	9e ab       	std	Y+54, r25	; 0x36
    1832:	af ab       	std	Y+55, r26	; 0x37
    1834:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1836:	6d a9       	ldd	r22, Y+53	; 0x35
    1838:	7e a9       	ldd	r23, Y+54	; 0x36
    183a:	8f a9       	ldd	r24, Y+55	; 0x37
    183c:	98 ad       	ldd	r25, Y+56	; 0x38
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	4a ef       	ldi	r20, 0xFA	; 250
    1844:	54 e4       	ldi	r21, 0x44	; 68
    1846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	89 ab       	std	Y+49, r24	; 0x31
    1850:	9a ab       	std	Y+50, r25	; 0x32
    1852:	ab ab       	std	Y+51, r26	; 0x33
    1854:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1856:	69 a9       	ldd	r22, Y+49	; 0x31
    1858:	7a a9       	ldd	r23, Y+50	; 0x32
    185a:	8b a9       	ldd	r24, Y+51	; 0x33
    185c:	9c a9       	ldd	r25, Y+52	; 0x34
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	40 e8       	ldi	r20, 0x80	; 128
    1864:	5f e3       	ldi	r21, 0x3F	; 63
    1866:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    186a:	88 23       	and	r24, r24
    186c:	2c f4       	brge	.+10     	; 0x1878 <LCD_sendCommand+0x72>
		__ticks = 1;
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	98 ab       	std	Y+48, r25	; 0x30
    1874:	8f a7       	std	Y+47, r24	; 0x2f
    1876:	3f c0       	rjmp	.+126    	; 0x18f6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1878:	69 a9       	ldd	r22, Y+49	; 0x31
    187a:	7a a9       	ldd	r23, Y+50	; 0x32
    187c:	8b a9       	ldd	r24, Y+51	; 0x33
    187e:	9c a9       	ldd	r25, Y+52	; 0x34
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	3f ef       	ldi	r19, 0xFF	; 255
    1884:	4f e7       	ldi	r20, 0x7F	; 127
    1886:	57 e4       	ldi	r21, 0x47	; 71
    1888:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    188c:	18 16       	cp	r1, r24
    188e:	4c f5       	brge	.+82     	; 0x18e2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1890:	6d a9       	ldd	r22, Y+53	; 0x35
    1892:	7e a9       	ldd	r23, Y+54	; 0x36
    1894:	8f a9       	ldd	r24, Y+55	; 0x37
    1896:	98 ad       	ldd	r25, Y+56	; 0x38
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e2       	ldi	r20, 0x20	; 32
    189e:	51 e4       	ldi	r21, 0x41	; 65
    18a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	98 ab       	std	Y+48, r25	; 0x30
    18b6:	8f a7       	std	Y+47, r24	; 0x2f
    18b8:	0f c0       	rjmp	.+30     	; 0x18d8 <LCD_sendCommand+0xd2>
    18ba:	88 ec       	ldi	r24, 0xC8	; 200
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	9e a7       	std	Y+46, r25	; 0x2e
    18c0:	8d a7       	std	Y+45, r24	; 0x2d
    18c2:	8d a5       	ldd	r24, Y+45	; 0x2d
    18c4:	9e a5       	ldd	r25, Y+46	; 0x2e
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <LCD_sendCommand+0xc0>
    18ca:	9e a7       	std	Y+46, r25	; 0x2e
    18cc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d0:	98 a9       	ldd	r25, Y+48	; 0x30
    18d2:	01 97       	sbiw	r24, 0x01	; 1
    18d4:	98 ab       	std	Y+48, r25	; 0x30
    18d6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    18da:	98 a9       	ldd	r25, Y+48	; 0x30
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	69 f7       	brne	.-38     	; 0x18ba <LCD_sendCommand+0xb4>
    18e0:	14 c0       	rjmp	.+40     	; 0x190a <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18e2:	69 a9       	ldd	r22, Y+49	; 0x31
    18e4:	7a a9       	ldd	r23, Y+50	; 0x32
    18e6:	8b a9       	ldd	r24, Y+51	; 0x33
    18e8:	9c a9       	ldd	r25, Y+52	; 0x34
    18ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	98 ab       	std	Y+48, r25	; 0x30
    18f4:	8f a7       	std	Y+47, r24	; 0x2f
    18f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18f8:	98 a9       	ldd	r25, Y+48	; 0x30
    18fa:	9c a7       	std	Y+44, r25	; 0x2c
    18fc:	8b a7       	std	Y+43, r24	; 0x2b
    18fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1900:	9c a5       	ldd	r25, Y+44	; 0x2c
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <LCD_sendCommand+0xfc>
    1906:	9c a7       	std	Y+44, r25	; 0x2c
    1908:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

#if(LCD_Mode == 8)
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_HIGH);
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	61 e0       	ldi	r22, 0x01	; 1
    190e:	41 e0       	ldi	r20, 0x01	; 1
    1910:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <GPIO_writePin>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	a0 e8       	ldi	r26, 0x80	; 128
    191a:	bf e3       	ldi	r27, 0x3F	; 63
    191c:	8f a3       	std	Y+39, r24	; 0x27
    191e:	98 a7       	std	Y+40, r25	; 0x28
    1920:	a9 a7       	std	Y+41, r26	; 0x29
    1922:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1924:	6f a1       	ldd	r22, Y+39	; 0x27
    1926:	78 a5       	ldd	r23, Y+40	; 0x28
    1928:	89 a5       	ldd	r24, Y+41	; 0x29
    192a:	9a a5       	ldd	r25, Y+42	; 0x2a
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	4a ef       	ldi	r20, 0xFA	; 250
    1932:	54 e4       	ldi	r21, 0x44	; 68
    1934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	8b a3       	std	Y+35, r24	; 0x23
    193e:	9c a3       	std	Y+36, r25	; 0x24
    1940:	ad a3       	std	Y+37, r26	; 0x25
    1942:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1944:	6b a1       	ldd	r22, Y+35	; 0x23
    1946:	7c a1       	ldd	r23, Y+36	; 0x24
    1948:	8d a1       	ldd	r24, Y+37	; 0x25
    194a:	9e a1       	ldd	r25, Y+38	; 0x26
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	5f e3       	ldi	r21, 0x3F	; 63
    1954:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1958:	88 23       	and	r24, r24
    195a:	2c f4       	brge	.+10     	; 0x1966 <LCD_sendCommand+0x160>
		__ticks = 1;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9a a3       	std	Y+34, r25	; 0x22
    1962:	89 a3       	std	Y+33, r24	; 0x21
    1964:	3f c0       	rjmp	.+126    	; 0x19e4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1966:	6b a1       	ldd	r22, Y+35	; 0x23
    1968:	7c a1       	ldd	r23, Y+36	; 0x24
    196a:	8d a1       	ldd	r24, Y+37	; 0x25
    196c:	9e a1       	ldd	r25, Y+38	; 0x26
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	3f ef       	ldi	r19, 0xFF	; 255
    1972:	4f e7       	ldi	r20, 0x7F	; 127
    1974:	57 e4       	ldi	r21, 0x47	; 71
    1976:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    197a:	18 16       	cp	r1, r24
    197c:	4c f5       	brge	.+82     	; 0x19d0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197e:	6f a1       	ldd	r22, Y+39	; 0x27
    1980:	78 a5       	ldd	r23, Y+40	; 0x28
    1982:	89 a5       	ldd	r24, Y+41	; 0x29
    1984:	9a a5       	ldd	r25, Y+42	; 0x2a
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e2       	ldi	r20, 0x20	; 32
    198c:	51 e4       	ldi	r21, 0x41	; 65
    198e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	9a a3       	std	Y+34, r25	; 0x22
    19a4:	89 a3       	std	Y+33, r24	; 0x21
    19a6:	0f c0       	rjmp	.+30     	; 0x19c6 <LCD_sendCommand+0x1c0>
    19a8:	88 ec       	ldi	r24, 0xC8	; 200
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	98 a3       	std	Y+32, r25	; 0x20
    19ae:	8f 8f       	std	Y+31, r24	; 0x1f
    19b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19b2:	98 a1       	ldd	r25, Y+32	; 0x20
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <LCD_sendCommand+0x1ae>
    19b8:	98 a3       	std	Y+32, r25	; 0x20
    19ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19bc:	89 a1       	ldd	r24, Y+33	; 0x21
    19be:	9a a1       	ldd	r25, Y+34	; 0x22
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	9a a3       	std	Y+34, r25	; 0x22
    19c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c6:	89 a1       	ldd	r24, Y+33	; 0x21
    19c8:	9a a1       	ldd	r25, Y+34	; 0x22
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	69 f7       	brne	.-38     	; 0x19a8 <LCD_sendCommand+0x1a2>
    19ce:	14 c0       	rjmp	.+40     	; 0x19f8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d0:	6b a1       	ldd	r22, Y+35	; 0x23
    19d2:	7c a1       	ldd	r23, Y+36	; 0x24
    19d4:	8d a1       	ldd	r24, Y+37	; 0x25
    19d6:	9e a1       	ldd	r25, Y+38	; 0x26
    19d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9a a3       	std	Y+34, r25	; 0x22
    19e2:	89 a3       	std	Y+33, r24	; 0x21
    19e4:	89 a1       	ldd	r24, Y+33	; 0x21
    19e6:	9a a1       	ldd	r25, Y+34	; 0x22
    19e8:	9e 8f       	std	Y+30, r25	; 0x1e
    19ea:	8d 8f       	std	Y+29, r24	; 0x1d
    19ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <LCD_sendCommand+0x1ea>
    19f4:	9e 8f       	std	Y+30, r25	; 0x1e
    19f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePort(LCD_DATA_PORT, Instruction);
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	69 ad       	ldd	r22, Y+57	; 0x39
    19fc:	0e 94 56 17 	call	0x2eac	; 0x2eac <GPIO_writePort>
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	a0 e8       	ldi	r26, 0x80	; 128
    1a06:	bf e3       	ldi	r27, 0x3F	; 63
    1a08:	89 8f       	std	Y+25, r24	; 0x19
    1a0a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a0c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a10:	69 8d       	ldd	r22, Y+25	; 0x19
    1a12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	4a ef       	ldi	r20, 0xFA	; 250
    1a1e:	54 e4       	ldi	r21, 0x44	; 68
    1a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	8d 8b       	std	Y+21, r24	; 0x15
    1a2a:	9e 8b       	std	Y+22, r25	; 0x16
    1a2c:	af 8b       	std	Y+23, r26	; 0x17
    1a2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a30:	6d 89       	ldd	r22, Y+21	; 0x15
    1a32:	7e 89       	ldd	r23, Y+22	; 0x16
    1a34:	8f 89       	ldd	r24, Y+23	; 0x17
    1a36:	98 8d       	ldd	r25, Y+24	; 0x18
    1a38:	20 e0       	ldi	r18, 0x00	; 0
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	40 e8       	ldi	r20, 0x80	; 128
    1a3e:	5f e3       	ldi	r21, 0x3F	; 63
    1a40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a44:	88 23       	and	r24, r24
    1a46:	2c f4       	brge	.+10     	; 0x1a52 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9c 8b       	std	Y+20, r25	; 0x14
    1a4e:	8b 8b       	std	Y+19, r24	; 0x13
    1a50:	3f c0       	rjmp	.+126    	; 0x1ad0 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1a52:	6d 89       	ldd	r22, Y+21	; 0x15
    1a54:	7e 89       	ldd	r23, Y+22	; 0x16
    1a56:	8f 89       	ldd	r24, Y+23	; 0x17
    1a58:	98 8d       	ldd	r25, Y+24	; 0x18
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	3f ef       	ldi	r19, 0xFF	; 255
    1a5e:	4f e7       	ldi	r20, 0x7F	; 127
    1a60:	57 e4       	ldi	r21, 0x47	; 71
    1a62:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a66:	18 16       	cp	r1, r24
    1a68:	4c f5       	brge	.+82     	; 0x1abc <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e2       	ldi	r20, 0x20	; 32
    1a78:	51 e4       	ldi	r21, 0x41	; 65
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	bc 01       	movw	r22, r24
    1a84:	cd 01       	movw	r24, r26
    1a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	9c 8b       	std	Y+20, r25	; 0x14
    1a90:	8b 8b       	std	Y+19, r24	; 0x13
    1a92:	0f c0       	rjmp	.+30     	; 0x1ab2 <LCD_sendCommand+0x2ac>
    1a94:	88 ec       	ldi	r24, 0xC8	; 200
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	9a 8b       	std	Y+18, r25	; 0x12
    1a9a:	89 8b       	std	Y+17, r24	; 0x11
    1a9c:	89 89       	ldd	r24, Y+17	; 0x11
    1a9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	f1 f7       	brne	.-4      	; 0x1aa0 <LCD_sendCommand+0x29a>
    1aa4:	9a 8b       	std	Y+18, r25	; 0x12
    1aa6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	9c 8b       	std	Y+20, r25	; 0x14
    1ab0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	69 f7       	brne	.-38     	; 0x1a94 <LCD_sendCommand+0x28e>
    1aba:	14 c0       	rjmp	.+40     	; 0x1ae4 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1abc:	6d 89       	ldd	r22, Y+21	; 0x15
    1abe:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	9c 8b       	std	Y+20, r25	; 0x14
    1ace:	8b 8b       	std	Y+19, r24	; 0x13
    1ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad4:	98 8b       	std	Y+16, r25	; 0x10
    1ad6:	8f 87       	std	Y+15, r24	; 0x0f
    1ad8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ada:	98 89       	ldd	r25, Y+16	; 0x10
    1adc:	01 97       	sbiw	r24, 0x01	; 1
    1ade:	f1 f7       	brne	.-4      	; 0x1adc <LCD_sendCommand+0x2d6>
    1ae0:	98 8b       	std	Y+16, r25	; 0x10
    1ae2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW);
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	61 e0       	ldi	r22, 0x01	; 1
    1ae8:	40 e0       	ldi	r20, 0x00	; 0
    1aea:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <GPIO_writePin>
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 e8       	ldi	r26, 0x80	; 128
    1af4:	bf e3       	ldi	r27, 0x3F	; 63
    1af6:	8b 87       	std	Y+11, r24	; 0x0b
    1af8:	9c 87       	std	Y+12, r25	; 0x0c
    1afa:	ad 87       	std	Y+13, r26	; 0x0d
    1afc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4a ef       	ldi	r20, 0xFA	; 250
    1b0c:	54 e4       	ldi	r21, 0x44	; 68
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	8f 83       	std	Y+7, r24	; 0x07
    1b18:	98 87       	std	Y+8, r25	; 0x08
    1b1a:	a9 87       	std	Y+9, r26	; 0x09
    1b1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b20:	78 85       	ldd	r23, Y+8	; 0x08
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e8       	ldi	r20, 0x80	; 128
    1b2c:	5f e3       	ldi	r21, 0x3F	; 63
    1b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b32:	88 23       	and	r24, r24
    1b34:	2c f4       	brge	.+10     	; 0x1b40 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	3f c0       	rjmp	.+126    	; 0x1bbe <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1b40:	6f 81       	ldd	r22, Y+7	; 0x07
    1b42:	78 85       	ldd	r23, Y+8	; 0x08
    1b44:	89 85       	ldd	r24, Y+9	; 0x09
    1b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	3f ef       	ldi	r19, 0xFF	; 255
    1b4c:	4f e7       	ldi	r20, 0x7F	; 127
    1b4e:	57 e4       	ldi	r21, 0x47	; 71
    1b50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b54:	18 16       	cp	r1, r24
    1b56:	4c f5       	brge	.+82     	; 0x1baa <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e2       	ldi	r20, 0x20	; 32
    1b66:	51 e4       	ldi	r21, 0x41	; 65
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	bc 01       	movw	r22, r24
    1b72:	cd 01       	movw	r24, r26
    1b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9e 83       	std	Y+6, r25	; 0x06
    1b7e:	8d 83       	std	Y+5, r24	; 0x05
    1b80:	0f c0       	rjmp	.+30     	; 0x1ba0 <LCD_sendCommand+0x39a>
    1b82:	88 ec       	ldi	r24, 0xC8	; 200
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9c 83       	std	Y+4, r25	; 0x04
    1b88:	8b 83       	std	Y+3, r24	; 0x03
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	f1 f7       	brne	.-4      	; 0x1b8e <LCD_sendCommand+0x388>
    1b92:	9c 83       	std	Y+4, r25	; 0x04
    1b94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	8d 81       	ldd	r24, Y+5	; 0x05
    1b98:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	9e 83       	std	Y+6, r25	; 0x06
    1b9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	69 f7       	brne	.-38     	; 0x1b82 <LCD_sendCommand+0x37c>
    1ba8:	14 c0       	rjmp	.+40     	; 0x1bd2 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc2:	9a 83       	std	Y+2, r25	; 0x02
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	01 97       	sbiw	r24, 0x01	; 1
    1bcc:	f1 f7       	brne	.-4      	; 0x1bca <LCD_sendCommand+0x3c4>
    1bce:	9a 83       	std	Y+2, r25	; 0x02
    1bd0:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(Instruction, 3));

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW); /* Disable LCD E=0 */
#endif
}
    1bd2:	e9 96       	adiw	r28, 0x39	; 57
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	de bf       	out	0x3e, r29	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	cd bf       	out	0x3d, r28	; 61
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <LCD_displayCharacter>:
 * 1. Set RS pin
 * 2. Set enable pin
 * 3. send data
 * 4. clear enable pin
 */
void LCD_displayCharacter(uint8 data) {
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	e9 97       	sbiw	r28, 0x39	; 57
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61
    1bf8:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_CTRL_PORT, LCD_RS, LOGIC_HIGH);
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	60 e0       	ldi	r22, 0x00	; 0
    1bfe:	41 e0       	ldi	r20, 0x01	; 1
    1c00:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <GPIO_writePin>
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	a0 e8       	ldi	r26, 0x80	; 128
    1c0a:	bf e3       	ldi	r27, 0x3F	; 63
    1c0c:	8d ab       	std	Y+53, r24	; 0x35
    1c0e:	9e ab       	std	Y+54, r25	; 0x36
    1c10:	af ab       	std	Y+55, r26	; 0x37
    1c12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c14:	6d a9       	ldd	r22, Y+53	; 0x35
    1c16:	7e a9       	ldd	r23, Y+54	; 0x36
    1c18:	8f a9       	ldd	r24, Y+55	; 0x37
    1c1a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	4a ef       	ldi	r20, 0xFA	; 250
    1c22:	54 e4       	ldi	r21, 0x44	; 68
    1c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	89 ab       	std	Y+49, r24	; 0x31
    1c2e:	9a ab       	std	Y+50, r25	; 0x32
    1c30:	ab ab       	std	Y+51, r26	; 0x33
    1c32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c34:	69 a9       	ldd	r22, Y+49	; 0x31
    1c36:	7a a9       	ldd	r23, Y+50	; 0x32
    1c38:	8b a9       	ldd	r24, Y+51	; 0x33
    1c3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e8       	ldi	r20, 0x80	; 128
    1c42:	5f e3       	ldi	r21, 0x3F	; 63
    1c44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c48:	88 23       	and	r24, r24
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	98 ab       	std	Y+48, r25	; 0x30
    1c52:	8f a7       	std	Y+47, r24	; 0x2f
    1c54:	3f c0       	rjmp	.+126    	; 0x1cd4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1c56:	69 a9       	ldd	r22, Y+49	; 0x31
    1c58:	7a a9       	ldd	r23, Y+50	; 0x32
    1c5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	3f ef       	ldi	r19, 0xFF	; 255
    1c62:	4f e7       	ldi	r20, 0x7F	; 127
    1c64:	57 e4       	ldi	r21, 0x47	; 71
    1c66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c6a:	18 16       	cp	r1, r24
    1c6c:	4c f5       	brge	.+82     	; 0x1cc0 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c70:	7e a9       	ldd	r23, Y+54	; 0x36
    1c72:	8f a9       	ldd	r24, Y+55	; 0x37
    1c74:	98 ad       	ldd	r25, Y+56	; 0x38
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e2       	ldi	r20, 0x20	; 32
    1c7c:	51 e4       	ldi	r21, 0x41	; 65
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	bc 01       	movw	r22, r24
    1c88:	cd 01       	movw	r24, r26
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	98 ab       	std	Y+48, r25	; 0x30
    1c94:	8f a7       	std	Y+47, r24	; 0x2f
    1c96:	0f c0       	rjmp	.+30     	; 0x1cb6 <LCD_displayCharacter+0xd2>
    1c98:	88 ec       	ldi	r24, 0xC8	; 200
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9e a7       	std	Y+46, r25	; 0x2e
    1c9e:	8d a7       	std	Y+45, r24	; 0x2d
    1ca0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ca2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_displayCharacter+0xc0>
    1ca8:	9e a7       	std	Y+46, r25	; 0x2e
    1caa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cae:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	98 ab       	std	Y+48, r25	; 0x30
    1cb4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	69 f7       	brne	.-38     	; 0x1c98 <LCD_displayCharacter+0xb4>
    1cbe:	14 c0       	rjmp	.+40     	; 0x1ce8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc0:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc2:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc4:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc6:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	98 ab       	std	Y+48, r25	; 0x30
    1cd2:	8f a7       	std	Y+47, r24	; 0x2f
    1cd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd8:	9c a7       	std	Y+44, r25	; 0x2c
    1cda:	8b a7       	std	Y+43, r24	; 0x2b
    1cdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cde:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <LCD_displayCharacter+0xfc>
    1ce4:	9c a7       	std	Y+44, r25	; 0x2c
    1ce6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

#if(LCD_Mode == 8)
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_HIGH);
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	61 e0       	ldi	r22, 0x01	; 1
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <GPIO_writePin>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	a0 e8       	ldi	r26, 0x80	; 128
    1cf8:	bf e3       	ldi	r27, 0x3F	; 63
    1cfa:	8f a3       	std	Y+39, r24	; 0x27
    1cfc:	98 a7       	std	Y+40, r25	; 0x28
    1cfe:	a9 a7       	std	Y+41, r26	; 0x29
    1d00:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	6f a1       	ldd	r22, Y+39	; 0x27
    1d04:	78 a5       	ldd	r23, Y+40	; 0x28
    1d06:	89 a5       	ldd	r24, Y+41	; 0x29
    1d08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a ef       	ldi	r20, 0xFA	; 250
    1d10:	54 e4       	ldi	r21, 0x44	; 68
    1d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8b a3       	std	Y+35, r24	; 0x23
    1d1c:	9c a3       	std	Y+36, r25	; 0x24
    1d1e:	ad a3       	std	Y+37, r26	; 0x25
    1d20:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d22:	6b a1       	ldd	r22, Y+35	; 0x23
    1d24:	7c a1       	ldd	r23, Y+36	; 0x24
    1d26:	8d a1       	ldd	r24, Y+37	; 0x25
    1d28:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9a a3       	std	Y+34, r25	; 0x22
    1d40:	89 a3       	std	Y+33, r24	; 0x21
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1d44:	6b a1       	ldd	r22, Y+35	; 0x23
    1d46:	7c a1       	ldd	r23, Y+36	; 0x24
    1d48:	8d a1       	ldd	r24, Y+37	; 0x25
    1d4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d5e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d60:	89 a5       	ldd	r24, Y+41	; 0x29
    1d62:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9a a3       	std	Y+34, r25	; 0x22
    1d82:	89 a3       	std	Y+33, r24	; 0x21
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <LCD_displayCharacter+0x1c0>
    1d86:	88 ec       	ldi	r24, 0xC8	; 200
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	98 a3       	std	Y+32, r25	; 0x20
    1d8c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d8e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d90:	98 a1       	ldd	r25, Y+32	; 0x20
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_displayCharacter+0x1ae>
    1d96:	98 a3       	std	Y+32, r25	; 0x20
    1d98:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9a a3       	std	Y+34, r25	; 0x22
    1da2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	89 a1       	ldd	r24, Y+33	; 0x21
    1da6:	9a a1       	ldd	r25, Y+34	; 0x22
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <LCD_displayCharacter+0x1a2>
    1dac:	14 c0       	rjmp	.+40     	; 0x1dd6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6b a1       	ldd	r22, Y+35	; 0x23
    1db0:	7c a1       	ldd	r23, Y+36	; 0x24
    1db2:	8d a1       	ldd	r24, Y+37	; 0x25
    1db4:	9e a1       	ldd	r25, Y+38	; 0x26
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9a a3       	std	Y+34, r25	; 0x22
    1dc0:	89 a3       	std	Y+33, r24	; 0x21
    1dc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc6:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc8:	8d 8f       	std	Y+29, r24	; 0x1d
    1dca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dcc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_displayCharacter+0x1ea>
    1dd2:	9e 8f       	std	Y+30, r25	; 0x1e
    1dd4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePort(LCD_DATA_PORT, data);
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	69 ad       	ldd	r22, Y+57	; 0x39
    1dda:	0e 94 56 17 	call	0x2eac	; 0x2eac <GPIO_writePort>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	a0 e8       	ldi	r26, 0x80	; 128
    1de4:	bf e3       	ldi	r27, 0x3F	; 63
    1de6:	89 8f       	std	Y+25, r24	; 0x19
    1de8:	9a 8f       	std	Y+26, r25	; 0x1a
    1dea:	ab 8f       	std	Y+27, r26	; 0x1b
    1dec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dee:	69 8d       	ldd	r22, Y+25	; 0x19
    1df0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	4a ef       	ldi	r20, 0xFA	; 250
    1dfc:	54 e4       	ldi	r21, 0x44	; 68
    1dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	8d 8b       	std	Y+21, r24	; 0x15
    1e08:	9e 8b       	std	Y+22, r25	; 0x16
    1e0a:	af 8b       	std	Y+23, r26	; 0x17
    1e0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e0e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e10:	7e 89       	ldd	r23, Y+22	; 0x16
    1e12:	8f 89       	ldd	r24, Y+23	; 0x17
    1e14:	98 8d       	ldd	r25, Y+24	; 0x18
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e8       	ldi	r20, 0x80	; 128
    1e1c:	5f e3       	ldi	r21, 0x3F	; 63
    1e1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e22:	88 23       	and	r24, r24
    1e24:	2c f4       	brge	.+10     	; 0x1e30 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9c 8b       	std	Y+20, r25	; 0x14
    1e2c:	8b 8b       	std	Y+19, r24	; 0x13
    1e2e:	3f c0       	rjmp	.+126    	; 0x1eae <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1e30:	6d 89       	ldd	r22, Y+21	; 0x15
    1e32:	7e 89       	ldd	r23, Y+22	; 0x16
    1e34:	8f 89       	ldd	r24, Y+23	; 0x17
    1e36:	98 8d       	ldd	r25, Y+24	; 0x18
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	3f ef       	ldi	r19, 0xFF	; 255
    1e3c:	4f e7       	ldi	r20, 0x7F	; 127
    1e3e:	57 e4       	ldi	r21, 0x47	; 71
    1e40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e44:	18 16       	cp	r1, r24
    1e46:	4c f5       	brge	.+82     	; 0x1e9a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e48:	69 8d       	ldd	r22, Y+25	; 0x19
    1e4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e2       	ldi	r20, 0x20	; 32
    1e56:	51 e4       	ldi	r21, 0x41	; 65
    1e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	bc 01       	movw	r22, r24
    1e62:	cd 01       	movw	r24, r26
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	9c 8b       	std	Y+20, r25	; 0x14
    1e6e:	8b 8b       	std	Y+19, r24	; 0x13
    1e70:	0f c0       	rjmp	.+30     	; 0x1e90 <LCD_displayCharacter+0x2ac>
    1e72:	88 ec       	ldi	r24, 0xC8	; 200
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	9a 8b       	std	Y+18, r25	; 0x12
    1e78:	89 8b       	std	Y+17, r24	; 0x11
    1e7a:	89 89       	ldd	r24, Y+17	; 0x11
    1e7c:	9a 89       	ldd	r25, Y+18	; 0x12
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <LCD_displayCharacter+0x29a>
    1e82:	9a 8b       	std	Y+18, r25	; 0x12
    1e84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e86:	8b 89       	ldd	r24, Y+19	; 0x13
    1e88:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	9c 8b       	std	Y+20, r25	; 0x14
    1e8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e90:	8b 89       	ldd	r24, Y+19	; 0x13
    1e92:	9c 89       	ldd	r25, Y+20	; 0x14
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	69 f7       	brne	.-38     	; 0x1e72 <LCD_displayCharacter+0x28e>
    1e98:	14 c0       	rjmp	.+40     	; 0x1ec2 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	9c 8b       	std	Y+20, r25	; 0x14
    1eac:	8b 8b       	std	Y+19, r24	; 0x13
    1eae:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb2:	98 8b       	std	Y+16, r25	; 0x10
    1eb4:	8f 87       	std	Y+15, r24	; 0x0f
    1eb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb8:	98 89       	ldd	r25, Y+16	; 0x10
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <LCD_displayCharacter+0x2d6>
    1ebe:	98 8b       	std	Y+16, r25	; 0x10
    1ec0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW);
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	61 e0       	ldi	r22, 0x01	; 1
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <GPIO_writePin>
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a0 e8       	ldi	r26, 0x80	; 128
    1ed2:	bf e3       	ldi	r27, 0x3F	; 63
    1ed4:	8b 87       	std	Y+11, r24	; 0x0b
    1ed6:	9c 87       	std	Y+12, r25	; 0x0c
    1ed8:	ad 87       	std	Y+13, r26	; 0x0d
    1eda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a ef       	ldi	r20, 0xFA	; 250
    1eea:	54 e4       	ldi	r21, 0x44	; 68
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	8f 83       	std	Y+7, r24	; 0x07
    1ef6:	98 87       	std	Y+8, r25	; 0x08
    1ef8:	a9 87       	std	Y+9, r26	; 0x09
    1efa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1efc:	6f 81       	ldd	r22, Y+7	; 0x07
    1efe:	78 85       	ldd	r23, Y+8	; 0x08
    1f00:	89 85       	ldd	r24, Y+9	; 0x09
    1f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e8       	ldi	r20, 0x80	; 128
    1f0a:	5f e3       	ldi	r21, 0x3F	; 63
    1f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f10:	88 23       	and	r24, r24
    1f12:	2c f4       	brge	.+10     	; 0x1f1e <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	3f c0       	rjmp	.+126    	; 0x1f9c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f20:	78 85       	ldd	r23, Y+8	; 0x08
    1f22:	89 85       	ldd	r24, Y+9	; 0x09
    1f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	3f ef       	ldi	r19, 0xFF	; 255
    1f2a:	4f e7       	ldi	r20, 0x7F	; 127
    1f2c:	57 e4       	ldi	r21, 0x47	; 71
    1f2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f32:	18 16       	cp	r1, r24
    1f34:	4c f5       	brge	.+82     	; 0x1f88 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	40 e2       	ldi	r20, 0x20	; 32
    1f44:	51 e4       	ldi	r21, 0x41	; 65
    1f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <LCD_displayCharacter+0x39a>
    1f60:	88 ec       	ldi	r24, 0xC8	; 200
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9c 83       	std	Y+4, r25	; 0x04
    1f66:	8b 83       	std	Y+3, r24	; 0x03
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <LCD_displayCharacter+0x388>
    1f70:	9c 83       	std	Y+4, r25	; 0x04
    1f72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	01 97       	sbiw	r24, 0x01	; 1
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	9e 81       	ldd	r25, Y+6	; 0x06
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	69 f7       	brne	.-38     	; 0x1f60 <LCD_displayCharacter+0x37c>
    1f86:	14 c0       	rjmp	.+40     	; 0x1fb0 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f88:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8a:	78 85       	ldd	r23, Y+8	; 0x08
    1f8c:	89 85       	ldd	r24, Y+9	; 0x09
    1f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	89 83       	std	Y+1, r24	; 0x01
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD_displayCharacter+0x3c4>
    1fac:	9a 83       	std	Y+2, r25	; 0x02
    1fae:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(data, 3));

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_CTRL_PORT, LCD_E, LOGIC_LOW); /* Disable LCD E=0 */
#endif
}
    1fb0:	e9 96       	adiw	r28, 0x39	; 57
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <LCD_displayString>:
 * Description:
 * Printing string on the LCD
 * Loop on the string
 * print each character with diplayCharacter function
 */
void LCD_displayString(uint8 *data) {
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <LCD_displayString+0x6>
    1fc8:	0f 92       	push	r0
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	9b 83       	std	Y+3, r25	; 0x03
    1fd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for (i = 0; *(data + i) != '\0'; i++) {
    1fd2:	19 82       	std	Y+1, r1	; 0x01
    1fd4:	0e c0       	rjmp	.+28     	; 0x1ff2 <LCD_displayString+0x30>
		LCD_displayCharacter(*(data + i));
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	e2 0f       	add	r30, r18
    1fe4:	f3 1f       	adc	r31, r19
    1fe6:	80 81       	ld	r24, Z
    1fe8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayCharacter>
 * Loop on the string
 * print each character with diplayCharacter function
 */
void LCD_displayString(uint8 *data) {
	uint8 i;
	for (i = 0; *(data + i) != '\0'; i++) {
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	8f 5f       	subi	r24, 0xFF	; 255
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	e2 0f       	add	r30, r18
    2000:	f3 1f       	adc	r31, r19
    2002:	80 81       	ld	r24, Z
    2004:	88 23       	and	r24, r24
    2006:	39 f7       	brne	.-50     	; 0x1fd6 <LCD_displayString+0x14>
		LCD_displayCharacter(*(data + i));
	}
}
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	0f 90       	pop	r0
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	08 95       	ret

00002014 <LCD_ClearDisplay>:

/*
 * Description:
 * Clearing LCD
 */
void LCD_ClearDisplay() {
    2014:	df 93       	push	r29
    2016:	cf 93       	push	r28
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(0x01);
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	0e 94 03 0c 	call	0x1806	; 0x1806 <LCD_sendCommand>
}
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <LCD_SetCursor>:
/*
 * Description:
 * Set the cursor to start in a certain position
 */
void LCD_SetCursor(uint8 row, uint8 col) {
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <LCD_SetCursor+0x6>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <LCD_SetCursor+0x8>
    2030:	0f 92       	push	r0
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	8a 83       	std	Y+2, r24	; 0x02
    2038:	6b 83       	std	Y+3, r22	; 0x03

	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch (row) {
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	3d 83       	std	Y+5, r19	; 0x05
    2042:	2c 83       	std	Y+4, r18	; 0x04
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	9d 81       	ldd	r25, Y+5	; 0x05
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	91 05       	cpc	r25, r1
    204c:	c1 f0       	breq	.+48     	; 0x207e <LCD_SetCursor+0x56>
    204e:	2c 81       	ldd	r18, Y+4	; 0x04
    2050:	3d 81       	ldd	r19, Y+5	; 0x05
    2052:	22 30       	cpi	r18, 0x02	; 2
    2054:	31 05       	cpc	r19, r1
    2056:	2c f4       	brge	.+10     	; 0x2062 <LCD_SetCursor+0x3a>
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	9d 81       	ldd	r25, Y+5	; 0x05
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	61 f0       	breq	.+24     	; 0x2078 <LCD_SetCursor+0x50>
    2060:	19 c0       	rjmp	.+50     	; 0x2094 <LCD_SetCursor+0x6c>
    2062:	2c 81       	ldd	r18, Y+4	; 0x04
    2064:	3d 81       	ldd	r19, Y+5	; 0x05
    2066:	22 30       	cpi	r18, 0x02	; 2
    2068:	31 05       	cpc	r19, r1
    206a:	69 f0       	breq	.+26     	; 0x2086 <LCD_SetCursor+0x5e>
    206c:	8c 81       	ldd	r24, Y+4	; 0x04
    206e:	9d 81       	ldd	r25, Y+5	; 0x05
    2070:	83 30       	cpi	r24, 0x03	; 3
    2072:	91 05       	cpc	r25, r1
    2074:	61 f0       	breq	.+24     	; 0x208e <LCD_SetCursor+0x66>
    2076:	0e c0       	rjmp	.+28     	; 0x2094 <LCD_SetCursor+0x6c>
	case 0:
		lcd_memory_address = col;
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	0b c0       	rjmp	.+22     	; 0x2094 <LCD_SetCursor+0x6c>
		break;
	case 1:
		lcd_memory_address = col + 0x40;
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	80 5c       	subi	r24, 0xC0	; 192
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	07 c0       	rjmp	.+14     	; 0x2094 <LCD_SetCursor+0x6c>
		break;
	case 2:
		lcd_memory_address = col + 0x10;
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	80 5f       	subi	r24, 0xF0	; 240
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <LCD_SetCursor+0x6c>
		break;
	case 3:
		lcd_memory_address = col + 0x50;
    208e:	8b 81       	ldd	r24, Y+3	; 0x03
    2090:	80 5b       	subi	r24, 0xB0	; 176
    2092:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | 0x80);
    2094:	89 81       	ldd	r24, Y+1	; 0x01
    2096:	80 68       	ori	r24, 0x80	; 128
    2098:	0e 94 03 0c 	call	0x1806	; 0x1806 <LCD_sendCommand>
}
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <LCD_PrintSigned32BitNum>:
/*
 * Description:
 * print 4 bytes signed numbers
 */
void LCD_PrintSigned32BitNum(sint32 num) {
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	2a 97       	sbiw	r28, 0x0a	; 10
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	6f 83       	std	Y+7, r22	; 0x07
    20c2:	78 87       	std	Y+8, r23	; 0x08
    20c4:	89 87       	std	Y+9, r24	; 0x09
    20c6:	9a 87       	std	Y+10, r25	; 0x0a
	/*check if the number is negative and prints - and make it positive*/
	if (num < 0) {
    20c8:	8f 81       	ldd	r24, Y+7	; 0x07
    20ca:	98 85       	ldd	r25, Y+8	; 0x08
    20cc:	a9 85       	ldd	r26, Y+9	; 0x09
    20ce:	ba 85       	ldd	r27, Y+10	; 0x0a
    20d0:	bb 23       	and	r27, r27
    20d2:	94 f4       	brge	.+36     	; 0x20f8 <LCD_PrintSigned32BitNum+0x4c>
		LCD_displayCharacter('-');
    20d4:	8d e2       	ldi	r24, 0x2D	; 45
    20d6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayCharacter>
		num = -num;
    20da:	8f 81       	ldd	r24, Y+7	; 0x07
    20dc:	98 85       	ldd	r25, Y+8	; 0x08
    20de:	a9 85       	ldd	r26, Y+9	; 0x09
    20e0:	ba 85       	ldd	r27, Y+10	; 0x0a
    20e2:	b0 95       	com	r27
    20e4:	a0 95       	com	r26
    20e6:	90 95       	com	r25
    20e8:	81 95       	neg	r24
    20ea:	9f 4f       	sbci	r25, 0xFF	; 255
    20ec:	af 4f       	sbci	r26, 0xFF	; 255
    20ee:	bf 4f       	sbci	r27, 0xFF	; 255
    20f0:	8f 83       	std	Y+7, r24	; 0x07
    20f2:	98 87       	std	Y+8, r25	; 0x08
    20f4:	a9 87       	std	Y+9, r26	; 0x09
    20f6:	ba 87       	std	Y+10, r27	; 0x0a
	}
	/*
	 * check if the number is float "has digits after the decimal point and prints the digits before the point and
	 * the digits after the point
	 */
	if ((num * 100) % 100 != 0) {
    20f8:	8f 81       	ldd	r24, Y+7	; 0x07
    20fa:	98 85       	ldd	r25, Y+8	; 0x08
    20fc:	a9 85       	ldd	r26, Y+9	; 0x09
    20fe:	ba 85       	ldd	r27, Y+10	; 0x0a
    2100:	24 e6       	ldi	r18, 0x64	; 100
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__mulsi3>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	24 e6       	ldi	r18, 0x64	; 100
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e0       	ldi	r20, 0x00	; 0
    211a:	50 e0       	ldi	r21, 0x00	; 0
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 af 1b 	call	0x375e	; 0x375e <__divmodsi4>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	a1 05       	cpc	r26, r1
    212c:	b1 05       	cpc	r27, r1
    212e:	41 f1       	breq	.+80     	; 0x2180 <LCD_PrintSigned32BitNum+0xd4>
		LCD_PrintSigned32BitNum((sint32) num);
    2130:	8f 81       	ldd	r24, Y+7	; 0x07
    2132:	98 85       	ldd	r25, Y+8	; 0x08
    2134:	a9 85       	ldd	r26, Y+9	; 0x09
    2136:	ba 85       	ldd	r27, Y+10	; 0x0a
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_PrintSigned32BitNum>
		LCD_displayCharacter('.');
    2140:	8e e2       	ldi	r24, 0x2E	; 46
    2142:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayCharacter>
		LCD_PrintSigned32BitNum((num * 100) % 100);
    2146:	8f 81       	ldd	r24, Y+7	; 0x07
    2148:	98 85       	ldd	r25, Y+8	; 0x08
    214a:	a9 85       	ldd	r26, Y+9	; 0x09
    214c:	ba 85       	ldd	r27, Y+10	; 0x0a
    214e:	24 e6       	ldi	r18, 0x64	; 100
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e0       	ldi	r20, 0x00	; 0
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <__mulsi3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	24 e6       	ldi	r18, 0x64	; 100
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	50 e0       	ldi	r21, 0x00	; 0
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	0e 94 af 1b 	call	0x375e	; 0x375e <__divmodsi4>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_PrintSigned32BitNum>
    217e:	89 c0       	rjmp	.+274    	; 0x2292 <LCD_PrintSigned32BitNum+0x1e6>
	} else {
		sint32 num1 = num;
    2180:	8f 81       	ldd	r24, Y+7	; 0x07
    2182:	98 85       	ldd	r25, Y+8	; 0x08
    2184:	a9 85       	ldd	r26, Y+9	; 0x09
    2186:	ba 85       	ldd	r27, Y+10	; 0x0a
    2188:	8b 83       	std	Y+3, r24	; 0x03
    218a:	9c 83       	std	Y+4, r25	; 0x04
    218c:	ad 83       	std	Y+5, r26	; 0x05
    218e:	be 83       	std	Y+6, r27	; 0x06
		uint16 L_u8Counter = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01

		if (num < 10)
    2198:	8f 81       	ldd	r24, Y+7	; 0x07
    219a:	98 85       	ldd	r25, Y+8	; 0x08
    219c:	a9 85       	ldd	r26, Y+9	; 0x09
    219e:	ba 85       	ldd	r27, Y+10	; 0x0a
    21a0:	8a 30       	cpi	r24, 0x0A	; 10
    21a2:	91 05       	cpc	r25, r1
    21a4:	a1 05       	cpc	r26, r1
    21a6:	b1 05       	cpc	r27, r1
    21a8:	2c f5       	brge	.+74     	; 0x21f4 <LCD_PrintSigned32BitNum+0x148>
			LCD_displayCharacter(num + '0');
    21aa:	8f 81       	ldd	r24, Y+7	; 0x07
    21ac:	80 5d       	subi	r24, 0xD0	; 208
    21ae:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayCharacter>
    21b2:	6f c0       	rjmp	.+222    	; 0x2292 <LCD_PrintSigned32BitNum+0x1e6>
		else {
			/*find the value of the number "hundreds,thousands ... " */
			while (num >= 10) {
				num /= 10;
    21b4:	8f 81       	ldd	r24, Y+7	; 0x07
    21b6:	98 85       	ldd	r25, Y+8	; 0x08
    21b8:	a9 85       	ldd	r26, Y+9	; 0x09
    21ba:	ba 85       	ldd	r27, Y+10	; 0x0a
    21bc:	2a e0       	ldi	r18, 0x0A	; 10
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	bc 01       	movw	r22, r24
    21c6:	cd 01       	movw	r24, r26
    21c8:	0e 94 af 1b 	call	0x375e	; 0x375e <__divmodsi4>
    21cc:	da 01       	movw	r26, r20
    21ce:	c9 01       	movw	r24, r18
    21d0:	8f 83       	std	Y+7, r24	; 0x07
    21d2:	98 87       	std	Y+8, r25	; 0x08
    21d4:	a9 87       	std	Y+9, r26	; 0x09
    21d6:	ba 87       	std	Y+10, r27	; 0x0a
				L_u8Counter *= 10;
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	9a 81       	ldd	r25, Y+2	; 0x02
    21dc:	9c 01       	movw	r18, r24
    21de:	22 0f       	add	r18, r18
    21e0:	33 1f       	adc	r19, r19
    21e2:	c9 01       	movw	r24, r18
    21e4:	88 0f       	add	r24, r24
    21e6:	99 1f       	adc	r25, r25
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	82 0f       	add	r24, r18
    21ee:	93 1f       	adc	r25, r19
    21f0:	9a 83       	std	Y+2, r25	; 0x02
    21f2:	89 83       	std	Y+1, r24	; 0x01

		if (num < 10)
			LCD_displayCharacter(num + '0');
		else {
			/*find the value of the number "hundreds,thousands ... " */
			while (num >= 10) {
    21f4:	8f 81       	ldd	r24, Y+7	; 0x07
    21f6:	98 85       	ldd	r25, Y+8	; 0x08
    21f8:	a9 85       	ldd	r26, Y+9	; 0x09
    21fa:	ba 85       	ldd	r27, Y+10	; 0x0a
    21fc:	8a 30       	cpi	r24, 0x0A	; 10
    21fe:	91 05       	cpc	r25, r1
    2200:	a1 05       	cpc	r26, r1
    2202:	b1 05       	cpc	r27, r1
    2204:	bc f6       	brge	.-82     	; 0x21b4 <LCD_PrintSigned32BitNum+0x108>
    2206:	40 c0       	rjmp	.+128    	; 0x2288 <LCD_PrintSigned32BitNum+0x1dc>
				num /= 10;
				L_u8Counter *= 10;
			}
			while (L_u8Counter >= 1) {
				num = num1;
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	ad 81       	ldd	r26, Y+5	; 0x05
    220e:	be 81       	ldd	r27, Y+6	; 0x06
    2210:	8f 83       	std	Y+7, r24	; 0x07
    2212:	98 87       	std	Y+8, r25	; 0x08
    2214:	a9 87       	std	Y+9, r26	; 0x09
    2216:	ba 87       	std	Y+10, r27	; 0x0a
				num1 = num % L_u8Counter;
    2218:	89 81       	ldd	r24, Y+1	; 0x01
    221a:	9a 81       	ldd	r25, Y+2	; 0x02
    221c:	9c 01       	movw	r18, r24
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	50 e0       	ldi	r21, 0x00	; 0
    2222:	8f 81       	ldd	r24, Y+7	; 0x07
    2224:	98 85       	ldd	r25, Y+8	; 0x08
    2226:	a9 85       	ldd	r26, Y+9	; 0x09
    2228:	ba 85       	ldd	r27, Y+10	; 0x0a
    222a:	bc 01       	movw	r22, r24
    222c:	cd 01       	movw	r24, r26
    222e:	0e 94 af 1b 	call	0x375e	; 0x375e <__divmodsi4>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8b 83       	std	Y+3, r24	; 0x03
    2238:	9c 83       	std	Y+4, r25	; 0x04
    223a:	ad 83       	std	Y+5, r26	; 0x05
    223c:	be 83       	std	Y+6, r27	; 0x06
				num /= L_u8Counter;
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	9c 01       	movw	r18, r24
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	8f 81       	ldd	r24, Y+7	; 0x07
    224a:	98 85       	ldd	r25, Y+8	; 0x08
    224c:	a9 85       	ldd	r26, Y+9	; 0x09
    224e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2250:	bc 01       	movw	r22, r24
    2252:	cd 01       	movw	r24, r26
    2254:	0e 94 af 1b 	call	0x375e	; 0x375e <__divmodsi4>
    2258:	da 01       	movw	r26, r20
    225a:	c9 01       	movw	r24, r18
    225c:	8f 83       	std	Y+7, r24	; 0x07
    225e:	98 87       	std	Y+8, r25	; 0x08
    2260:	a9 87       	std	Y+9, r26	; 0x09
    2262:	ba 87       	std	Y+10, r27	; 0x0a
				L_u8Counter /= 10;
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	2a e0       	ldi	r18, 0x0A	; 10
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	b9 01       	movw	r22, r18
    226e:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodhi4>
    2272:	cb 01       	movw	r24, r22
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
				LCD_PrintSigned32BitNum(num);
    2278:	8f 81       	ldd	r24, Y+7	; 0x07
    227a:	98 85       	ldd	r25, Y+8	; 0x08
    227c:	a9 85       	ldd	r26, Y+9	; 0x09
    227e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_PrintSigned32BitNum>
			/*find the value of the number "hundreds,thousands ... " */
			while (num >= 10) {
				num /= 10;
				L_u8Counter *= 10;
			}
			while (L_u8Counter >= 1) {
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	09 f0       	breq	.+2      	; 0x2292 <LCD_PrintSigned32BitNum+0x1e6>
    2290:	bb cf       	rjmp	.-138    	; 0x2208 <LCD_PrintSigned32BitNum+0x15c>
				LCD_PrintSigned32BitNum(num);
			}

		}
	}
}
    2292:	2a 96       	adiw	r28, 0x0a	; 10
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <LCD_PrintNum16Bit>:
/*
 * Description:
 * print 2 bytes unsigned numbers
 */
void LCD_PrintNum16Bit(uint16 num) {
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <LCD_PrintNum16Bit+0x6>
    22aa:	00 d0       	rcall	.+0      	; 0x22ac <LCD_PrintNum16Bit+0x8>
    22ac:	00 d0       	rcall	.+0      	; 0x22ae <LCD_PrintNum16Bit+0xa>
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	9e 83       	std	Y+6, r25	; 0x06
    22b4:	8d 83       	std	Y+5, r24	; 0x05

	uint16 num1 = num;
    22b6:	8d 81       	ldd	r24, Y+5	; 0x05
    22b8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ba:	9c 83       	std	Y+4, r25	; 0x04
    22bc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 L_u8Counter = 1;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	9a 83       	std	Y+2, r25	; 0x02
    22c4:	89 83       	std	Y+1, r24	; 0x01
	if (num < 10)
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ca:	8a 30       	cpi	r24, 0x0A	; 10
    22cc:	91 05       	cpc	r25, r1
    22ce:	e8 f4       	brcc	.+58     	; 0x230a <LCD_PrintNum16Bit+0x66>
		LCD_displayCharacter(num + '0');
    22d0:	8d 81       	ldd	r24, Y+5	; 0x05
    22d2:	80 5d       	subi	r24, 0xD0	; 208
    22d4:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayCharacter>
    22d8:	4c c0       	rjmp	.+152    	; 0x2372 <LCD_PrintNum16Bit+0xce>
	else {
		/*find the value of the number "hundreds,thousands ... " */
		while (num >= 10) {
			num /= 10;
    22da:	8d 81       	ldd	r24, Y+5	; 0x05
    22dc:	9e 81       	ldd	r25, Y+6	; 0x06
    22de:	2a e0       	ldi	r18, 0x0A	; 10
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	b9 01       	movw	r22, r18
    22e4:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodhi4>
    22e8:	cb 01       	movw	r24, r22
    22ea:	9e 83       	std	Y+6, r25	; 0x06
    22ec:	8d 83       	std	Y+5, r24	; 0x05
			L_u8Counter *= 10;
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	9a 81       	ldd	r25, Y+2	; 0x02
    22f2:	9c 01       	movw	r18, r24
    22f4:	22 0f       	add	r18, r18
    22f6:	33 1f       	adc	r19, r19
    22f8:	c9 01       	movw	r24, r18
    22fa:	88 0f       	add	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	88 0f       	add	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	82 0f       	add	r24, r18
    2304:	93 1f       	adc	r25, r19
    2306:	9a 83       	std	Y+2, r25	; 0x02
    2308:	89 83       	std	Y+1, r24	; 0x01
	uint16 L_u8Counter = 1;
	if (num < 10)
		LCD_displayCharacter(num + '0');
	else {
		/*find the value of the number "hundreds,thousands ... " */
		while (num >= 10) {
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	9e 81       	ldd	r25, Y+6	; 0x06
    230e:	8a 30       	cpi	r24, 0x0A	; 10
    2310:	91 05       	cpc	r25, r1
    2312:	18 f7       	brcc	.-58     	; 0x22da <LCD_PrintNum16Bit+0x36>
    2314:	2a c0       	rjmp	.+84     	; 0x236a <LCD_PrintNum16Bit+0xc6>
			num /= 10;
			L_u8Counter *= 10;
		}
		while (L_u8Counter >= 1) {
			num = num1;
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	9e 83       	std	Y+6, r25	; 0x06
    231c:	8d 83       	std	Y+5, r24	; 0x05
			num1 = num % L_u8Counter;
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	9e 81       	ldd	r25, Y+6	; 0x06
    2322:	29 81       	ldd	r18, Y+1	; 0x01
    2324:	3a 81       	ldd	r19, Y+2	; 0x02
    2326:	b9 01       	movw	r22, r18
    2328:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodhi4>
    232c:	9c 83       	std	Y+4, r25	; 0x04
    232e:	8b 83       	std	Y+3, r24	; 0x03
			num /= L_u8Counter;
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	9e 81       	ldd	r25, Y+6	; 0x06
    2334:	29 81       	ldd	r18, Y+1	; 0x01
    2336:	3a 81       	ldd	r19, Y+2	; 0x02
    2338:	b9 01       	movw	r22, r18
    233a:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodhi4>
    233e:	cb 01       	movw	r24, r22
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
			L_u8Counter /= 10;
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	9a 81       	ldd	r25, Y+2	; 0x02
    2348:	2a e0       	ldi	r18, 0x0A	; 10
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	b9 01       	movw	r22, r18
    234e:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodhi4>
    2352:	cb 01       	movw	r24, r22
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
			LCD_PrintSigned32BitNum(num);
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	cc 01       	movw	r24, r24
    235e:	a0 e0       	ldi	r26, 0x00	; 0
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_PrintSigned32BitNum>
		/*find the value of the number "hundreds,thousands ... " */
		while (num >= 10) {
			num /= 10;
			L_u8Counter *= 10;
		}
		while (L_u8Counter >= 1) {
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	91 f6       	brne	.-92     	; 0x2316 <LCD_PrintNum16Bit+0x72>
			LCD_PrintSigned32BitNum(num);
		}

	}

}
    2372:	26 96       	adiw	r28, 0x06	; 6
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <LCD_PrintNumFloat>:
/*
 * Description:
 * print 4 bytes float numbers
 */
void LCD_PrintNumFloat(float32 num) {
    2384:	ef 92       	push	r14
    2386:	ff 92       	push	r15
    2388:	0f 93       	push	r16
    238a:	1f 93       	push	r17
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	cd b7       	in	r28, 0x3d	; 61
    2392:	de b7       	in	r29, 0x3e	; 62
    2394:	2a 97       	sbiw	r28, 0x0a	; 10
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	de bf       	out	0x3e, r29	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	cd bf       	out	0x3d, r28	; 61
    23a0:	6f 83       	std	Y+7, r22	; 0x07
    23a2:	78 87       	std	Y+8, r23	; 0x08
    23a4:	89 87       	std	Y+9, r24	; 0x09
    23a6:	9a 87       	std	Y+10, r25	; 0x0a
	/*check if the number is negative and prints - and make it positive*/

	if (num < 0) {
    23a8:	6f 81       	ldd	r22, Y+7	; 0x07
    23aa:	78 85       	ldd	r23, Y+8	; 0x08
    23ac:	89 85       	ldd	r24, Y+9	; 0x09
    23ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	50 e0       	ldi	r21, 0x00	; 0
    23b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23bc:	88 23       	and	r24, r24
    23be:	64 f4       	brge	.+24     	; 0x23d8 <LCD_PrintNumFloat+0x54>
		LCD_displayCharacter('-');
    23c0:	8d e2       	ldi	r24, 0x2D	; 45
    23c2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayCharacter>
		num = -num;
    23c6:	8f 81       	ldd	r24, Y+7	; 0x07
    23c8:	98 85       	ldd	r25, Y+8	; 0x08
    23ca:	a9 85       	ldd	r26, Y+9	; 0x09
    23cc:	ba 85       	ldd	r27, Y+10	; 0x0a
    23ce:	b0 58       	subi	r27, 0x80	; 128
    23d0:	8f 83       	std	Y+7, r24	; 0x07
    23d2:	98 87       	std	Y+8, r25	; 0x08
    23d4:	a9 87       	std	Y+9, r26	; 0x09
    23d6:	ba 87       	std	Y+10, r27	; 0x0a
	}
	/*
	 * check if the number is float "has digits after the decimal point and prints the digits before the point and
	 * the digits after the point
	 */
	if ((sint32) (num * 100) % 100 != 0) {
    23d8:	6f 81       	ldd	r22, Y+7	; 0x07
    23da:	78 85       	ldd	r23, Y+8	; 0x08
    23dc:	89 85       	ldd	r24, Y+9	; 0x09
    23de:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	48 ec       	ldi	r20, 0xC8	; 200
    23e6:	52 e4       	ldi	r21, 0x42	; 66
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	24 e6       	ldi	r18, 0x64	; 100
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 af 1b 	call	0x375e	; 0x375e <__divmodsi4>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	00 97       	sbiw	r24, 0x00	; 0
    2412:	a1 05       	cpc	r26, r1
    2414:	b1 05       	cpc	r27, r1
    2416:	e1 f1       	breq	.+120    	; 0x2490 <LCD_PrintNumFloat+0x10c>
		LCD_PrintNumFloat((sint32) num);
    2418:	6f 81       	ldd	r22, Y+7	; 0x07
    241a:	78 85       	ldd	r23, Y+8	; 0x08
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_PrintNumFloat>
		LCD_displayCharacter('.');
    243c:	8e e2       	ldi	r24, 0x2E	; 46
    243e:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayCharacter>
		LCD_PrintNumFloat((sint32) (num * 100) % 100);
    2442:	6f 81       	ldd	r22, Y+7	; 0x07
    2444:	78 85       	ldd	r23, Y+8	; 0x08
    2446:	89 85       	ldd	r24, Y+9	; 0x09
    2448:	9a 85       	ldd	r25, Y+10	; 0x0a
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	48 ec       	ldi	r20, 0xC8	; 200
    2450:	52 e4       	ldi	r21, 0x42	; 66
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	24 e6       	ldi	r18, 0x64	; 100
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	50 e0       	ldi	r21, 0x00	; 0
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	0e 94 af 1b 	call	0x375e	; 0x375e <__divmodsi4>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	bc 01       	movw	r22, r24
    247c:	cd 01       	movw	r24, r26
    247e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	bc 01       	movw	r22, r24
    2488:	cd 01       	movw	r24, r26
    248a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_PrintNumFloat>
    248e:	af c0       	rjmp	.+350    	; 0x25ee <LCD_PrintNumFloat+0x26a>
	} else {
		float32 num1 = num;
    2490:	8f 81       	ldd	r24, Y+7	; 0x07
    2492:	98 85       	ldd	r25, Y+8	; 0x08
    2494:	a9 85       	ldd	r26, Y+9	; 0x09
    2496:	ba 85       	ldd	r27, Y+10	; 0x0a
    2498:	8b 83       	std	Y+3, r24	; 0x03
    249a:	9c 83       	std	Y+4, r25	; 0x04
    249c:	ad 83       	std	Y+5, r26	; 0x05
    249e:	be 83       	std	Y+6, r27	; 0x06
		uint16 L_u8Counter = 1;
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	90 e0       	ldi	r25, 0x00	; 0
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01
		if (num < 10)
    24a8:	6f 81       	ldd	r22, Y+7	; 0x07
    24aa:	78 85       	ldd	r23, Y+8	; 0x08
    24ac:	89 85       	ldd	r24, Y+9	; 0x09
    24ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e2       	ldi	r20, 0x20	; 32
    24b6:	51 e4       	ldi	r21, 0x41	; 65
    24b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	9c f5       	brge	.+102    	; 0x2526 <LCD_PrintNumFloat+0x1a2>
			LCD_displayCharacter(num + '0');
    24c0:	6f 81       	ldd	r22, Y+7	; 0x07
    24c2:	78 85       	ldd	r23, Y+8	; 0x08
    24c4:	89 85       	ldd	r24, Y+9	; 0x09
    24c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e4       	ldi	r20, 0x40	; 64
    24ce:	52 e4       	ldi	r21, 0x42	; 66
    24d0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	bc 01       	movw	r22, r24
    24da:	cd 01       	movw	r24, r26
    24dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayCharacter>
    24e8:	82 c0       	rjmp	.+260    	; 0x25ee <LCD_PrintNumFloat+0x26a>
		else {
			/*find the value of the number "hundreds,thousands ... " */
			while (num >= 10) {
				num /= 10;
    24ea:	6f 81       	ldd	r22, Y+7	; 0x07
    24ec:	78 85       	ldd	r23, Y+8	; 0x08
    24ee:	89 85       	ldd	r24, Y+9	; 0x09
    24f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8f 83       	std	Y+7, r24	; 0x07
    2504:	98 87       	std	Y+8, r25	; 0x08
    2506:	a9 87       	std	Y+9, r26	; 0x09
    2508:	ba 87       	std	Y+10, r27	; 0x0a
				L_u8Counter *= 10;
    250a:	89 81       	ldd	r24, Y+1	; 0x01
    250c:	9a 81       	ldd	r25, Y+2	; 0x02
    250e:	9c 01       	movw	r18, r24
    2510:	22 0f       	add	r18, r18
    2512:	33 1f       	adc	r19, r19
    2514:	c9 01       	movw	r24, r18
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	82 0f       	add	r24, r18
    2520:	93 1f       	adc	r25, r19
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
		uint16 L_u8Counter = 1;
		if (num < 10)
			LCD_displayCharacter(num + '0');
		else {
			/*find the value of the number "hundreds,thousands ... " */
			while (num >= 10) {
    2526:	6f 81       	ldd	r22, Y+7	; 0x07
    2528:	78 85       	ldd	r23, Y+8	; 0x08
    252a:	89 85       	ldd	r24, Y+9	; 0x09
    252c:	9a 85       	ldd	r25, Y+10	; 0x0a
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e2       	ldi	r20, 0x20	; 32
    2534:	51 e4       	ldi	r21, 0x41	; 65
    2536:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    253a:	88 23       	and	r24, r24
    253c:	b4 f6       	brge	.-84     	; 0x24ea <LCD_PrintNumFloat+0x166>
    253e:	52 c0       	rjmp	.+164    	; 0x25e4 <LCD_PrintNumFloat+0x260>
				num /= 10;
				L_u8Counter *= 10;
			}
			while (L_u8Counter >= 1) {
				num = num1;
    2540:	8b 81       	ldd	r24, Y+3	; 0x03
    2542:	9c 81       	ldd	r25, Y+4	; 0x04
    2544:	ad 81       	ldd	r26, Y+5	; 0x05
    2546:	be 81       	ldd	r27, Y+6	; 0x06
    2548:	8f 83       	std	Y+7, r24	; 0x07
    254a:	98 87       	std	Y+8, r25	; 0x08
    254c:	a9 87       	std	Y+9, r26	; 0x09
    254e:	ba 87       	std	Y+10, r27	; 0x0a
				num1 = (sint32) num % L_u8Counter;
    2550:	6f 81       	ldd	r22, Y+7	; 0x07
    2552:	78 85       	ldd	r23, Y+8	; 0x08
    2554:	89 85       	ldd	r24, Y+9	; 0x09
    2556:	9a 85       	ldd	r25, Y+10	; 0x0a
    2558:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    255c:	7b 01       	movw	r14, r22
    255e:	8c 01       	movw	r16, r24
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	9a 81       	ldd	r25, Y+2	; 0x02
    2564:	9c 01       	movw	r18, r24
    2566:	40 e0       	ldi	r20, 0x00	; 0
    2568:	50 e0       	ldi	r21, 0x00	; 0
    256a:	c8 01       	movw	r24, r16
    256c:	b7 01       	movw	r22, r14
    256e:	0e 94 af 1b 	call	0x375e	; 0x375e <__divmodsi4>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	bc 01       	movw	r22, r24
    2578:	cd 01       	movw	r24, r26
    257a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	8b 83       	std	Y+3, r24	; 0x03
    2584:	9c 83       	std	Y+4, r25	; 0x04
    2586:	ad 83       	std	Y+5, r26	; 0x05
    2588:	be 83       	std	Y+6, r27	; 0x06
				num /= L_u8Counter;
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	9a 81       	ldd	r25, Y+2	; 0x02
    258e:	cc 01       	movw	r24, r24
    2590:	a0 e0       	ldi	r26, 0x00	; 0
    2592:	b0 e0       	ldi	r27, 0x00	; 0
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    259c:	9b 01       	movw	r18, r22
    259e:	ac 01       	movw	r20, r24
    25a0:	6f 81       	ldd	r22, Y+7	; 0x07
    25a2:	78 85       	ldd	r23, Y+8	; 0x08
    25a4:	89 85       	ldd	r24, Y+9	; 0x09
    25a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8f 83       	std	Y+7, r24	; 0x07
    25b2:	98 87       	std	Y+8, r25	; 0x08
    25b4:	a9 87       	std	Y+9, r26	; 0x09
    25b6:	ba 87       	std	Y+10, r27	; 0x0a
				L_u8Counter /= 10;
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	2a e0       	ldi	r18, 0x0A	; 10
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	b9 01       	movw	r22, r18
    25c2:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodhi4>
    25c6:	cb 01       	movw	r24, r22
    25c8:	9a 83       	std	Y+2, r25	; 0x02
    25ca:	89 83       	std	Y+1, r24	; 0x01
				LCD_PrintSigned32BitNum(num);
    25cc:	6f 81       	ldd	r22, Y+7	; 0x07
    25ce:	78 85       	ldd	r23, Y+8	; 0x08
    25d0:	89 85       	ldd	r24, Y+9	; 0x09
    25d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	bc 01       	movw	r22, r24
    25de:	cd 01       	movw	r24, r26
    25e0:	0e 94 56 10 	call	0x20ac	; 0x20ac <LCD_PrintSigned32BitNum>
			/*find the value of the number "hundreds,thousands ... " */
			while (num >= 10) {
				num /= 10;
				L_u8Counter *= 10;
			}
			while (L_u8Counter >= 1) {
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	09 f0       	breq	.+2      	; 0x25ee <LCD_PrintNumFloat+0x26a>
    25ec:	a9 cf       	rjmp	.-174    	; 0x2540 <LCD_PrintNumFloat+0x1bc>
				LCD_PrintSigned32BitNum(num);
			}

		}
	}
}
    25ee:	2a 96       	adiw	r28, 0x0a	; 10
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	08 95       	ret

00002608 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void) {
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
    2610:	60 97       	sbiw	r28, 0x10	; 16
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	f8 94       	cli
    2616:	de bf       	out	0x3e, r29	; 62
    2618:	0f be       	out	0x3f, r0	; 63
    261a:	cd bf       	out	0x3d, r28	; 61
	uint8 col, row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	64 e0       	ldi	r22, 0x04	; 4
    2620:	40 e0       	ldi	r20, 0x00	; 0
    2622:	0e 94 a1 14 	call	0x2942	; 0x2942 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 1,
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	65 e0       	ldi	r22, 0x05	; 5
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	0e 94 a1 14 	call	0x2942	; 0x2942 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 2,
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	66 e0       	ldi	r22, 0x06	; 6
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	0e 94 a1 14 	call	0x2942	; 0x2942 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + 3,
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	67 e0       	ldi	r22, 0x07	; 7
    263e:	40 e0       	ldi	r20, 0x00	; 0
    2640:	0e 94 a1 14 	call	0x2942	; 0x2942 <GPIO_setupPinDirection>
			PIN_INPUT);

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,
    2644:	83 e0       	ldi	r24, 0x03	; 3
    2646:	62 e0       	ldi	r22, 0x02	; 2
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 a1 14 	call	0x2942	; 0x2942 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 1,
    264e:	83 e0       	ldi	r24, 0x03	; 3
    2650:	63 e0       	ldi	r22, 0x03	; 3
    2652:	40 e0       	ldi	r20, 0x00	; 0
    2654:	0e 94 a1 14 	call	0x2942	; 0x2942 <GPIO_setupPinDirection>
			PIN_INPUT);
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 2,
    2658:	83 e0       	ldi	r24, 0x03	; 3
    265a:	64 e0       	ldi	r22, 0x04	; 4
    265c:	40 e0       	ldi	r20, 0x00	; 0
    265e:	0e 94 a1 14 	call	0x2942	; 0x2942 <GPIO_setupPinDirection>
			PIN_INPUT);
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
    2662:	83 e0       	ldi	r24, 0x03	; 3
    2664:	65 e0       	ldi	r22, 0x05	; 5
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	0e 94 a1 14 	call	0x2942	; 0x2942 <GPIO_setupPinDirection>
			PIN_INPUT);
#endif
	while (1) {
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) {
    266c:	1f 86       	std	Y+15, r1	; 0x0f
    266e:	bd c0       	rjmp	.+378    	; 0x27ea <KEYPAD_getPressedKey+0x1e2>

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    2670:	8f 85       	ldd	r24, Y+15	; 0x0f
    2672:	98 2f       	mov	r25, r24
    2674:	9c 5f       	subi	r25, 0xFC	; 252
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	69 2f       	mov	r22, r25
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	0e 94 a1 14 	call	0x2942	; 0x2942 <GPIO_setupPinDirection>
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
    2680:	8f 85       	ldd	r24, Y+15	; 0x0f
    2682:	98 2f       	mov	r25, r24
    2684:	9c 5f       	subi	r25, 0xFC	; 252
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	69 2f       	mov	r22, r25
    268a:	40 e0       	ldi	r20, 0x00	; 0
    268c:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <GPIO_writePin>
			KEYPAD_BUTTON_PRESSED);
			for (col = 0; col < KEYPAD_NUM_COLS; col++) {
    2690:	18 8a       	std	Y+16, r1	; 0x10
    2692:	2b c0       	rjmp	.+86     	; 0x26ea <KEYPAD_getPressedKey+0xe2>
				if (GPIO_readPin(KEYPAD_COL_PORT_ID,
    2694:	88 89       	ldd	r24, Y+16	; 0x10
    2696:	98 2f       	mov	r25, r24
    2698:	9e 5f       	subi	r25, 0xFE	; 254
    269a:	83 e0       	ldi	r24, 0x03	; 3
    269c:	69 2f       	mov	r22, r25
    269e:	0e 94 77 16 	call	0x2cee	; 0x2cee <GPIO_readPin>
    26a2:	88 23       	and	r24, r24
    26a4:	f9 f4       	brne	.+62     	; 0x26e4 <KEYPAD_getPressedKey+0xdc>
				KEYPAD_FIRST_COL_PIN_ID + col) == KEYPAD_BUTTON_PRESSED) {
					while ((GPIO_readPin(KEYPAD_COL_PORT_ID,
    26a6:	88 89       	ldd	r24, Y+16	; 0x10
    26a8:	98 2f       	mov	r25, r24
    26aa:	9e 5f       	subi	r25, 0xFE	; 254
    26ac:	83 e0       	ldi	r24, 0x03	; 3
    26ae:	69 2f       	mov	r22, r25
    26b0:	0e 94 77 16 	call	0x2cee	; 0x2cee <GPIO_readPin>
    26b4:	88 23       	and	r24, r24
    26b6:	b9 f3       	breq	.-18     	; 0x26a6 <KEYPAD_getPressedKey+0x9e>
	#endif
	#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row * KEYPAD_NUM_COLS) + col + 1);
	#else
					return KEYPAD_4x4_adjustKeyNumber(
    26b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ba:	88 2f       	mov	r24, r24
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	88 0f       	add	r24, r24
    26c0:	99 1f       	adc	r25, r25
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	98 2f       	mov	r25, r24
    26c8:	88 89       	ldd	r24, Y+16	; 0x10
    26ca:	89 0f       	add	r24, r25
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_INPUT);
			_delay_ms(5);
		}
	}
}
    26d2:	60 96       	adiw	r28, 0x10	; 16
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	de bf       	out	0x3e, r29	; 62
    26da:	0f be       	out	0x3f, r0	; 63
    26dc:	cd bf       	out	0x3d, r28	; 61
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
			KEYPAD_FIRST_ROW_PIN_ID + row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID + row,
			KEYPAD_BUTTON_PRESSED);
			for (col = 0; col < KEYPAD_NUM_COLS; col++) {
    26e4:	88 89       	ldd	r24, Y+16	; 0x10
    26e6:	8f 5f       	subi	r24, 0xFF	; 255
    26e8:	88 8b       	std	Y+16, r24	; 0x10
    26ea:	88 89       	ldd	r24, Y+16	; 0x10
    26ec:	84 30       	cpi	r24, 0x04	; 4
    26ee:	90 f2       	brcs	.-92     	; 0x2694 <KEYPAD_getPressedKey+0x8c>
#endif
#endif

				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,
    26f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f2:	98 2f       	mov	r25, r24
    26f4:	9c 5f       	subi	r25, 0xFC	; 252
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	69 2f       	mov	r22, r25
    26fa:	40 e0       	ldi	r20, 0x00	; 0
    26fc:	0e 94 a1 14 	call	0x2942	; 0x2942 <GPIO_setupPinDirection>
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	a0 ea       	ldi	r26, 0xA0	; 160
    2706:	b0 e4       	ldi	r27, 0x40	; 64
    2708:	8b 87       	std	Y+11, r24	; 0x0b
    270a:	9c 87       	std	Y+12, r25	; 0x0c
    270c:	ad 87       	std	Y+13, r26	; 0x0d
    270e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2710:	6b 85       	ldd	r22, Y+11	; 0x0b
    2712:	7c 85       	ldd	r23, Y+12	; 0x0c
    2714:	8d 85       	ldd	r24, Y+13	; 0x0d
    2716:	9e 85       	ldd	r25, Y+14	; 0x0e
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	4a ef       	ldi	r20, 0xFA	; 250
    271e:	54 e4       	ldi	r21, 0x44	; 68
    2720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	8f 83       	std	Y+7, r24	; 0x07
    272a:	98 87       	std	Y+8, r25	; 0x08
    272c:	a9 87       	std	Y+9, r26	; 0x09
    272e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2730:	6f 81       	ldd	r22, Y+7	; 0x07
    2732:	78 85       	ldd	r23, Y+8	; 0x08
    2734:	89 85       	ldd	r24, Y+9	; 0x09
    2736:	9a 85       	ldd	r25, Y+10	; 0x0a
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e8       	ldi	r20, 0x80	; 128
    273e:	5f e3       	ldi	r21, 0x3F	; 63
    2740:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2744:	88 23       	and	r24, r24
    2746:	2c f4       	brge	.+10     	; 0x2752 <KEYPAD_getPressedKey+0x14a>
		__ticks = 1;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9e 83       	std	Y+6, r25	; 0x06
    274e:	8d 83       	std	Y+5, r24	; 0x05
    2750:	3f c0       	rjmp	.+126    	; 0x27d0 <KEYPAD_getPressedKey+0x1c8>
	else if (__tmp > 65535)
    2752:	6f 81       	ldd	r22, Y+7	; 0x07
    2754:	78 85       	ldd	r23, Y+8	; 0x08
    2756:	89 85       	ldd	r24, Y+9	; 0x09
    2758:	9a 85       	ldd	r25, Y+10	; 0x0a
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	3f ef       	ldi	r19, 0xFF	; 255
    275e:	4f e7       	ldi	r20, 0x7F	; 127
    2760:	57 e4       	ldi	r21, 0x47	; 71
    2762:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2766:	18 16       	cp	r1, r24
    2768:	4c f5       	brge	.+82     	; 0x27bc <KEYPAD_getPressedKey+0x1b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276a:	6b 85       	ldd	r22, Y+11	; 0x0b
    276c:	7c 85       	ldd	r23, Y+12	; 0x0c
    276e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2770:	9e 85       	ldd	r25, Y+14	; 0x0e
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e2       	ldi	r20, 0x20	; 32
    2778:	51 e4       	ldi	r21, 0x41	; 65
    277a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9e 83       	std	Y+6, r25	; 0x06
    2790:	8d 83       	std	Y+5, r24	; 0x05
    2792:	0f c0       	rjmp	.+30     	; 0x27b2 <KEYPAD_getPressedKey+0x1aa>
    2794:	88 ec       	ldi	r24, 0xC8	; 200
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	9c 83       	std	Y+4, r25	; 0x04
    279a:	8b 83       	std	Y+3, r24	; 0x03
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <KEYPAD_getPressedKey+0x198>
    27a4:	9c 83       	std	Y+4, r25	; 0x04
    27a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a8:	8d 81       	ldd	r24, Y+5	; 0x05
    27aa:	9e 81       	ldd	r25, Y+6	; 0x06
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b2:	8d 81       	ldd	r24, Y+5	; 0x05
    27b4:	9e 81       	ldd	r25, Y+6	; 0x06
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	69 f7       	brne	.-38     	; 0x2794 <KEYPAD_getPressedKey+0x18c>
    27ba:	14 c0       	rjmp	.+40     	; 0x27e4 <KEYPAD_getPressedKey+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27bc:	6f 81       	ldd	r22, Y+7	; 0x07
    27be:	78 85       	ldd	r23, Y+8	; 0x08
    27c0:	89 85       	ldd	r24, Y+9	; 0x09
    27c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	9e 83       	std	Y+6, r25	; 0x06
    27ce:	8d 83       	std	Y+5, r24	; 0x05
    27d0:	8d 81       	ldd	r24, Y+5	; 0x05
    27d2:	9e 81       	ldd	r25, Y+6	; 0x06
    27d4:	9a 83       	std	Y+2, r25	; 0x02
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <KEYPAD_getPressedKey+0x1d4>
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID + 3,
			PIN_INPUT);
#endif
	while (1) {
		for (row = 0; row < KEYPAD_NUM_ROWS; row++) {
    27e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e6:	8f 5f       	subi	r24, 0xFF	; 255
    27e8:	8f 87       	std	Y+15, r24	; 0x0f
    27ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ec:	84 30       	cpi	r24, 0x04	; 4
    27ee:	08 f4       	brcc	.+2      	; 0x27f2 <KEYPAD_getPressedKey+0x1ea>
    27f0:	3f cf       	rjmp	.-386    	; 0x2670 <KEYPAD_getPressedKey+0x68>
    27f2:	3c cf       	rjmp	.-392    	; 0x266c <KEYPAD_getPressedKey+0x64>

000027f4 <KEYPAD_4x4_adjustKeyNumber>:

/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number) {
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <KEYPAD_4x4_adjustKeyNumber+0x6>
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <KEYPAD_4x4_adjustKeyNumber+0x8>
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2802:	19 82       	std	Y+1, r1	; 0x01
	switch (button_number) {
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	28 2f       	mov	r18, r24
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	3c 83       	std	Y+4, r19	; 0x04
    280c:	2b 83       	std	Y+3, r18	; 0x03
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	9c 81       	ldd	r25, Y+4	; 0x04
    2812:	88 30       	cpi	r24, 0x08	; 8
    2814:	91 05       	cpc	r25, r1
    2816:	09 f4       	brne	.+2      	; 0x281a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2818:	70 c0       	rjmp	.+224    	; 0x28fa <KEYPAD_4x4_adjustKeyNumber+0x106>
    281a:	2b 81       	ldd	r18, Y+3	; 0x03
    281c:	3c 81       	ldd	r19, Y+4	; 0x04
    281e:	29 30       	cpi	r18, 0x09	; 9
    2820:	31 05       	cpc	r19, r1
    2822:	5c f5       	brge	.+86     	; 0x287a <KEYPAD_4x4_adjustKeyNumber+0x86>
    2824:	8b 81       	ldd	r24, Y+3	; 0x03
    2826:	9c 81       	ldd	r25, Y+4	; 0x04
    2828:	84 30       	cpi	r24, 0x04	; 4
    282a:	91 05       	cpc	r25, r1
    282c:	09 f4       	brne	.+2      	; 0x2830 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    282e:	59 c0       	rjmp	.+178    	; 0x28e2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2830:	2b 81       	ldd	r18, Y+3	; 0x03
    2832:	3c 81       	ldd	r19, Y+4	; 0x04
    2834:	25 30       	cpi	r18, 0x05	; 5
    2836:	31 05       	cpc	r19, r1
    2838:	9c f4       	brge	.+38     	; 0x2860 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    283a:	8b 81       	ldd	r24, Y+3	; 0x03
    283c:	9c 81       	ldd	r25, Y+4	; 0x04
    283e:	82 30       	cpi	r24, 0x02	; 2
    2840:	91 05       	cpc	r25, r1
    2842:	09 f4       	brne	.+2      	; 0x2846 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2844:	48 c0       	rjmp	.+144    	; 0x28d6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2846:	2b 81       	ldd	r18, Y+3	; 0x03
    2848:	3c 81       	ldd	r19, Y+4	; 0x04
    284a:	23 30       	cpi	r18, 0x03	; 3
    284c:	31 05       	cpc	r19, r1
    284e:	0c f0       	brlt	.+2      	; 0x2852 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2850:	45 c0       	rjmp	.+138    	; 0x28dc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	9c 81       	ldd	r25, Y+4	; 0x04
    2856:	81 30       	cpi	r24, 0x01	; 1
    2858:	91 05       	cpc	r25, r1
    285a:	09 f4       	brne	.+2      	; 0x285e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    285c:	39 c0       	rjmp	.+114    	; 0x28d0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    285e:	67 c0       	rjmp	.+206    	; 0x292e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2860:	2b 81       	ldd	r18, Y+3	; 0x03
    2862:	3c 81       	ldd	r19, Y+4	; 0x04
    2864:	26 30       	cpi	r18, 0x06	; 6
    2866:	31 05       	cpc	r19, r1
    2868:	09 f4       	brne	.+2      	; 0x286c <KEYPAD_4x4_adjustKeyNumber+0x78>
    286a:	41 c0       	rjmp	.+130    	; 0x28ee <KEYPAD_4x4_adjustKeyNumber+0xfa>
    286c:	8b 81       	ldd	r24, Y+3	; 0x03
    286e:	9c 81       	ldd	r25, Y+4	; 0x04
    2870:	87 30       	cpi	r24, 0x07	; 7
    2872:	91 05       	cpc	r25, r1
    2874:	0c f0       	brlt	.+2      	; 0x2878 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2876:	3e c0       	rjmp	.+124    	; 0x28f4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2878:	37 c0       	rjmp	.+110    	; 0x28e8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    287a:	2b 81       	ldd	r18, Y+3	; 0x03
    287c:	3c 81       	ldd	r19, Y+4	; 0x04
    287e:	2c 30       	cpi	r18, 0x0C	; 12
    2880:	31 05       	cpc	r19, r1
    2882:	09 f4       	brne	.+2      	; 0x2886 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2884:	46 c0       	rjmp	.+140    	; 0x2912 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	9c 81       	ldd	r25, Y+4	; 0x04
    288a:	8d 30       	cpi	r24, 0x0D	; 13
    288c:	91 05       	cpc	r25, r1
    288e:	5c f4       	brge	.+22     	; 0x28a6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2890:	2b 81       	ldd	r18, Y+3	; 0x03
    2892:	3c 81       	ldd	r19, Y+4	; 0x04
    2894:	2a 30       	cpi	r18, 0x0A	; 10
    2896:	31 05       	cpc	r19, r1
    2898:	b1 f1       	breq	.+108    	; 0x2906 <KEYPAD_4x4_adjustKeyNumber+0x112>
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	9c 81       	ldd	r25, Y+4	; 0x04
    289e:	8b 30       	cpi	r24, 0x0B	; 11
    28a0:	91 05       	cpc	r25, r1
    28a2:	a4 f5       	brge	.+104    	; 0x290c <KEYPAD_4x4_adjustKeyNumber+0x118>
    28a4:	2d c0       	rjmp	.+90     	; 0x2900 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    28a6:	2b 81       	ldd	r18, Y+3	; 0x03
    28a8:	3c 81       	ldd	r19, Y+4	; 0x04
    28aa:	2e 30       	cpi	r18, 0x0E	; 14
    28ac:	31 05       	cpc	r19, r1
    28ae:	b9 f1       	breq	.+110    	; 0x291e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    28b0:	8b 81       	ldd	r24, Y+3	; 0x03
    28b2:	9c 81       	ldd	r25, Y+4	; 0x04
    28b4:	8e 30       	cpi	r24, 0x0E	; 14
    28b6:	91 05       	cpc	r25, r1
    28b8:	7c f1       	brlt	.+94     	; 0x2918 <KEYPAD_4x4_adjustKeyNumber+0x124>
    28ba:	2b 81       	ldd	r18, Y+3	; 0x03
    28bc:	3c 81       	ldd	r19, Y+4	; 0x04
    28be:	2f 30       	cpi	r18, 0x0F	; 15
    28c0:	31 05       	cpc	r19, r1
    28c2:	79 f1       	breq	.+94     	; 0x2922 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9c 81       	ldd	r25, Y+4	; 0x04
    28c8:	80 31       	cpi	r24, 0x10	; 16
    28ca:	91 05       	cpc	r25, r1
    28cc:	69 f1       	breq	.+90     	; 0x2928 <KEYPAD_4x4_adjustKeyNumber+0x134>
    28ce:	2f c0       	rjmp	.+94     	; 0x292e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	case 1:
		keypad_button = 7;
    28d0:	87 e0       	ldi	r24, 0x07	; 7
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	2e c0       	rjmp	.+92     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 2:
		keypad_button = 8;
    28d6:	88 e0       	ldi	r24, 0x08	; 8
    28d8:	89 83       	std	Y+1, r24	; 0x01
    28da:	2b c0       	rjmp	.+86     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 3:
		keypad_button = 9;
    28dc:	89 e0       	ldi	r24, 0x09	; 9
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	28 c0       	rjmp	.+80     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 4:
		keypad_button = '/'; // ASCII Code of %
    28e2:	8f e2       	ldi	r24, 0x2F	; 47
    28e4:	89 83       	std	Y+1, r24	; 0x01
    28e6:	25 c0       	rjmp	.+74     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 5:
		keypad_button = 4;
    28e8:	84 e0       	ldi	r24, 0x04	; 4
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	22 c0       	rjmp	.+68     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 6:
		keypad_button = 5;
    28ee:	85 e0       	ldi	r24, 0x05	; 5
    28f0:	89 83       	std	Y+1, r24	; 0x01
    28f2:	1f c0       	rjmp	.+62     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 7:
		keypad_button = 6;
    28f4:	86 e0       	ldi	r24, 0x06	; 6
    28f6:	89 83       	std	Y+1, r24	; 0x01
    28f8:	1c c0       	rjmp	.+56     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 8:
		keypad_button = '*'; /* ASCII Code of '*' */
    28fa:	8a e2       	ldi	r24, 0x2A	; 42
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	19 c0       	rjmp	.+50     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 9:
		keypad_button = 1;
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	16 c0       	rjmp	.+44     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 10:
		keypad_button = 2;
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	13 c0       	rjmp	.+38     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 11:
		keypad_button = 3;
    290c:	83 e0       	ldi	r24, 0x03	; 3
    290e:	89 83       	std	Y+1, r24	; 0x01
    2910:	10 c0       	rjmp	.+32     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 12:
		keypad_button = '-'; /* ASCII Code of '-' */
    2912:	8d e2       	ldi	r24, 0x2D	; 45
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	0d c0       	rjmp	.+26     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 13:
		keypad_button = 13; /* ASCII of Enter */
    2918:	8d e0       	ldi	r24, 0x0D	; 13
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	0a c0       	rjmp	.+20     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 14:
		keypad_button = 0;
    291e:	19 82       	std	Y+1, r1	; 0x01
    2920:	08 c0       	rjmp	.+16     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 15:
		keypad_button = '='; /* ASCII Code of '=' */
    2922:	8d e3       	ldi	r24, 0x3D	; 61
    2924:	89 83       	std	Y+1, r24	; 0x01
    2926:	05 c0       	rjmp	.+10     	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	case 16:
		keypad_button = '+'; /* ASCII Code of '+' */
    2928:	8b e2       	ldi	r24, 0x2B	; 43
    292a:	89 83       	std	Y+1, r24	; 0x01
    292c:	02 c0       	rjmp	.+4      	; 0x2932 <KEYPAD_4x4_adjustKeyNumber+0x13e>
		break;
	default:
		keypad_button = button_number;
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    2932:	89 81       	ldd	r24, Y+1	; 0x01
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <GPIO_setupPinDirection>:
/*
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,GPIO_PinDirectionType direction) {
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <GPIO_setupPinDirection+0x6>
    2948:	00 d0       	rcall	.+0      	; 0x294a <GPIO_setupPinDirection+0x8>
    294a:	0f 92       	push	r0
    294c:	cd b7       	in	r28, 0x3d	; 61
    294e:	de b7       	in	r29, 0x3e	; 62
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	6a 83       	std	Y+2, r22	; 0x02
    2954:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	88 30       	cpi	r24, 0x08	; 8
    295a:	08 f0       	brcs	.+2      	; 0x295e <GPIO_setupPinDirection+0x1c>
    295c:	d5 c0       	rjmp	.+426    	; 0x2b08 <GPIO_setupPinDirection+0x1c6>
    295e:	89 81       	ldd	r24, Y+1	; 0x01
    2960:	84 30       	cpi	r24, 0x04	; 4
    2962:	08 f0       	brcs	.+2      	; 0x2966 <GPIO_setupPinDirection+0x24>
    2964:	d1 c0       	rjmp	.+418    	; 0x2b08 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	} else {
		/* Setup the pin direction as required */
		switch (port_num) {
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	28 2f       	mov	r18, r24
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	3d 83       	std	Y+5, r19	; 0x05
    296e:	2c 83       	std	Y+4, r18	; 0x04
    2970:	8c 81       	ldd	r24, Y+4	; 0x04
    2972:	9d 81       	ldd	r25, Y+5	; 0x05
    2974:	81 30       	cpi	r24, 0x01	; 1
    2976:	91 05       	cpc	r25, r1
    2978:	09 f4       	brne	.+2      	; 0x297c <GPIO_setupPinDirection+0x3a>
    297a:	43 c0       	rjmp	.+134    	; 0x2a02 <GPIO_setupPinDirection+0xc0>
    297c:	2c 81       	ldd	r18, Y+4	; 0x04
    297e:	3d 81       	ldd	r19, Y+5	; 0x05
    2980:	22 30       	cpi	r18, 0x02	; 2
    2982:	31 05       	cpc	r19, r1
    2984:	2c f4       	brge	.+10     	; 0x2990 <GPIO_setupPinDirection+0x4e>
    2986:	8c 81       	ldd	r24, Y+4	; 0x04
    2988:	9d 81       	ldd	r25, Y+5	; 0x05
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	71 f0       	breq	.+28     	; 0x29aa <GPIO_setupPinDirection+0x68>
    298e:	bc c0       	rjmp	.+376    	; 0x2b08 <GPIO_setupPinDirection+0x1c6>
    2990:	2c 81       	ldd	r18, Y+4	; 0x04
    2992:	3d 81       	ldd	r19, Y+5	; 0x05
    2994:	22 30       	cpi	r18, 0x02	; 2
    2996:	31 05       	cpc	r19, r1
    2998:	09 f4       	brne	.+2      	; 0x299c <GPIO_setupPinDirection+0x5a>
    299a:	5f c0       	rjmp	.+190    	; 0x2a5a <GPIO_setupPinDirection+0x118>
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	9d 81       	ldd	r25, Y+5	; 0x05
    29a0:	83 30       	cpi	r24, 0x03	; 3
    29a2:	91 05       	cpc	r25, r1
    29a4:	09 f4       	brne	.+2      	; 0x29a8 <GPIO_setupPinDirection+0x66>
    29a6:	85 c0       	rjmp	.+266    	; 0x2ab2 <GPIO_setupPinDirection+0x170>
    29a8:	af c0       	rjmp	.+350    	; 0x2b08 <GPIO_setupPinDirection+0x1c6>
		case PORTA_ID:
			if (direction == PIN_OUTPUT) {
    29aa:	8b 81       	ldd	r24, Y+3	; 0x03
    29ac:	81 30       	cpi	r24, 0x01	; 1
    29ae:	a1 f4       	brne	.+40     	; 0x29d8 <GPIO_setupPinDirection+0x96>
				SET_BIT(DDRA, pin_num);
    29b0:	aa e3       	ldi	r26, 0x3A	; 58
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	ea e3       	ldi	r30, 0x3A	; 58
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	48 2f       	mov	r20, r24
    29bc:	8a 81       	ldd	r24, Y+2	; 0x02
    29be:	28 2f       	mov	r18, r24
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	02 2e       	mov	r0, r18
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <GPIO_setupPinDirection+0x8c>
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	0a 94       	dec	r0
    29d0:	e2 f7       	brpl	.-8      	; 0x29ca <GPIO_setupPinDirection+0x88>
    29d2:	84 2b       	or	r24, r20
    29d4:	8c 93       	st	X, r24
    29d6:	98 c0       	rjmp	.+304    	; 0x2b08 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRA, pin_num);
    29d8:	aa e3       	ldi	r26, 0x3A	; 58
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	ea e3       	ldi	r30, 0x3A	; 58
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	48 2f       	mov	r20, r24
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	28 2f       	mov	r18, r24
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	02 2e       	mov	r0, r18
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <GPIO_setupPinDirection+0xb4>
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	0a 94       	dec	r0
    29f8:	e2 f7       	brpl	.-8      	; 0x29f2 <GPIO_setupPinDirection+0xb0>
    29fa:	80 95       	com	r24
    29fc:	84 23       	and	r24, r20
    29fe:	8c 93       	st	X, r24
    2a00:	83 c0       	rjmp	.+262    	; 0x2b08 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT) {
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	81 30       	cpi	r24, 0x01	; 1
    2a06:	a1 f4       	brne	.+40     	; 0x2a30 <GPIO_setupPinDirection+0xee>
				SET_BIT(DDRB, pin_num);
    2a08:	a7 e3       	ldi	r26, 0x37	; 55
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e7 e3       	ldi	r30, 0x37	; 55
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	48 2f       	mov	r20, r24
    2a14:	8a 81       	ldd	r24, Y+2	; 0x02
    2a16:	28 2f       	mov	r18, r24
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	02 2e       	mov	r0, r18
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <GPIO_setupPinDirection+0xe4>
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	0a 94       	dec	r0
    2a28:	e2 f7       	brpl	.-8      	; 0x2a22 <GPIO_setupPinDirection+0xe0>
    2a2a:	84 2b       	or	r24, r20
    2a2c:	8c 93       	st	X, r24
    2a2e:	6c c0       	rjmp	.+216    	; 0x2b08 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRB, pin_num);
    2a30:	a7 e3       	ldi	r26, 0x37	; 55
    2a32:	b0 e0       	ldi	r27, 0x00	; 0
    2a34:	e7 e3       	ldi	r30, 0x37	; 55
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	80 81       	ld	r24, Z
    2a3a:	48 2f       	mov	r20, r24
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	02 2e       	mov	r0, r18
    2a48:	02 c0       	rjmp	.+4      	; 0x2a4e <GPIO_setupPinDirection+0x10c>
    2a4a:	88 0f       	add	r24, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	0a 94       	dec	r0
    2a50:	e2 f7       	brpl	.-8      	; 0x2a4a <GPIO_setupPinDirection+0x108>
    2a52:	80 95       	com	r24
    2a54:	84 23       	and	r24, r20
    2a56:	8c 93       	st	X, r24
    2a58:	57 c0       	rjmp	.+174    	; 0x2b08 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT) {
    2a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	a1 f4       	brne	.+40     	; 0x2a88 <GPIO_setupPinDirection+0x146>
				SET_BIT(DDRC, pin_num);
    2a60:	a4 e3       	ldi	r26, 0x34	; 52
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e4 e3       	ldi	r30, 0x34	; 52
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	48 2f       	mov	r20, r24
    2a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	02 2e       	mov	r0, r18
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <GPIO_setupPinDirection+0x13c>
    2a7a:	88 0f       	add	r24, r24
    2a7c:	99 1f       	adc	r25, r25
    2a7e:	0a 94       	dec	r0
    2a80:	e2 f7       	brpl	.-8      	; 0x2a7a <GPIO_setupPinDirection+0x138>
    2a82:	84 2b       	or	r24, r20
    2a84:	8c 93       	st	X, r24
    2a86:	40 c0       	rjmp	.+128    	; 0x2b08 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRC, pin_num);
    2a88:	a4 e3       	ldi	r26, 0x34	; 52
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e4 e3       	ldi	r30, 0x34	; 52
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	48 2f       	mov	r20, r24
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	02 2e       	mov	r0, r18
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <GPIO_setupPinDirection+0x164>
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	0a 94       	dec	r0
    2aa8:	e2 f7       	brpl	.-8      	; 0x2aa2 <GPIO_setupPinDirection+0x160>
    2aaa:	80 95       	com	r24
    2aac:	84 23       	and	r24, r20
    2aae:	8c 93       	st	X, r24
    2ab0:	2b c0       	rjmp	.+86     	; 0x2b08 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT) {
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	81 30       	cpi	r24, 0x01	; 1
    2ab6:	a1 f4       	brne	.+40     	; 0x2ae0 <GPIO_setupPinDirection+0x19e>
				SET_BIT(DDRD, pin_num);
    2ab8:	a1 e3       	ldi	r26, 0x31	; 49
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e1 e3       	ldi	r30, 0x31	; 49
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	48 2f       	mov	r20, r24
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	02 2e       	mov	r0, r18
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <GPIO_setupPinDirection+0x194>
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	0a 94       	dec	r0
    2ad8:	e2 f7       	brpl	.-8      	; 0x2ad2 <GPIO_setupPinDirection+0x190>
    2ada:	84 2b       	or	r24, r20
    2adc:	8c 93       	st	X, r24
    2ade:	14 c0       	rjmp	.+40     	; 0x2b08 <GPIO_setupPinDirection+0x1c6>
			} else {
				CLEAR_BIT(DDRD, pin_num);
    2ae0:	a1 e3       	ldi	r26, 0x31	; 49
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e1 e3       	ldi	r30, 0x31	; 49
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	48 2f       	mov	r20, r24
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	02 2e       	mov	r0, r18
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <GPIO_setupPinDirection+0x1bc>
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	0a 94       	dec	r0
    2b00:	e2 f7       	brpl	.-8      	; 0x2afa <GPIO_setupPinDirection+0x1b8>
    2b02:	80 95       	com	r24
    2b04:	84 23       	and	r24, r20
    2b06:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	cf 91       	pop	r28
    2b14:	df 91       	pop	r29
    2b16:	08 95       	ret

00002b18 <GPIO_writePin>:
 * Description :
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value) {
    2b18:	df 93       	push	r29
    2b1a:	cf 93       	push	r28
    2b1c:	00 d0       	rcall	.+0      	; 0x2b1e <GPIO_writePin+0x6>
    2b1e:	00 d0       	rcall	.+0      	; 0x2b20 <GPIO_writePin+0x8>
    2b20:	0f 92       	push	r0
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	89 83       	std	Y+1, r24	; 0x01
    2b28:	6a 83       	std	Y+2, r22	; 0x02
    2b2a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	88 30       	cpi	r24, 0x08	; 8
    2b30:	08 f0       	brcs	.+2      	; 0x2b34 <GPIO_writePin+0x1c>
    2b32:	d5 c0       	rjmp	.+426    	; 0x2cde <GPIO_writePin+0x1c6>
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	84 30       	cpi	r24, 0x04	; 4
    2b38:	08 f0       	brcs	.+2      	; 0x2b3c <GPIO_writePin+0x24>
    2b3a:	d1 c0       	rjmp	.+418    	; 0x2cde <GPIO_writePin+0x1c6>
		/* Do Nothing */
	} else {
		/* write the pin value as required */
		switch (port_num) {
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	3d 83       	std	Y+5, r19	; 0x05
    2b44:	2c 83       	std	Y+4, r18	; 0x04
    2b46:	8c 81       	ldd	r24, Y+4	; 0x04
    2b48:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4a:	81 30       	cpi	r24, 0x01	; 1
    2b4c:	91 05       	cpc	r25, r1
    2b4e:	09 f4       	brne	.+2      	; 0x2b52 <GPIO_writePin+0x3a>
    2b50:	43 c0       	rjmp	.+134    	; 0x2bd8 <GPIO_writePin+0xc0>
    2b52:	2c 81       	ldd	r18, Y+4	; 0x04
    2b54:	3d 81       	ldd	r19, Y+5	; 0x05
    2b56:	22 30       	cpi	r18, 0x02	; 2
    2b58:	31 05       	cpc	r19, r1
    2b5a:	2c f4       	brge	.+10     	; 0x2b66 <GPIO_writePin+0x4e>
    2b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b60:	00 97       	sbiw	r24, 0x00	; 0
    2b62:	71 f0       	breq	.+28     	; 0x2b80 <GPIO_writePin+0x68>
    2b64:	bc c0       	rjmp	.+376    	; 0x2cde <GPIO_writePin+0x1c6>
    2b66:	2c 81       	ldd	r18, Y+4	; 0x04
    2b68:	3d 81       	ldd	r19, Y+5	; 0x05
    2b6a:	22 30       	cpi	r18, 0x02	; 2
    2b6c:	31 05       	cpc	r19, r1
    2b6e:	09 f4       	brne	.+2      	; 0x2b72 <GPIO_writePin+0x5a>
    2b70:	5f c0       	rjmp	.+190    	; 0x2c30 <GPIO_writePin+0x118>
    2b72:	8c 81       	ldd	r24, Y+4	; 0x04
    2b74:	9d 81       	ldd	r25, Y+5	; 0x05
    2b76:	83 30       	cpi	r24, 0x03	; 3
    2b78:	91 05       	cpc	r25, r1
    2b7a:	09 f4       	brne	.+2      	; 0x2b7e <GPIO_writePin+0x66>
    2b7c:	85 c0       	rjmp	.+266    	; 0x2c88 <GPIO_writePin+0x170>
    2b7e:	af c0       	rjmp	.+350    	; 0x2cde <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if (value == LOGIC_HIGH) {
    2b80:	8b 81       	ldd	r24, Y+3	; 0x03
    2b82:	81 30       	cpi	r24, 0x01	; 1
    2b84:	a1 f4       	brne	.+40     	; 0x2bae <GPIO_writePin+0x96>
				SET_BIT(PORTA, pin_num);
    2b86:	ab e3       	ldi	r26, 0x3B	; 59
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	eb e3       	ldi	r30, 0x3B	; 59
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	48 2f       	mov	r20, r24
    2b92:	8a 81       	ldd	r24, Y+2	; 0x02
    2b94:	28 2f       	mov	r18, r24
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	81 e0       	ldi	r24, 0x01	; 1
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	02 2e       	mov	r0, r18
    2b9e:	02 c0       	rjmp	.+4      	; 0x2ba4 <GPIO_writePin+0x8c>
    2ba0:	88 0f       	add	r24, r24
    2ba2:	99 1f       	adc	r25, r25
    2ba4:	0a 94       	dec	r0
    2ba6:	e2 f7       	brpl	.-8      	; 0x2ba0 <GPIO_writePin+0x88>
    2ba8:	84 2b       	or	r24, r20
    2baa:	8c 93       	st	X, r24
    2bac:	98 c0       	rjmp	.+304    	; 0x2cde <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTA, pin_num);
    2bae:	ab e3       	ldi	r26, 0x3B	; 59
    2bb0:	b0 e0       	ldi	r27, 0x00	; 0
    2bb2:	eb e3       	ldi	r30, 0x3B	; 59
    2bb4:	f0 e0       	ldi	r31, 0x00	; 0
    2bb6:	80 81       	ld	r24, Z
    2bb8:	48 2f       	mov	r20, r24
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	02 2e       	mov	r0, r18
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <GPIO_writePin+0xb4>
    2bc8:	88 0f       	add	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	0a 94       	dec	r0
    2bce:	e2 f7       	brpl	.-8      	; 0x2bc8 <GPIO_writePin+0xb0>
    2bd0:	80 95       	com	r24
    2bd2:	84 23       	and	r24, r20
    2bd4:	8c 93       	st	X, r24
    2bd6:	83 c0       	rjmp	.+262    	; 0x2cde <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_HIGH) {
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	81 30       	cpi	r24, 0x01	; 1
    2bdc:	a1 f4       	brne	.+40     	; 0x2c06 <GPIO_writePin+0xee>
				SET_BIT(PORTB, pin_num);
    2bde:	a8 e3       	ldi	r26, 0x38	; 56
    2be0:	b0 e0       	ldi	r27, 0x00	; 0
    2be2:	e8 e3       	ldi	r30, 0x38	; 56
    2be4:	f0 e0       	ldi	r31, 0x00	; 0
    2be6:	80 81       	ld	r24, Z
    2be8:	48 2f       	mov	r20, r24
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	02 2e       	mov	r0, r18
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <GPIO_writePin+0xe4>
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	0a 94       	dec	r0
    2bfe:	e2 f7       	brpl	.-8      	; 0x2bf8 <GPIO_writePin+0xe0>
    2c00:	84 2b       	or	r24, r20
    2c02:	8c 93       	st	X, r24
    2c04:	6c c0       	rjmp	.+216    	; 0x2cde <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTB, pin_num);
    2c06:	a8 e3       	ldi	r26, 0x38	; 56
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	e8 e3       	ldi	r30, 0x38	; 56
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	80 81       	ld	r24, Z
    2c10:	48 2f       	mov	r20, r24
    2c12:	8a 81       	ldd	r24, Y+2	; 0x02
    2c14:	28 2f       	mov	r18, r24
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	81 e0       	ldi	r24, 0x01	; 1
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	02 2e       	mov	r0, r18
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <GPIO_writePin+0x10c>
    2c20:	88 0f       	add	r24, r24
    2c22:	99 1f       	adc	r25, r25
    2c24:	0a 94       	dec	r0
    2c26:	e2 f7       	brpl	.-8      	; 0x2c20 <GPIO_writePin+0x108>
    2c28:	80 95       	com	r24
    2c2a:	84 23       	and	r24, r20
    2c2c:	8c 93       	st	X, r24
    2c2e:	57 c0       	rjmp	.+174    	; 0x2cde <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_HIGH) {
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	81 30       	cpi	r24, 0x01	; 1
    2c34:	a1 f4       	brne	.+40     	; 0x2c5e <GPIO_writePin+0x146>
				SET_BIT(PORTC, pin_num);
    2c36:	a5 e3       	ldi	r26, 0x35	; 53
    2c38:	b0 e0       	ldi	r27, 0x00	; 0
    2c3a:	e5 e3       	ldi	r30, 0x35	; 53
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	48 2f       	mov	r20, r24
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	81 e0       	ldi	r24, 0x01	; 1
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	02 2e       	mov	r0, r18
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <GPIO_writePin+0x13c>
    2c50:	88 0f       	add	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	0a 94       	dec	r0
    2c56:	e2 f7       	brpl	.-8      	; 0x2c50 <GPIO_writePin+0x138>
    2c58:	84 2b       	or	r24, r20
    2c5a:	8c 93       	st	X, r24
    2c5c:	40 c0       	rjmp	.+128    	; 0x2cde <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTC, pin_num);
    2c5e:	a5 e3       	ldi	r26, 0x35	; 53
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	e5 e3       	ldi	r30, 0x35	; 53
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	48 2f       	mov	r20, r24
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	28 2f       	mov	r18, r24
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	02 2e       	mov	r0, r18
    2c76:	02 c0       	rjmp	.+4      	; 0x2c7c <GPIO_writePin+0x164>
    2c78:	88 0f       	add	r24, r24
    2c7a:	99 1f       	adc	r25, r25
    2c7c:	0a 94       	dec	r0
    2c7e:	e2 f7       	brpl	.-8      	; 0x2c78 <GPIO_writePin+0x160>
    2c80:	80 95       	com	r24
    2c82:	84 23       	and	r24, r20
    2c84:	8c 93       	st	X, r24
    2c86:	2b c0       	rjmp	.+86     	; 0x2cde <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_HIGH) {
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	81 30       	cpi	r24, 0x01	; 1
    2c8c:	a1 f4       	brne	.+40     	; 0x2cb6 <GPIO_writePin+0x19e>
				SET_BIT(PORTD, pin_num);
    2c8e:	a2 e3       	ldi	r26, 0x32	; 50
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	e2 e3       	ldi	r30, 0x32	; 50
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	48 2f       	mov	r20, r24
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	02 2e       	mov	r0, r18
    2ca6:	02 c0       	rjmp	.+4      	; 0x2cac <GPIO_writePin+0x194>
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	0a 94       	dec	r0
    2cae:	e2 f7       	brpl	.-8      	; 0x2ca8 <GPIO_writePin+0x190>
    2cb0:	84 2b       	or	r24, r20
    2cb2:	8c 93       	st	X, r24
    2cb4:	14 c0       	rjmp	.+40     	; 0x2cde <GPIO_writePin+0x1c6>
			} else {
				CLEAR_BIT(PORTD, pin_num);
    2cb6:	a2 e3       	ldi	r26, 0x32	; 50
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	e2 e3       	ldi	r30, 0x32	; 50
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	48 2f       	mov	r20, r24
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	28 2f       	mov	r18, r24
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	02 2e       	mov	r0, r18
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <GPIO_writePin+0x1bc>
    2cd0:	88 0f       	add	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	0a 94       	dec	r0
    2cd6:	e2 f7       	brpl	.-8      	; 0x2cd0 <GPIO_writePin+0x1b8>
    2cd8:	80 95       	com	r24
    2cda:	84 23       	and	r24, r20
    2cdc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <GPIO_readPin>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num) {
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	00 d0       	rcall	.+0      	; 0x2cf4 <GPIO_readPin+0x6>
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <GPIO_readPin+0x8>
    2cf6:	0f 92       	push	r0
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	8a 83       	std	Y+2, r24	; 0x02
    2cfe:	6b 83       	std	Y+3, r22	; 0x03

	uint8 value = LOGIC_LOW;
    2d00:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS)) {
    2d02:	8b 81       	ldd	r24, Y+3	; 0x03
    2d04:	88 30       	cpi	r24, 0x08	; 8
    2d06:	08 f0       	brcs	.+2      	; 0x2d0a <GPIO_readPin+0x1c>
    2d08:	84 c0       	rjmp	.+264    	; 0x2e12 <GPIO_readPin+0x124>
    2d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0c:	84 30       	cpi	r24, 0x04	; 4
    2d0e:	08 f0       	brcs	.+2      	; 0x2d12 <GPIO_readPin+0x24>
    2d10:	80 c0       	rjmp	.+256    	; 0x2e12 <GPIO_readPin+0x124>
		/* Do Nothing */
	} else {
		/* read the pin value */
		switch (port_num) {
    2d12:	8a 81       	ldd	r24, Y+2	; 0x02
    2d14:	28 2f       	mov	r18, r24
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	3d 83       	std	Y+5, r19	; 0x05
    2d1a:	2c 83       	std	Y+4, r18	; 0x04
    2d1c:	4c 81       	ldd	r20, Y+4	; 0x04
    2d1e:	5d 81       	ldd	r21, Y+5	; 0x05
    2d20:	41 30       	cpi	r20, 0x01	; 1
    2d22:	51 05       	cpc	r21, r1
    2d24:	79 f1       	breq	.+94     	; 0x2d84 <GPIO_readPin+0x96>
    2d26:	8c 81       	ldd	r24, Y+4	; 0x04
    2d28:	9d 81       	ldd	r25, Y+5	; 0x05
    2d2a:	82 30       	cpi	r24, 0x02	; 2
    2d2c:	91 05       	cpc	r25, r1
    2d2e:	34 f4       	brge	.+12     	; 0x2d3c <GPIO_readPin+0x4e>
    2d30:	2c 81       	ldd	r18, Y+4	; 0x04
    2d32:	3d 81       	ldd	r19, Y+5	; 0x05
    2d34:	21 15       	cp	r18, r1
    2d36:	31 05       	cpc	r19, r1
    2d38:	69 f0       	breq	.+26     	; 0x2d54 <GPIO_readPin+0x66>
    2d3a:	6b c0       	rjmp	.+214    	; 0x2e12 <GPIO_readPin+0x124>
    2d3c:	4c 81       	ldd	r20, Y+4	; 0x04
    2d3e:	5d 81       	ldd	r21, Y+5	; 0x05
    2d40:	42 30       	cpi	r20, 0x02	; 2
    2d42:	51 05       	cpc	r21, r1
    2d44:	b9 f1       	breq	.+110    	; 0x2db4 <GPIO_readPin+0xc6>
    2d46:	8c 81       	ldd	r24, Y+4	; 0x04
    2d48:	9d 81       	ldd	r25, Y+5	; 0x05
    2d4a:	83 30       	cpi	r24, 0x03	; 3
    2d4c:	91 05       	cpc	r25, r1
    2d4e:	09 f4       	brne	.+2      	; 0x2d52 <GPIO_readPin+0x64>
    2d50:	49 c0       	rjmp	.+146    	; 0x2de4 <GPIO_readPin+0xf6>
    2d52:	5f c0       	rjmp	.+190    	; 0x2e12 <GPIO_readPin+0x124>
		case PORTA_ID:
			if (BIT_IS_SET(PINA, pin_num)) {
    2d54:	e9 e3       	ldi	r30, 0x39	; 57
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d60:	88 2f       	mov	r24, r24
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	a9 01       	movw	r20, r18
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <GPIO_readPin+0x7e>
    2d68:	55 95       	asr	r21
    2d6a:	47 95       	ror	r20
    2d6c:	8a 95       	dec	r24
    2d6e:	e2 f7       	brpl	.-8      	; 0x2d68 <GPIO_readPin+0x7a>
    2d70:	ca 01       	movw	r24, r20
    2d72:	81 70       	andi	r24, 0x01	; 1
    2d74:	90 70       	andi	r25, 0x00	; 0
    2d76:	88 23       	and	r24, r24
    2d78:	19 f0       	breq	.+6      	; 0x2d80 <GPIO_readPin+0x92>
				value = LOGIC_HIGH;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	89 83       	std	Y+1, r24	; 0x01
    2d7e:	49 c0       	rjmp	.+146    	; 0x2e12 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    2d80:	19 82       	std	Y+1, r1	; 0x01
    2d82:	47 c0       	rjmp	.+142    	; 0x2e12 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB, pin_num)) {
    2d84:	e6 e3       	ldi	r30, 0x36	; 54
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	28 2f       	mov	r18, r24
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	88 2f       	mov	r24, r24
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a9 01       	movw	r20, r18
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <GPIO_readPin+0xae>
    2d98:	55 95       	asr	r21
    2d9a:	47 95       	ror	r20
    2d9c:	8a 95       	dec	r24
    2d9e:	e2 f7       	brpl	.-8      	; 0x2d98 <GPIO_readPin+0xaa>
    2da0:	ca 01       	movw	r24, r20
    2da2:	81 70       	andi	r24, 0x01	; 1
    2da4:	90 70       	andi	r25, 0x00	; 0
    2da6:	88 23       	and	r24, r24
    2da8:	19 f0       	breq	.+6      	; 0x2db0 <GPIO_readPin+0xc2>
				value = LOGIC_HIGH;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	89 83       	std	Y+1, r24	; 0x01
    2dae:	31 c0       	rjmp	.+98     	; 0x2e12 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    2db0:	19 82       	std	Y+1, r1	; 0x01
    2db2:	2f c0       	rjmp	.+94     	; 0x2e12 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC, pin_num)) {
    2db4:	e3 e3       	ldi	r30, 0x33	; 51
    2db6:	f0 e0       	ldi	r31, 0x00	; 0
    2db8:	80 81       	ld	r24, Z
    2dba:	28 2f       	mov	r18, r24
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	88 2f       	mov	r24, r24
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	a9 01       	movw	r20, r18
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <GPIO_readPin+0xde>
    2dc8:	55 95       	asr	r21
    2dca:	47 95       	ror	r20
    2dcc:	8a 95       	dec	r24
    2dce:	e2 f7       	brpl	.-8      	; 0x2dc8 <GPIO_readPin+0xda>
    2dd0:	ca 01       	movw	r24, r20
    2dd2:	81 70       	andi	r24, 0x01	; 1
    2dd4:	90 70       	andi	r25, 0x00	; 0
    2dd6:	88 23       	and	r24, r24
    2dd8:	19 f0       	breq	.+6      	; 0x2de0 <GPIO_readPin+0xf2>
				value = LOGIC_HIGH;
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	89 83       	std	Y+1, r24	; 0x01
    2dde:	19 c0       	rjmp	.+50     	; 0x2e12 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    2de0:	19 82       	std	Y+1, r1	; 0x01
    2de2:	17 c0       	rjmp	.+46     	; 0x2e12 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND, pin_num)) {
    2de4:	e0 e3       	ldi	r30, 0x30	; 48
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	28 2f       	mov	r18, r24
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	8b 81       	ldd	r24, Y+3	; 0x03
    2df0:	88 2f       	mov	r24, r24
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	a9 01       	movw	r20, r18
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <GPIO_readPin+0x10e>
    2df8:	55 95       	asr	r21
    2dfa:	47 95       	ror	r20
    2dfc:	8a 95       	dec	r24
    2dfe:	e2 f7       	brpl	.-8      	; 0x2df8 <GPIO_readPin+0x10a>
    2e00:	ca 01       	movw	r24, r20
    2e02:	81 70       	andi	r24, 0x01	; 1
    2e04:	90 70       	andi	r25, 0x00	; 0
    2e06:	88 23       	and	r24, r24
    2e08:	19 f0       	breq	.+6      	; 0x2e10 <GPIO_readPin+0x122>
				value = LOGIC_HIGH;
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	01 c0       	rjmp	.+2      	; 0x2e12 <GPIO_readPin+0x124>
			} else {
				value = LOGIC_LOW;
    2e10:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e14:	0f 90       	pop	r0
    2e16:	0f 90       	pop	r0
    2e18:	0f 90       	pop	r0
    2e1a:	0f 90       	pop	r0
    2e1c:	0f 90       	pop	r0
    2e1e:	cf 91       	pop	r28
    2e20:	df 91       	pop	r29
    2e22:	08 95       	ret

00002e24 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction) {
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	00 d0       	rcall	.+0      	; 0x2e2a <GPIO_setupPortDirection+0x6>
    2e2a:	00 d0       	rcall	.+0      	; 0x2e2c <GPIO_setupPortDirection+0x8>
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	89 83       	std	Y+1, r24	; 0x01
    2e32:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
    2e36:	84 30       	cpi	r24, 0x04	; 4
    2e38:	90 f5       	brcc	.+100    	; 0x2e9e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	} else {
		/* Setup the port direction as required */
		switch (port_num) {
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	3c 83       	std	Y+4, r19	; 0x04
    2e42:	2b 83       	std	Y+3, r18	; 0x03
    2e44:	8b 81       	ldd	r24, Y+3	; 0x03
    2e46:	9c 81       	ldd	r25, Y+4	; 0x04
    2e48:	81 30       	cpi	r24, 0x01	; 1
    2e4a:	91 05       	cpc	r25, r1
    2e4c:	d1 f0       	breq	.+52     	; 0x2e82 <GPIO_setupPortDirection+0x5e>
    2e4e:	2b 81       	ldd	r18, Y+3	; 0x03
    2e50:	3c 81       	ldd	r19, Y+4	; 0x04
    2e52:	22 30       	cpi	r18, 0x02	; 2
    2e54:	31 05       	cpc	r19, r1
    2e56:	2c f4       	brge	.+10     	; 0x2e62 <GPIO_setupPortDirection+0x3e>
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	61 f0       	breq	.+24     	; 0x2e78 <GPIO_setupPortDirection+0x54>
    2e60:	1e c0       	rjmp	.+60     	; 0x2e9e <GPIO_setupPortDirection+0x7a>
    2e62:	2b 81       	ldd	r18, Y+3	; 0x03
    2e64:	3c 81       	ldd	r19, Y+4	; 0x04
    2e66:	22 30       	cpi	r18, 0x02	; 2
    2e68:	31 05       	cpc	r19, r1
    2e6a:	81 f0       	breq	.+32     	; 0x2e8c <GPIO_setupPortDirection+0x68>
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e70:	83 30       	cpi	r24, 0x03	; 3
    2e72:	91 05       	cpc	r25, r1
    2e74:	81 f0       	breq	.+32     	; 0x2e96 <GPIO_setupPortDirection+0x72>
    2e76:	13 c0       	rjmp	.+38     	; 0x2e9e <GPIO_setupPortDirection+0x7a>
		case PORTA_ID:
			DDRA = direction;
    2e78:	ea e3       	ldi	r30, 0x3A	; 58
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7e:	80 83       	st	Z, r24
    2e80:	0e c0       	rjmp	.+28     	; 0x2e9e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2e82:	e7 e3       	ldi	r30, 0x37	; 55
    2e84:	f0 e0       	ldi	r31, 0x00	; 0
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	80 83       	st	Z, r24
    2e8a:	09 c0       	rjmp	.+18     	; 0x2e9e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2e8c:	e4 e3       	ldi	r30, 0x34	; 52
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	80 83       	st	Z, r24
    2e94:	04 c0       	rjmp	.+8      	; 0x2e9e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2e96:	e1 e3       	ldi	r30, 0x31	; 49
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	80 83       	st	Z, r24
			break;
		}
	}
}
    2e9e:	0f 90       	pop	r0
    2ea0:	0f 90       	pop	r0
    2ea2:	0f 90       	pop	r0
    2ea4:	0f 90       	pop	r0
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value) {
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	00 d0       	rcall	.+0      	; 0x2eb2 <GPIO_writePort+0x6>
    2eb2:	00 d0       	rcall	.+0      	; 0x2eb4 <GPIO_writePort+0x8>
    2eb4:	cd b7       	in	r28, 0x3d	; 61
    2eb6:	de b7       	in	r29, 0x3e	; 62
    2eb8:	89 83       	std	Y+1, r24	; 0x01
    2eba:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	84 30       	cpi	r24, 0x04	; 4
    2ec0:	90 f5       	brcc	.+100    	; 0x2f26 <GPIO_writePort+0x7a>
		/* Do Nothing */
	} else {
		/* write the port direction as required */
		switch (port_num) {
    2ec2:	89 81       	ldd	r24, Y+1	; 0x01
    2ec4:	28 2f       	mov	r18, r24
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	3c 83       	std	Y+4, r19	; 0x04
    2eca:	2b 83       	std	Y+3, r18	; 0x03
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed0:	81 30       	cpi	r24, 0x01	; 1
    2ed2:	91 05       	cpc	r25, r1
    2ed4:	d1 f0       	breq	.+52     	; 0x2f0a <GPIO_writePort+0x5e>
    2ed6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ed8:	3c 81       	ldd	r19, Y+4	; 0x04
    2eda:	22 30       	cpi	r18, 0x02	; 2
    2edc:	31 05       	cpc	r19, r1
    2ede:	2c f4       	brge	.+10     	; 0x2eea <GPIO_writePort+0x3e>
    2ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	61 f0       	breq	.+24     	; 0x2f00 <GPIO_writePort+0x54>
    2ee8:	1e c0       	rjmp	.+60     	; 0x2f26 <GPIO_writePort+0x7a>
    2eea:	2b 81       	ldd	r18, Y+3	; 0x03
    2eec:	3c 81       	ldd	r19, Y+4	; 0x04
    2eee:	22 30       	cpi	r18, 0x02	; 2
    2ef0:	31 05       	cpc	r19, r1
    2ef2:	81 f0       	breq	.+32     	; 0x2f14 <GPIO_writePort+0x68>
    2ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef8:	83 30       	cpi	r24, 0x03	; 3
    2efa:	91 05       	cpc	r25, r1
    2efc:	81 f0       	breq	.+32     	; 0x2f1e <GPIO_writePort+0x72>
    2efe:	13 c0       	rjmp	.+38     	; 0x2f26 <GPIO_writePort+0x7a>
		case PORTA_ID:
			PORTA = value;
    2f00:	eb e3       	ldi	r30, 0x3B	; 59
    2f02:	f0 e0       	ldi	r31, 0x00	; 0
    2f04:	8a 81       	ldd	r24, Y+2	; 0x02
    2f06:	80 83       	st	Z, r24
    2f08:	0e c0       	rjmp	.+28     	; 0x2f26 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2f0a:	e8 e3       	ldi	r30, 0x38	; 56
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f10:	80 83       	st	Z, r24
    2f12:	09 c0       	rjmp	.+18     	; 0x2f26 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2f14:	e5 e3       	ldi	r30, 0x35	; 53
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1a:	80 83       	st	Z, r24
    2f1c:	04 c0       	rjmp	.+8      	; 0x2f26 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2f1e:	e2 e3       	ldi	r30, 0x32	; 50
    2f20:	f0 e0       	ldi	r31, 0x00	; 0
    2f22:	8a 81       	ldd	r24, Y+2	; 0x02
    2f24:	80 83       	st	Z, r24
			break;
		}
	}

}
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	08 95       	ret

00002f34 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num) {
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <GPIO_readPort+0x6>
    2f3a:	00 d0       	rcall	.+0      	; 0x2f3c <GPIO_readPort+0x8>
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = 0;
    2f42:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS) {
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	84 30       	cpi	r24, 0x04	; 4
    2f48:	90 f5       	brcc	.+100    	; 0x2fae <GPIO_readPort+0x7a>
		/* Do Nothing */
	} else {
		/* read the port value as required */
		switch (port_num) {
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	3c 83       	std	Y+4, r19	; 0x04
    2f52:	2b 83       	std	Y+3, r18	; 0x03
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	9c 81       	ldd	r25, Y+4	; 0x04
    2f58:	81 30       	cpi	r24, 0x01	; 1
    2f5a:	91 05       	cpc	r25, r1
    2f5c:	d1 f0       	breq	.+52     	; 0x2f92 <GPIO_readPort+0x5e>
    2f5e:	2b 81       	ldd	r18, Y+3	; 0x03
    2f60:	3c 81       	ldd	r19, Y+4	; 0x04
    2f62:	22 30       	cpi	r18, 0x02	; 2
    2f64:	31 05       	cpc	r19, r1
    2f66:	2c f4       	brge	.+10     	; 0x2f72 <GPIO_readPort+0x3e>
    2f68:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	61 f0       	breq	.+24     	; 0x2f88 <GPIO_readPort+0x54>
    2f70:	1e c0       	rjmp	.+60     	; 0x2fae <GPIO_readPort+0x7a>
    2f72:	2b 81       	ldd	r18, Y+3	; 0x03
    2f74:	3c 81       	ldd	r19, Y+4	; 0x04
    2f76:	22 30       	cpi	r18, 0x02	; 2
    2f78:	31 05       	cpc	r19, r1
    2f7a:	81 f0       	breq	.+32     	; 0x2f9c <GPIO_readPort+0x68>
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f80:	83 30       	cpi	r24, 0x03	; 3
    2f82:	91 05       	cpc	r25, r1
    2f84:	81 f0       	breq	.+32     	; 0x2fa6 <GPIO_readPort+0x72>
    2f86:	13 c0       	rjmp	.+38     	; 0x2fae <GPIO_readPort+0x7a>
		case PORTA_ID:
			value = PINA;
    2f88:	e9 e3       	ldi	r30, 0x39	; 57
    2f8a:	f0 e0       	ldi	r31, 0x00	; 0
    2f8c:	80 81       	ld	r24, Z
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	0e c0       	rjmp	.+28     	; 0x2fae <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2f92:	e6 e3       	ldi	r30, 0x36	; 54
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	89 83       	std	Y+1, r24	; 0x01
    2f9a:	09 c0       	rjmp	.+18     	; 0x2fae <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2f9c:	e3 e3       	ldi	r30, 0x33	; 51
    2f9e:	f0 e0       	ldi	r31, 0x00	; 0
    2fa0:	80 81       	ld	r24, Z
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	04 c0       	rjmp	.+8      	; 0x2fae <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2fa6:	e0 e3       	ldi	r30, 0x30	; 48
    2fa8:	f0 e0       	ldi	r31, 0x00	; 0
    2faa:	80 81       	ld	r24, Z
    2fac:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    2fae:	89 81       	ldd	r24, Y+1	; 0x01

}
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	0f 90       	pop	r0
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	08 95       	ret

00002fbe <SetPassword>:
 * Function to set or reset the password
 * the user enters two passwords and controller sends them the control ECU and waits for the result
 * if they are matched the program continues
 * else the whole process is repeated again
 */
void SetPassword() {
    2fbe:	df 93       	push	r29
    2fc0:	cf 93       	push	r28
    2fc2:	cd b7       	in	r28, 0x3d	; 61
    2fc4:	de b7       	in	r29, 0x3e	; 62
    2fc6:	60 97       	sbiw	r28, 0x10	; 16
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	cd bf       	out	0x3d, r28	; 61
	LCD_ClearDisplay();
    2fd2:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
	LCD_displayString("plz enter pass:");
    2fd6:	80 e6       	ldi	r24, 0x60	; 96
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
	LCD_SetCursor(1, 0);
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	60 e0       	ldi	r22, 0x00	; 0
    2fe2:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
    2fe6:	a7 c0       	rjmp	.+334    	; 0x3136 <SetPassword+0x178>
	/*Enters a while loop until the user enters two matched passwords*/
	while (matchingPasswordsFlag != 'A') {
		/*taking the input from the keypad*/
		input = KEYPAD_getPressedKey();
    2fe8:	0e 94 04 13 	call	0x2608	; 0x2608 <KEYPAD_getPressedKey>
    2fec:	80 93 27 02 	sts	0x0227, r24
		switch (input) {
    2ff0:	80 91 27 02 	lds	r24, 0x0227
    2ff4:	28 2f       	mov	r18, r24
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	38 8b       	std	Y+16, r19	; 0x10
    2ffa:	2f 87       	std	Y+15, r18	; 0x0f
    2ffc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ffe:	98 89       	ldd	r25, Y+16	; 0x10
    3000:	99 23       	and	r25, r25
    3002:	0c f4       	brge	.+2      	; 0x3006 <SetPassword+0x48>
    3004:	98 c0       	rjmp	.+304    	; 0x3136 <SetPassword+0x178>
    3006:	2f 85       	ldd	r18, Y+15	; 0x0f
    3008:	38 89       	ldd	r19, Y+16	; 0x10
    300a:	2a 30       	cpi	r18, 0x0A	; 10
    300c:	31 05       	cpc	r19, r1
    300e:	34 f0       	brlt	.+12     	; 0x301c <SetPassword+0x5e>
    3010:	8f 85       	ldd	r24, Y+15	; 0x0f
    3012:	98 89       	ldd	r25, Y+16	; 0x10
    3014:	8d 30       	cpi	r24, 0x0D	; 13
    3016:	91 05       	cpc	r25, r1
    3018:	c9 f1       	breq	.+114    	; 0x308c <SetPassword+0xce>
    301a:	8d c0       	rjmp	.+282    	; 0x3136 <SetPassword+0x178>
		case 7:
		case 8:
		case 9:
		case 0:
			/*checks which password array to store in depending on the input flag*/
			if (inputFlag == FALSE && counter < 5) {
    301c:	80 91 23 02 	lds	r24, 0x0223
    3020:	88 23       	and	r24, r24
    3022:	b9 f4       	brne	.+46     	; 0x3052 <SetPassword+0x94>
    3024:	80 91 22 02 	lds	r24, 0x0222
    3028:	85 30       	cpi	r24, 0x05	; 5
    302a:	98 f4       	brcc	.+38     	; 0x3052 <SetPassword+0x94>
				/*converting the input value to ascii and storing it in the password array*/
				passwordArray[counter++] = input + '0';
    302c:	90 91 22 02 	lds	r25, 0x0222
    3030:	29 2f       	mov	r18, r25
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	80 91 27 02 	lds	r24, 0x0227
    3038:	80 5d       	subi	r24, 0xD0	; 208
    303a:	f9 01       	movw	r30, r18
    303c:	e2 5d       	subi	r30, 0xD2	; 210
    303e:	fd 4f       	sbci	r31, 0xFD	; 253
    3040:	80 83       	st	Z, r24
    3042:	89 2f       	mov	r24, r25
    3044:	8f 5f       	subi	r24, 0xFF	; 255
    3046:	80 93 22 02 	sts	0x0222, r24
				LCD_displayCharacter('*');
    304a:	8a e2       	ldi	r24, 0x2A	; 42
    304c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayCharacter>
    3050:	72 c0       	rjmp	.+228    	; 0x3136 <SetPassword+0x178>
			} else if (inputFlag == TRUE && counter < 5) {
    3052:	80 91 23 02 	lds	r24, 0x0223
    3056:	81 30       	cpi	r24, 0x01	; 1
    3058:	09 f0       	breq	.+2      	; 0x305c <SetPassword+0x9e>
    305a:	6d c0       	rjmp	.+218    	; 0x3136 <SetPassword+0x178>
    305c:	80 91 22 02 	lds	r24, 0x0222
    3060:	85 30       	cpi	r24, 0x05	; 5
    3062:	08 f0       	brcs	.+2      	; 0x3066 <SetPassword+0xa8>
    3064:	68 c0       	rjmp	.+208    	; 0x3136 <SetPassword+0x178>
				/*converting the input value to ascii and storing it in the re entered password array*/
				reEnteredPasswordArray[counter++] = input + '0';
    3066:	90 91 22 02 	lds	r25, 0x0222
    306a:	29 2f       	mov	r18, r25
    306c:	30 e0       	ldi	r19, 0x00	; 0
    306e:	80 91 27 02 	lds	r24, 0x0227
    3072:	80 5d       	subi	r24, 0xD0	; 208
    3074:	f9 01       	movw	r30, r18
    3076:	e8 5d       	subi	r30, 0xD8	; 216
    3078:	fd 4f       	sbci	r31, 0xFD	; 253
    307a:	80 83       	st	Z, r24
    307c:	89 2f       	mov	r24, r25
    307e:	8f 5f       	subi	r24, 0xFF	; 255
    3080:	80 93 22 02 	sts	0x0222, r24
				LCD_displayCharacter('*');
    3084:	8a e2       	ldi	r24, 0x2A	; 42
    3086:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayCharacter>
    308a:	55 c0       	rjmp	.+170    	; 0x3136 <SetPassword+0x178>
		case 13:
			/*
			 * depending on which array is filled:
			 * if it is the first array the user is asked to re enter the same password
			 */
			if (inputFlag == FALSE) {
    308c:	80 91 23 02 	lds	r24, 0x0223
    3090:	88 23       	and	r24, r24
    3092:	e9 f4       	brne	.+58     	; 0x30ce <SetPassword+0x110>
				/*
				 * Prepare the program to take the re entered password by reseting the counter
				 * clearing display and print the message to re enter the same password
				 */
				inputFlag = TRUE;
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	80 93 23 02 	sts	0x0223, r24
				/*fill the last element by '# to prepare it for sending'*/
				passwordArray[counter] = '#';
    309a:	80 91 22 02 	lds	r24, 0x0222
    309e:	88 2f       	mov	r24, r24
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	fc 01       	movw	r30, r24
    30a4:	e2 5d       	subi	r30, 0xD2	; 210
    30a6:	fd 4f       	sbci	r31, 0xFD	; 253
    30a8:	83 e2       	ldi	r24, 0x23	; 35
    30aa:	80 83       	st	Z, r24
				counter = 0;
    30ac:	10 92 22 02 	sts	0x0222, r1
				LCD_ClearDisplay();
    30b0:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
				LCD_displayString("plz re-enter the ");
    30b4:	80 e7       	ldi	r24, 0x70	; 112
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
				LCD_SetCursor(1, 0);
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
				LCD_displayString("same pass: ");
    30c4:	82 e8       	ldi	r24, 0x82	; 130
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
    30cc:	34 c0       	rjmp	.+104    	; 0x3136 <SetPassword+0x178>
				 *if it is the second array the program resets the flags and
				 *sends the passwords to the control ECU and waits for the results
				 */
			} else {
				/*fill the last element by '# to prepare it for sending'*/
				reEnteredPasswordArray[counter] = '#';
    30ce:	80 91 22 02 	lds	r24, 0x0222
    30d2:	88 2f       	mov	r24, r24
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	fc 01       	movw	r30, r24
    30d8:	e8 5d       	subi	r30, 0xD8	; 216
    30da:	fd 4f       	sbci	r31, 0xFD	; 253
    30dc:	83 e2       	ldi	r24, 0x23	; 35
    30de:	80 83       	st	Z, r24
				counter = 0;
    30e0:	10 92 22 02 	sts	0x0222, r1
				inputFlag = FALSE;
    30e4:	10 92 23 02 	sts	0x0223, r1
				LCD_ClearDisplay();
    30e8:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
				/*send 'C' to the control ECU to inform it that the passwords will be sent*/
				UART_sendData('C');
    30ec:	83 e4       	ldi	r24, 0x43	; 67
    30ee:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <UART_sendData>
				/*send the first password*/
				UART_sendString(passwordArray);
    30f2:	8e e2       	ldi	r24, 0x2E	; 46
    30f4:	92 e0       	ldi	r25, 0x02	; 2
    30f6:	0e 94 12 08 	call	0x1024	; 0x1024 <UART_sendString>
				/*wait for the control ECU to send 'C' to send the second password*/
				while (UART_receiveData() != 'C')
    30fa:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    30fe:	83 34       	cpi	r24, 0x43	; 67
    3100:	e1 f7       	brne	.-8      	; 0x30fa <SetPassword+0x13c>
					;
				/*send the second password*/
				UART_sendString(reEnteredPasswordArray);
    3102:	88 e2       	ldi	r24, 0x28	; 40
    3104:	92 e0       	ldi	r25, 0x02	; 2
    3106:	0e 94 12 08 	call	0x1024	; 0x1024 <UART_sendString>
				/*wait for the control ECU to send 'C' to receive the result*/
				while (UART_receiveData() != 'C')
    310a:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    310e:	83 34       	cpi	r24, 0x43	; 67
    3110:	e1 f7       	brne	.-8      	; 0x310a <SetPassword+0x14c>
					;
				matchingPasswordsFlag = UART_receiveData();
    3112:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    3116:	80 93 24 02 	sts	0x0224, r24
				/*if the two passwords are not matched result = 'B' the whole process is repeated again*/
				if (matchingPasswordsFlag == 'B') {
    311a:	80 91 24 02 	lds	r24, 0x0224
    311e:	82 34       	cpi	r24, 0x42	; 66
    3120:	51 f4       	brne	.+20     	; 0x3136 <SetPassword+0x178>
					LCD_ClearDisplay();
    3122:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
					LCD_displayString("plz enter pass:");
    3126:	80 e6       	ldi	r24, 0x60	; 96
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
					LCD_SetCursor(1, 0);
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	60 e0       	ldi	r22, 0x00	; 0
    3132:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
void SetPassword() {
	LCD_ClearDisplay();
	LCD_displayString("plz enter pass:");
	LCD_SetCursor(1, 0);
	/*Enters a while loop until the user enters two matched passwords*/
	while (matchingPasswordsFlag != 'A') {
    3136:	80 91 24 02 	lds	r24, 0x0224
    313a:	81 34       	cpi	r24, 0x41	; 65
    313c:	09 f0       	breq	.+2      	; 0x3140 <SetPassword+0x182>
    313e:	54 cf       	rjmp	.-344    	; 0x2fe8 <SetPassword+0x2a>
		default:
			break;
		}
	}
	/*display a message to inform the user that the password has been saved*/
	LCD_displayString("Password Saved");
    3140:	8e e8       	ldi	r24, 0x8E	; 142
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
	LCD_SetCursor(1, 2);
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	62 e0       	ldi	r22, 0x02	; 2
    314c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
	LCD_displayString("Successfully");
    3150:	8d e9       	ldi	r24, 0x9D	; 157
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	aa e7       	ldi	r26, 0x7A	; 122
    315e:	b4 e4       	ldi	r27, 0x44	; 68
    3160:	8b 87       	std	Y+11, r24	; 0x0b
    3162:	9c 87       	std	Y+12, r25	; 0x0c
    3164:	ad 87       	std	Y+13, r26	; 0x0d
    3166:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3168:	6b 85       	ldd	r22, Y+11	; 0x0b
    316a:	7c 85       	ldd	r23, Y+12	; 0x0c
    316c:	8d 85       	ldd	r24, Y+13	; 0x0d
    316e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	4a ef       	ldi	r20, 0xFA	; 250
    3176:	54 e4       	ldi	r21, 0x44	; 68
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	8f 83       	std	Y+7, r24	; 0x07
    3182:	98 87       	std	Y+8, r25	; 0x08
    3184:	a9 87       	std	Y+9, r26	; 0x09
    3186:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3188:	6f 81       	ldd	r22, Y+7	; 0x07
    318a:	78 85       	ldd	r23, Y+8	; 0x08
    318c:	89 85       	ldd	r24, Y+9	; 0x09
    318e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e8       	ldi	r20, 0x80	; 128
    3196:	5f e3       	ldi	r21, 0x3F	; 63
    3198:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    319c:	88 23       	and	r24, r24
    319e:	2c f4       	brge	.+10     	; 0x31aa <SetPassword+0x1ec>
		__ticks = 1;
    31a0:	81 e0       	ldi	r24, 0x01	; 1
    31a2:	90 e0       	ldi	r25, 0x00	; 0
    31a4:	9e 83       	std	Y+6, r25	; 0x06
    31a6:	8d 83       	std	Y+5, r24	; 0x05
    31a8:	3f c0       	rjmp	.+126    	; 0x3228 <SetPassword+0x26a>
	else if (__tmp > 65535)
    31aa:	6f 81       	ldd	r22, Y+7	; 0x07
    31ac:	78 85       	ldd	r23, Y+8	; 0x08
    31ae:	89 85       	ldd	r24, Y+9	; 0x09
    31b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    31b2:	20 e0       	ldi	r18, 0x00	; 0
    31b4:	3f ef       	ldi	r19, 0xFF	; 255
    31b6:	4f e7       	ldi	r20, 0x7F	; 127
    31b8:	57 e4       	ldi	r21, 0x47	; 71
    31ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31be:	18 16       	cp	r1, r24
    31c0:	4c f5       	brge	.+82     	; 0x3214 <SetPassword+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    31c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    31c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	40 e2       	ldi	r20, 0x20	; 32
    31d0:	51 e4       	ldi	r21, 0x41	; 65
    31d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e2:	dc 01       	movw	r26, r24
    31e4:	cb 01       	movw	r24, r22
    31e6:	9e 83       	std	Y+6, r25	; 0x06
    31e8:	8d 83       	std	Y+5, r24	; 0x05
    31ea:	0f c0       	rjmp	.+30     	; 0x320a <SetPassword+0x24c>
    31ec:	88 ec       	ldi	r24, 0xC8	; 200
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	9c 83       	std	Y+4, r25	; 0x04
    31f2:	8b 83       	std	Y+3, r24	; 0x03
    31f4:	8b 81       	ldd	r24, Y+3	; 0x03
    31f6:	9c 81       	ldd	r25, Y+4	; 0x04
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	f1 f7       	brne	.-4      	; 0x31f8 <SetPassword+0x23a>
    31fc:	9c 83       	std	Y+4, r25	; 0x04
    31fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3200:	8d 81       	ldd	r24, Y+5	; 0x05
    3202:	9e 81       	ldd	r25, Y+6	; 0x06
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	9e 83       	std	Y+6, r25	; 0x06
    3208:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320a:	8d 81       	ldd	r24, Y+5	; 0x05
    320c:	9e 81       	ldd	r25, Y+6	; 0x06
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	69 f7       	brne	.-38     	; 0x31ec <SetPassword+0x22e>
    3212:	14 c0       	rjmp	.+40     	; 0x323c <SetPassword+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3214:	6f 81       	ldd	r22, Y+7	; 0x07
    3216:	78 85       	ldd	r23, Y+8	; 0x08
    3218:	89 85       	ldd	r24, Y+9	; 0x09
    321a:	9a 85       	ldd	r25, Y+10	; 0x0a
    321c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	9e 83       	std	Y+6, r25	; 0x06
    3226:	8d 83       	std	Y+5, r24	; 0x05
    3228:	8d 81       	ldd	r24, Y+5	; 0x05
    322a:	9e 81       	ldd	r25, Y+6	; 0x06
    322c:	9a 83       	std	Y+2, r25	; 0x02
    322e:	89 83       	std	Y+1, r24	; 0x01
    3230:	89 81       	ldd	r24, Y+1	; 0x01
    3232:	9a 81       	ldd	r25, Y+2	; 0x02
    3234:	01 97       	sbiw	r24, 0x01	; 1
    3236:	f1 f7       	brne	.-4      	; 0x3234 <SetPassword+0x276>
    3238:	9a 83       	std	Y+2, r25	; 0x02
    323a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    323c:	60 96       	adiw	r28, 0x10	; 16
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	cd bf       	out	0x3d, r28	; 61
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <main>:

/*******************************************************************************
 *                      		 Main      			                           *
 *******************************************************************************/
int main(void) {
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	e8 97       	sbiw	r28, 0x38	; 56
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	f8 94       	cli
    325c:	de bf       	out	0x3e, r29	; 62
    325e:	0f be       	out	0x3f, r0	; 63
    3260:	cd bf       	out	0x3d, r28	; 61
	 * Modules and devices Initializations
	 * Timer, UART and LCD
	 * 1. Set UART frame to 8 bit data, no parity bit and single stop bit
	 * Baud rate to 9600
	 */
	UART_ConfigType uartConfig = { EIGHT_BITS, NO_PARITY, ONE_BIT, RATE_9600 };
    3262:	9e 01       	movw	r18, r28
    3264:	2c 5d       	subi	r18, 0xDC	; 220
    3266:	3f 4f       	sbci	r19, 0xFF	; 255
    3268:	3d ab       	std	Y+53, r19	; 0x35
    326a:	2c ab       	std	Y+52, r18	; 0x34
    326c:	88 e1       	ldi	r24, 0x18	; 24
    326e:	92 e0       	ldi	r25, 0x02	; 2
    3270:	9f ab       	std	Y+55, r25	; 0x37
    3272:	8e ab       	std	Y+54, r24	; 0x36
    3274:	97 e0       	ldi	r25, 0x07	; 7
    3276:	98 af       	std	Y+56, r25	; 0x38
    3278:	ee a9       	ldd	r30, Y+54	; 0x36
    327a:	ff a9       	ldd	r31, Y+55	; 0x37
    327c:	00 80       	ld	r0, Z
    327e:	2e a9       	ldd	r18, Y+54	; 0x36
    3280:	3f a9       	ldd	r19, Y+55	; 0x37
    3282:	2f 5f       	subi	r18, 0xFF	; 255
    3284:	3f 4f       	sbci	r19, 0xFF	; 255
    3286:	3f ab       	std	Y+55, r19	; 0x37
    3288:	2e ab       	std	Y+54, r18	; 0x36
    328a:	ec a9       	ldd	r30, Y+52	; 0x34
    328c:	fd a9       	ldd	r31, Y+53	; 0x35
    328e:	00 82       	st	Z, r0
    3290:	2c a9       	ldd	r18, Y+52	; 0x34
    3292:	3d a9       	ldd	r19, Y+53	; 0x35
    3294:	2f 5f       	subi	r18, 0xFF	; 255
    3296:	3f 4f       	sbci	r19, 0xFF	; 255
    3298:	3d ab       	std	Y+53, r19	; 0x35
    329a:	2c ab       	std	Y+52, r18	; 0x34
    329c:	38 ad       	ldd	r19, Y+56	; 0x38
    329e:	31 50       	subi	r19, 0x01	; 1
    32a0:	38 af       	std	Y+56, r19	; 0x38
    32a2:	88 ad       	ldd	r24, Y+56	; 0x38
    32a4:	88 23       	and	r24, r24
    32a6:	41 f7       	brne	.-48     	; 0x3278 <main+0x2a>
	UART_init(&uartConfig);
    32a8:	ce 01       	movw	r24, r28
    32aa:	84 96       	adiw	r24, 0x24	; 36
    32ac:	0e 94 75 07 	call	0xeea	; 0xeea <UART_init>
	/* 2. Initializing LCD*/
	LCD_Init();
    32b0:	0e 94 83 09 	call	0x1306	; 0x1306 <LCD_Init>
	 * first time flag to check whether the user used the program before or not
	 * first input counter to mark the indices of the input password array
	 * check data to store the result whether the passwords are matched are not
	 * repeat flag to repeat the process when the user enters wrong password
	 */
	uint8 optionChoice, firstTimeFlag, inputCounter = 0, checkData, repeatFlag =
    32b4:	19 a2       	std	Y+33, r1	; 0x21
			FALSE, numberOfWrongPasswords = 0, truePassFlag = FALSE;
    32b6:	1f 8e       	std	Y+31, r1	; 0x1f
    32b8:	1e 8e       	std	Y+30, r1	; 0x1e
    32ba:	1d 8e       	std	Y+29, r1	; 0x1d
	/*String of the password user enters*/
	uint8 inputPassword[7];
	/*send 0xFF to inform control ECU that the initializations are done*/
	UART_sendData(0xFF);
    32bc:	8f ef       	ldi	r24, 0xFF	; 255
    32be:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <UART_sendData>
	/*wait until control ECU sends 'Y' to receive the value of first time flag*/
	while (UART_receiveData() != 'Y')
    32c2:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    32c6:	89 35       	cpi	r24, 0x59	; 89
    32c8:	e1 f7       	brne	.-8      	; 0x32c2 <main+0x74>
		;
	firstTimeFlag = UART_receiveData();
    32ca:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    32ce:	8a a3       	std	Y+34, r24	; 0x22
	/*if it is the first time for the user asks him to set the password*/
	if (firstTimeFlag != 'F')
    32d0:	8a a1       	ldd	r24, Y+34	; 0x22
    32d2:	86 34       	cpi	r24, 0x46	; 70
    32d4:	11 f0       	breq	.+4      	; 0x32da <main+0x8c>
		SetPassword();
    32d6:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <SetPassword>
	/*Human interface code */
	while (1) {
		/*display a message with the choices*/
		LCD_ClearDisplay();
    32da:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
		LCD_displayString("+ : Open Door");
    32de:	8a ea       	ldi	r24, 0xAA	; 170
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
		LCD_SetCursor(1, 0);
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	60 e0       	ldi	r22, 0x00	; 0
    32ea:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
		LCD_displayString("- : Change Pass");
    32ee:	88 eb       	ldi	r24, 0xB8	; 184
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
		optionChoice = KEYPAD_getPressedKey();
    32f6:	0e 94 04 13 	call	0x2608	; 0x2608 <KEYPAD_getPressedKey>
    32fa:	8b a3       	std	Y+35, r24	; 0x23
		/*for either choice asks the user to enter the password*/
		LCD_ClearDisplay();
    32fc:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
		LCD_displayString("plz enter pass:");
    3300:	80 e6       	ldi	r24, 0x60	; 96
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
		LCD_SetCursor(1, 0);
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	60 e0       	ldi	r22, 0x00	; 0
    330c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
		if (optionChoice == '+' || optionChoice == '-') {
    3310:	8b a1       	ldd	r24, Y+35	; 0x23
    3312:	8b 32       	cpi	r24, 0x2B	; 43
    3314:	21 f0       	breq	.+8      	; 0x331e <main+0xd0>
    3316:	8b a1       	ldd	r24, Y+35	; 0x23
    3318:	8d 32       	cpi	r24, 0x2D	; 45
    331a:	09 f0       	breq	.+2      	; 0x331e <main+0xd0>
    331c:	82 c1       	rjmp	.+772    	; 0x3622 <main+0x3d4>
			/*Enters a loop until the user enters the right password*/
			while (1) {
				input = KEYPAD_getPressedKey();
    331e:	0e 94 04 13 	call	0x2608	; 0x2608 <KEYPAD_getPressedKey>
    3322:	80 93 27 02 	sts	0x0227, r24
				switch (input) {
    3326:	80 91 27 02 	lds	r24, 0x0227
    332a:	e8 2f       	mov	r30, r24
    332c:	f0 e0       	ldi	r31, 0x00	; 0
    332e:	fb ab       	std	Y+51, r31	; 0x33
    3330:	ea ab       	std	Y+50, r30	; 0x32
    3332:	2a a9       	ldd	r18, Y+50	; 0x32
    3334:	3b a9       	ldd	r19, Y+51	; 0x33
    3336:	33 23       	and	r19, r19
    3338:	0c f4       	brge	.+2      	; 0x333c <main+0xee>
    333a:	6e c1       	rjmp	.+732    	; 0x3618 <main+0x3ca>
    333c:	8a a9       	ldd	r24, Y+50	; 0x32
    333e:	9b a9       	ldd	r25, Y+51	; 0x33
    3340:	8a 30       	cpi	r24, 0x0A	; 10
    3342:	91 05       	cpc	r25, r1
    3344:	34 f0       	brlt	.+12     	; 0x3352 <main+0x104>
    3346:	ea a9       	ldd	r30, Y+50	; 0x32
    3348:	fb a9       	ldd	r31, Y+51	; 0x33
    334a:	ed 30       	cpi	r30, 0x0D	; 13
    334c:	f1 05       	cpc	r31, r1
    334e:	a9 f0       	breq	.+42     	; 0x337a <main+0x12c>
    3350:	63 c1       	rjmp	.+710    	; 0x3618 <main+0x3ca>
				case 7:
				case 8:
				case 9:
				case 0:
					/*stores the value in the password array*/
					inputPassword[inputCounter] = input + '0';
    3352:	89 a1       	ldd	r24, Y+33	; 0x21
    3354:	28 2f       	mov	r18, r24
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	80 91 27 02 	lds	r24, 0x0227
    335c:	48 2f       	mov	r20, r24
    335e:	40 5d       	subi	r20, 0xD0	; 208
    3360:	ce 01       	movw	r24, r28
    3362:	8b 96       	adiw	r24, 0x2b	; 43
    3364:	fc 01       	movw	r30, r24
    3366:	e2 0f       	add	r30, r18
    3368:	f3 1f       	adc	r31, r19
    336a:	40 83       	st	Z, r20
					inputCounter++;
    336c:	89 a1       	ldd	r24, Y+33	; 0x21
    336e:	8f 5f       	subi	r24, 0xFF	; 255
    3370:	89 a3       	std	Y+33, r24	; 0x21
					/*displaying * instead of the number to insure privacy */
					LCD_displayCharacter('*');
    3372:	8a e2       	ldi	r24, 0x2A	; 42
    3374:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LCD_displayCharacter>
    3378:	4f c1       	rjmp	.+670    	; 0x3618 <main+0x3ca>
					break;
					/*if the users presses enter*/
				case 13:
					/*fill the last element with '#' to prepare the password for sending*/
					inputPassword[inputCounter] = '#';
    337a:	89 a1       	ldd	r24, Y+33	; 0x21
    337c:	28 2f       	mov	r18, r24
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	ce 01       	movw	r24, r28
    3382:	8b 96       	adiw	r24, 0x2b	; 43
    3384:	fc 01       	movw	r30, r24
    3386:	e2 0f       	add	r30, r18
    3388:	f3 1f       	adc	r31, r19
    338a:	83 e2       	ldi	r24, 0x23	; 35
    338c:	80 83       	st	Z, r24
					/*reset the counter*/
					inputCounter = 0;
    338e:	19 a2       	std	Y+33, r1	; 0x21
					/*send 'M' to inform HMI that the password will be sent and will wait for the result*/
					UART_sendData('M');
    3390:	8d e4       	ldi	r24, 0x4D	; 77
    3392:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <UART_sendData>
					/*send the password*/
					UART_sendString(inputPassword);
    3396:	ce 01       	movw	r24, r28
    3398:	8b 96       	adiw	r24, 0x2b	; 43
    339a:	0e 94 12 08 	call	0x1024	; 0x1024 <UART_sendString>
					/*waits until the control ECU send 'Z' to receive the result*/
					while (UART_receiveData() != 'Z')
    339e:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    33a2:	8a 35       	cpi	r24, 0x5A	; 90
    33a4:	e1 f7       	brne	.-8      	; 0x339e <main+0x150>
						;
					checkData = UART_receiveData();
    33a6:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    33aa:	88 a3       	std	Y+32, r24	; 0x20
					LCD_ClearDisplay();
    33ac:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
					/*if the password is right result = 'A' the LCD displays a message and the program proceeds*/
					if (checkData == 'A') {
    33b0:	88 a1       	ldd	r24, Y+32	; 0x20
    33b2:	81 34       	cpi	r24, 0x41	; 65
    33b4:	09 f0       	breq	.+2      	; 0x33b8 <main+0x16a>
    33b6:	7f c0       	rjmp	.+254    	; 0x34b6 <main+0x268>
						LCD_ClearDisplay();
    33b8:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
						LCD_SetCursor(0, 3);
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	63 e0       	ldi	r22, 0x03	; 3
    33c0:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
						LCD_displayString("TRUE PASS");
    33c4:	88 ec       	ldi	r24, 0xC8	; 200
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	aa e7       	ldi	r26, 0x7A	; 122
    33d2:	b4 e4       	ldi	r27, 0x44	; 68
    33d4:	89 8f       	std	Y+25, r24	; 0x19
    33d6:	9a 8f       	std	Y+26, r25	; 0x1a
    33d8:	ab 8f       	std	Y+27, r26	; 0x1b
    33da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33dc:	69 8d       	ldd	r22, Y+25	; 0x19
    33de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	4a ef       	ldi	r20, 0xFA	; 250
    33ea:	54 e4       	ldi	r21, 0x44	; 68
    33ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	8d 8b       	std	Y+21, r24	; 0x15
    33f6:	9e 8b       	std	Y+22, r25	; 0x16
    33f8:	af 8b       	std	Y+23, r26	; 0x17
    33fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    33fc:	6d 89       	ldd	r22, Y+21	; 0x15
    33fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3400:	8f 89       	ldd	r24, Y+23	; 0x17
    3402:	98 8d       	ldd	r25, Y+24	; 0x18
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	40 e8       	ldi	r20, 0x80	; 128
    340a:	5f e3       	ldi	r21, 0x3F	; 63
    340c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3410:	88 23       	and	r24, r24
    3412:	2c f4       	brge	.+10     	; 0x341e <main+0x1d0>
		__ticks = 1;
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	9c 8b       	std	Y+20, r25	; 0x14
    341a:	8b 8b       	std	Y+19, r24	; 0x13
    341c:	3f c0       	rjmp	.+126    	; 0x349c <main+0x24e>
	else if (__tmp > 65535)
    341e:	6d 89       	ldd	r22, Y+21	; 0x15
    3420:	7e 89       	ldd	r23, Y+22	; 0x16
    3422:	8f 89       	ldd	r24, Y+23	; 0x17
    3424:	98 8d       	ldd	r25, Y+24	; 0x18
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	3f ef       	ldi	r19, 0xFF	; 255
    342a:	4f e7       	ldi	r20, 0x7F	; 127
    342c:	57 e4       	ldi	r21, 0x47	; 71
    342e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3432:	18 16       	cp	r1, r24
    3434:	4c f5       	brge	.+82     	; 0x3488 <main+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3436:	69 8d       	ldd	r22, Y+25	; 0x19
    3438:	7a 8d       	ldd	r23, Y+26	; 0x1a
    343a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    343c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	40 e2       	ldi	r20, 0x20	; 32
    3444:	51 e4       	ldi	r21, 0x41	; 65
    3446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	bc 01       	movw	r22, r24
    3450:	cd 01       	movw	r24, r26
    3452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	9c 8b       	std	Y+20, r25	; 0x14
    345c:	8b 8b       	std	Y+19, r24	; 0x13
    345e:	0f c0       	rjmp	.+30     	; 0x347e <main+0x230>
    3460:	88 ec       	ldi	r24, 0xC8	; 200
    3462:	90 e0       	ldi	r25, 0x00	; 0
    3464:	9a 8b       	std	Y+18, r25	; 0x12
    3466:	89 8b       	std	Y+17, r24	; 0x11
    3468:	89 89       	ldd	r24, Y+17	; 0x11
    346a:	9a 89       	ldd	r25, Y+18	; 0x12
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	f1 f7       	brne	.-4      	; 0x346c <main+0x21e>
    3470:	9a 8b       	std	Y+18, r25	; 0x12
    3472:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3474:	8b 89       	ldd	r24, Y+19	; 0x13
    3476:	9c 89       	ldd	r25, Y+20	; 0x14
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	9c 8b       	std	Y+20, r25	; 0x14
    347c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    347e:	8b 89       	ldd	r24, Y+19	; 0x13
    3480:	9c 89       	ldd	r25, Y+20	; 0x14
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	69 f7       	brne	.-38     	; 0x3460 <main+0x212>
    3486:	14 c0       	rjmp	.+40     	; 0x34b0 <main+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3488:	6d 89       	ldd	r22, Y+21	; 0x15
    348a:	7e 89       	ldd	r23, Y+22	; 0x16
    348c:	8f 89       	ldd	r24, Y+23	; 0x17
    348e:	98 8d       	ldd	r25, Y+24	; 0x18
    3490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3494:	dc 01       	movw	r26, r24
    3496:	cb 01       	movw	r24, r22
    3498:	9c 8b       	std	Y+20, r25	; 0x14
    349a:	8b 8b       	std	Y+19, r24	; 0x13
    349c:	8b 89       	ldd	r24, Y+19	; 0x13
    349e:	9c 89       	ldd	r25, Y+20	; 0x14
    34a0:	98 8b       	std	Y+16, r25	; 0x10
    34a2:	8f 87       	std	Y+15, r24	; 0x0f
    34a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    34a6:	98 89       	ldd	r25, Y+16	; 0x10
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	f1 f7       	brne	.-4      	; 0x34a8 <main+0x25a>
    34ac:	98 8b       	std	Y+16, r25	; 0x10
    34ae:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1000);
						/*set the flag to repeat to proceed the code */
						repeatFlag = TRUE;
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	8f 8f       	std	Y+31, r24	; 0x1f
    34b4:	b1 c0       	rjmp	.+354    	; 0x3618 <main+0x3ca>
						break;
						/*
						 * if the password is not right result = 'B' the LCD displays a message
						 * and increases number of wrong passwords
						 */
					} else if (checkData == 'B') {
    34b6:	88 a1       	ldd	r24, Y+32	; 0x20
    34b8:	82 34       	cpi	r24, 0x42	; 66
    34ba:	09 f0       	breq	.+2      	; 0x34be <main+0x270>
    34bc:	ad c0       	rjmp	.+346    	; 0x3618 <main+0x3ca>
						/*if the user enters wrong password 3 times*/
						if (numberOfWrongPasswords == 2) {
    34be:	8e 8d       	ldd	r24, Y+30	; 0x1e
    34c0:	82 30       	cpi	r24, 0x02	; 2
    34c2:	09 f5       	brne	.+66     	; 0x3506 <main+0x2b8>
							/*reset the number of wrong passwords*/
							numberOfWrongPasswords = 0;
    34c4:	1e 8e       	std	Y+30, r1	; 0x1e
							/*corrupting option choice by 'E' Error occurred to continue the code*/
							optionChoice = 'E';
    34c6:	85 e4       	ldi	r24, 0x45	; 69
    34c8:	8b a3       	std	Y+35, r24	; 0x23
							/*Send 'E' to control ECU to inform it that user entered a wrong password 3 times */
							UART_sendData('E');
    34ca:	85 e4       	ldi	r24, 0x45	; 69
    34cc:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <UART_sendData>
							LCD_ClearDisplay();
    34d0:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
							/*display error message*/
							LCD_SetCursor(0, 5);
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	65 e0       	ldi	r22, 0x05	; 5
    34d8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
							LCD_displayString("ERROR");
    34dc:	82 ed       	ldi	r24, 0xD2	; 210
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
							LCD_SetCursor(1, 2);
    34e4:	81 e0       	ldi	r24, 0x01	; 1
    34e6:	62 e0       	ldi	r22, 0x02	; 2
    34e8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
							LCD_displayString("WRONG PASS");
    34ec:	88 ed       	ldi	r24, 0xD8	; 216
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
							/*wait until the control ECU informs the HMI that the minute is finished*/
							while (UART_receiveData() != 'D')
    34f4:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    34f8:	84 34       	cpi	r24, 0x44	; 68
    34fa:	e1 f7       	brne	.-8      	; 0x34f4 <main+0x2a6>
								;
							LCD_ClearDisplay();
    34fc:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
							/*set repeat flag to exit the loop*/
							repeatFlag = TRUE;
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	8f 8f       	std	Y+31, r24	; 0x1f
    3504:	89 c0       	rjmp	.+274    	; 0x3618 <main+0x3ca>
							break;
						}
						/*if the user enters the wrong password less than 3 times displays a message and continue the code */
						LCD_ClearDisplay();
    3506:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
						LCD_SetCursor(0, 3);
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	63 e0       	ldi	r22, 0x03	; 3
    350e:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
						LCD_displayString("Wrong Pass");
    3512:	83 ee       	ldi	r24, 0xE3	; 227
    3514:	90 e0       	ldi	r25, 0x00	; 0
    3516:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	aa e7       	ldi	r26, 0x7A	; 122
    3520:	b4 e4       	ldi	r27, 0x44	; 68
    3522:	8b 87       	std	Y+11, r24	; 0x0b
    3524:	9c 87       	std	Y+12, r25	; 0x0c
    3526:	ad 87       	std	Y+13, r26	; 0x0d
    3528:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    352a:	6b 85       	ldd	r22, Y+11	; 0x0b
    352c:	7c 85       	ldd	r23, Y+12	; 0x0c
    352e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3530:	9e 85       	ldd	r25, Y+14	; 0x0e
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	4a ef       	ldi	r20, 0xFA	; 250
    3538:	54 e4       	ldi	r21, 0x44	; 68
    353a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	8f 83       	std	Y+7, r24	; 0x07
    3544:	98 87       	std	Y+8, r25	; 0x08
    3546:	a9 87       	std	Y+9, r26	; 0x09
    3548:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    354a:	6f 81       	ldd	r22, Y+7	; 0x07
    354c:	78 85       	ldd	r23, Y+8	; 0x08
    354e:	89 85       	ldd	r24, Y+9	; 0x09
    3550:	9a 85       	ldd	r25, Y+10	; 0x0a
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e8       	ldi	r20, 0x80	; 128
    3558:	5f e3       	ldi	r21, 0x3F	; 63
    355a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    355e:	88 23       	and	r24, r24
    3560:	2c f4       	brge	.+10     	; 0x356c <main+0x31e>
		__ticks = 1;
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	9e 83       	std	Y+6, r25	; 0x06
    3568:	8d 83       	std	Y+5, r24	; 0x05
    356a:	3f c0       	rjmp	.+126    	; 0x35ea <main+0x39c>
	else if (__tmp > 65535)
    356c:	6f 81       	ldd	r22, Y+7	; 0x07
    356e:	78 85       	ldd	r23, Y+8	; 0x08
    3570:	89 85       	ldd	r24, Y+9	; 0x09
    3572:	9a 85       	ldd	r25, Y+10	; 0x0a
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	3f ef       	ldi	r19, 0xFF	; 255
    3578:	4f e7       	ldi	r20, 0x7F	; 127
    357a:	57 e4       	ldi	r21, 0x47	; 71
    357c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3580:	18 16       	cp	r1, r24
    3582:	4c f5       	brge	.+82     	; 0x35d6 <main+0x388>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3584:	6b 85       	ldd	r22, Y+11	; 0x0b
    3586:	7c 85       	ldd	r23, Y+12	; 0x0c
    3588:	8d 85       	ldd	r24, Y+13	; 0x0d
    358a:	9e 85       	ldd	r25, Y+14	; 0x0e
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e2       	ldi	r20, 0x20	; 32
    3592:	51 e4       	ldi	r21, 0x41	; 65
    3594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	bc 01       	movw	r22, r24
    359e:	cd 01       	movw	r24, r26
    35a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a4:	dc 01       	movw	r26, r24
    35a6:	cb 01       	movw	r24, r22
    35a8:	9e 83       	std	Y+6, r25	; 0x06
    35aa:	8d 83       	std	Y+5, r24	; 0x05
    35ac:	0f c0       	rjmp	.+30     	; 0x35cc <main+0x37e>
    35ae:	88 ec       	ldi	r24, 0xC8	; 200
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	9c 83       	std	Y+4, r25	; 0x04
    35b4:	8b 83       	std	Y+3, r24	; 0x03
    35b6:	8b 81       	ldd	r24, Y+3	; 0x03
    35b8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ba:	01 97       	sbiw	r24, 0x01	; 1
    35bc:	f1 f7       	brne	.-4      	; 0x35ba <main+0x36c>
    35be:	9c 83       	std	Y+4, r25	; 0x04
    35c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35c2:	8d 81       	ldd	r24, Y+5	; 0x05
    35c4:	9e 81       	ldd	r25, Y+6	; 0x06
    35c6:	01 97       	sbiw	r24, 0x01	; 1
    35c8:	9e 83       	std	Y+6, r25	; 0x06
    35ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35cc:	8d 81       	ldd	r24, Y+5	; 0x05
    35ce:	9e 81       	ldd	r25, Y+6	; 0x06
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	69 f7       	brne	.-38     	; 0x35ae <main+0x360>
    35d4:	14 c0       	rjmp	.+40     	; 0x35fe <main+0x3b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35d6:	6f 81       	ldd	r22, Y+7	; 0x07
    35d8:	78 85       	ldd	r23, Y+8	; 0x08
    35da:	89 85       	ldd	r24, Y+9	; 0x09
    35dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    35de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	9e 83       	std	Y+6, r25	; 0x06
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	8d 81       	ldd	r24, Y+5	; 0x05
    35ec:	9e 81       	ldd	r25, Y+6	; 0x06
    35ee:	9a 83       	std	Y+2, r25	; 0x02
    35f0:	89 83       	std	Y+1, r24	; 0x01
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	9a 81       	ldd	r25, Y+2	; 0x02
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <main+0x3a8>
    35fa:	9a 83       	std	Y+2, r25	; 0x02
    35fc:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(1000);
						LCD_ClearDisplay();
    35fe:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
						numberOfWrongPasswords++;
    3602:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3604:	8f 5f       	subi	r24, 0xFF	; 255
    3606:	8e 8f       	std	Y+30, r24	; 0x1e
						LCD_displayString("plz enter pass:");
    3608:	80 e6       	ldi	r24, 0x60	; 96
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
						LCD_SetCursor(1, 0);
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	60 e0       	ldi	r22, 0x00	; 0
    3614:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
					}
				}
				/*break the loop if the user entered wrong password three times or the right password*/
				if (repeatFlag) {
    3618:	8f 8d       	ldd	r24, Y+31	; 0x1f
    361a:	88 23       	and	r24, r24
    361c:	09 f4       	brne	.+2      	; 0x3620 <main+0x3d2>
    361e:	7f ce       	rjmp	.-770    	; 0x331e <main+0xd0>
					repeatFlag = FALSE;
    3620:	1f 8e       	std	Y+31, r1	; 0x1f
					break;
				}
			}
		}
		/*if the user choice was to open the door*/
		if (optionChoice == '+') {
    3622:	8b a1       	ldd	r24, Y+35	; 0x23
    3624:	8b 32       	cpi	r24, 0x2B	; 43
    3626:	09 f0       	breq	.+2      	; 0x362a <main+0x3dc>
    3628:	3e c0       	rjmp	.+124    	; 0x36a6 <main+0x458>
			/*sends 'T'to inform control ECU that the user wants to open the door*/
			UART_sendData('T');
    362a:	84 e5       	ldi	r24, 0x54	; 84
    362c:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <UART_sendData>
			/*display message*/
			LCD_ClearDisplay();
    3630:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
			LCD_SetCursor(0, 4);
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	64 e0       	ldi	r22, 0x04	; 4
    3638:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
			LCD_displayString("Door is");
    363c:	8e ee       	ldi	r24, 0xEE	; 238
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
			LCD_SetCursor(1, 3);
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	63 e0       	ldi	r22, 0x03	; 3
    3648:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
			LCD_displayString("Unlocking");
    364c:	86 ef       	ldi	r24, 0xF6	; 246
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
			/*wait until the control ECU informs that 15 seconds are finished*/
			while (UART_receiveData() != 'U')
    3654:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    3658:	85 35       	cpi	r24, 0x55	; 85
    365a:	e1 f7       	brne	.-8      	; 0x3654 <main+0x406>
				;
			/*dispaly message*/
			LCD_ClearDisplay();
    365c:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
			LCD_SetCursor(0, 4);
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	64 e0       	ldi	r22, 0x04	; 4
    3664:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
			LCD_displayString("Welcome");
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	91 e0       	ldi	r25, 0x01	; 1
    366c:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
			/*wait until the control ECU informs that 3 seconds are finished*/
			while (UART_receiveData() != 'H')
    3670:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    3674:	88 34       	cpi	r24, 0x48	; 72
    3676:	e1 f7       	brne	.-8      	; 0x3670 <main+0x422>
				;
			/*dispaly message*/
			LCD_ClearDisplay();
    3678:	0e 94 0a 10 	call	0x2014	; 0x2014 <LCD_ClearDisplay>
			LCD_SetCursor(0, 4);
    367c:	80 e0       	ldi	r24, 0x00	; 0
    367e:	64 e0       	ldi	r22, 0x04	; 4
    3680:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
			LCD_displayString("Door is");
    3684:	8e ee       	ldi	r24, 0xEE	; 238
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
			LCD_SetCursor(1, 3);
    368c:	81 e0       	ldi	r24, 0x01	; 1
    368e:	63 e0       	ldi	r22, 0x03	; 3
    3690:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_SetCursor>
			LCD_displayString("Locking");
    3694:	88 e0       	ldi	r24, 0x08	; 8
    3696:	91 e0       	ldi	r25, 0x01	; 1
    3698:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <LCD_displayString>
			/*wait until the control ECU informs that 15 seconds are finished*/
			while (UART_receiveData() != 'L')
    369c:	0e 94 03 08 	call	0x1006	; 0x1006 <UART_receiveData>
    36a0:	8c 34       	cpi	r24, 0x4C	; 76
    36a2:	e1 f7       	brne	.-8      	; 0x369c <main+0x44e>
    36a4:	1a ce       	rjmp	.-972    	; 0x32da <main+0x8c>
				;
			/*if the user choice was to reset the password*/
		} else if (optionChoice == '-') {
    36a6:	8b a1       	ldd	r24, Y+35	; 0x23
    36a8:	8d 32       	cpi	r24, 0x2D	; 45
    36aa:	09 f0       	breq	.+2      	; 0x36ae <main+0x460>
    36ac:	16 ce       	rjmp	.-980    	; 0x32da <main+0x8c>
			SetPassword();
    36ae:	0e 94 df 17 	call	0x2fbe	; 0x2fbe <SetPassword>
    36b2:	13 ce       	rjmp	.-986    	; 0x32da <main+0x8c>

000036b4 <__mulsi3>:
    36b4:	62 9f       	mul	r22, r18
    36b6:	d0 01       	movw	r26, r0
    36b8:	73 9f       	mul	r23, r19
    36ba:	f0 01       	movw	r30, r0
    36bc:	82 9f       	mul	r24, r18
    36be:	e0 0d       	add	r30, r0
    36c0:	f1 1d       	adc	r31, r1
    36c2:	64 9f       	mul	r22, r20
    36c4:	e0 0d       	add	r30, r0
    36c6:	f1 1d       	adc	r31, r1
    36c8:	92 9f       	mul	r25, r18
    36ca:	f0 0d       	add	r31, r0
    36cc:	83 9f       	mul	r24, r19
    36ce:	f0 0d       	add	r31, r0
    36d0:	74 9f       	mul	r23, r20
    36d2:	f0 0d       	add	r31, r0
    36d4:	65 9f       	mul	r22, r21
    36d6:	f0 0d       	add	r31, r0
    36d8:	99 27       	eor	r25, r25
    36da:	72 9f       	mul	r23, r18
    36dc:	b0 0d       	add	r27, r0
    36de:	e1 1d       	adc	r30, r1
    36e0:	f9 1f       	adc	r31, r25
    36e2:	63 9f       	mul	r22, r19
    36e4:	b0 0d       	add	r27, r0
    36e6:	e1 1d       	adc	r30, r1
    36e8:	f9 1f       	adc	r31, r25
    36ea:	bd 01       	movw	r22, r26
    36ec:	cf 01       	movw	r24, r30
    36ee:	11 24       	eor	r1, r1
    36f0:	08 95       	ret

000036f2 <__udivmodhi4>:
    36f2:	aa 1b       	sub	r26, r26
    36f4:	bb 1b       	sub	r27, r27
    36f6:	51 e1       	ldi	r21, 0x11	; 17
    36f8:	07 c0       	rjmp	.+14     	; 0x3708 <__udivmodhi4_ep>

000036fa <__udivmodhi4_loop>:
    36fa:	aa 1f       	adc	r26, r26
    36fc:	bb 1f       	adc	r27, r27
    36fe:	a6 17       	cp	r26, r22
    3700:	b7 07       	cpc	r27, r23
    3702:	10 f0       	brcs	.+4      	; 0x3708 <__udivmodhi4_ep>
    3704:	a6 1b       	sub	r26, r22
    3706:	b7 0b       	sbc	r27, r23

00003708 <__udivmodhi4_ep>:
    3708:	88 1f       	adc	r24, r24
    370a:	99 1f       	adc	r25, r25
    370c:	5a 95       	dec	r21
    370e:	a9 f7       	brne	.-22     	; 0x36fa <__udivmodhi4_loop>
    3710:	80 95       	com	r24
    3712:	90 95       	com	r25
    3714:	bc 01       	movw	r22, r24
    3716:	cd 01       	movw	r24, r26
    3718:	08 95       	ret

0000371a <__udivmodsi4>:
    371a:	a1 e2       	ldi	r26, 0x21	; 33
    371c:	1a 2e       	mov	r1, r26
    371e:	aa 1b       	sub	r26, r26
    3720:	bb 1b       	sub	r27, r27
    3722:	fd 01       	movw	r30, r26
    3724:	0d c0       	rjmp	.+26     	; 0x3740 <__udivmodsi4_ep>

00003726 <__udivmodsi4_loop>:
    3726:	aa 1f       	adc	r26, r26
    3728:	bb 1f       	adc	r27, r27
    372a:	ee 1f       	adc	r30, r30
    372c:	ff 1f       	adc	r31, r31
    372e:	a2 17       	cp	r26, r18
    3730:	b3 07       	cpc	r27, r19
    3732:	e4 07       	cpc	r30, r20
    3734:	f5 07       	cpc	r31, r21
    3736:	20 f0       	brcs	.+8      	; 0x3740 <__udivmodsi4_ep>
    3738:	a2 1b       	sub	r26, r18
    373a:	b3 0b       	sbc	r27, r19
    373c:	e4 0b       	sbc	r30, r20
    373e:	f5 0b       	sbc	r31, r21

00003740 <__udivmodsi4_ep>:
    3740:	66 1f       	adc	r22, r22
    3742:	77 1f       	adc	r23, r23
    3744:	88 1f       	adc	r24, r24
    3746:	99 1f       	adc	r25, r25
    3748:	1a 94       	dec	r1
    374a:	69 f7       	brne	.-38     	; 0x3726 <__udivmodsi4_loop>
    374c:	60 95       	com	r22
    374e:	70 95       	com	r23
    3750:	80 95       	com	r24
    3752:	90 95       	com	r25
    3754:	9b 01       	movw	r18, r22
    3756:	ac 01       	movw	r20, r24
    3758:	bd 01       	movw	r22, r26
    375a:	cf 01       	movw	r24, r30
    375c:	08 95       	ret

0000375e <__divmodsi4>:
    375e:	97 fb       	bst	r25, 7
    3760:	09 2e       	mov	r0, r25
    3762:	05 26       	eor	r0, r21
    3764:	0e d0       	rcall	.+28     	; 0x3782 <__divmodsi4_neg1>
    3766:	57 fd       	sbrc	r21, 7
    3768:	04 d0       	rcall	.+8      	; 0x3772 <__divmodsi4_neg2>
    376a:	d7 df       	rcall	.-82     	; 0x371a <__udivmodsi4>
    376c:	0a d0       	rcall	.+20     	; 0x3782 <__divmodsi4_neg1>
    376e:	00 1c       	adc	r0, r0
    3770:	38 f4       	brcc	.+14     	; 0x3780 <__divmodsi4_exit>

00003772 <__divmodsi4_neg2>:
    3772:	50 95       	com	r21
    3774:	40 95       	com	r20
    3776:	30 95       	com	r19
    3778:	21 95       	neg	r18
    377a:	3f 4f       	sbci	r19, 0xFF	; 255
    377c:	4f 4f       	sbci	r20, 0xFF	; 255
    377e:	5f 4f       	sbci	r21, 0xFF	; 255

00003780 <__divmodsi4_exit>:
    3780:	08 95       	ret

00003782 <__divmodsi4_neg1>:
    3782:	f6 f7       	brtc	.-4      	; 0x3780 <__divmodsi4_exit>
    3784:	90 95       	com	r25
    3786:	80 95       	com	r24
    3788:	70 95       	com	r23
    378a:	61 95       	neg	r22
    378c:	7f 4f       	sbci	r23, 0xFF	; 255
    378e:	8f 4f       	sbci	r24, 0xFF	; 255
    3790:	9f 4f       	sbci	r25, 0xFF	; 255
    3792:	08 95       	ret

00003794 <__prologue_saves__>:
    3794:	2f 92       	push	r2
    3796:	3f 92       	push	r3
    3798:	4f 92       	push	r4
    379a:	5f 92       	push	r5
    379c:	6f 92       	push	r6
    379e:	7f 92       	push	r7
    37a0:	8f 92       	push	r8
    37a2:	9f 92       	push	r9
    37a4:	af 92       	push	r10
    37a6:	bf 92       	push	r11
    37a8:	cf 92       	push	r12
    37aa:	df 92       	push	r13
    37ac:	ef 92       	push	r14
    37ae:	ff 92       	push	r15
    37b0:	0f 93       	push	r16
    37b2:	1f 93       	push	r17
    37b4:	cf 93       	push	r28
    37b6:	df 93       	push	r29
    37b8:	cd b7       	in	r28, 0x3d	; 61
    37ba:	de b7       	in	r29, 0x3e	; 62
    37bc:	ca 1b       	sub	r28, r26
    37be:	db 0b       	sbc	r29, r27
    37c0:	0f b6       	in	r0, 0x3f	; 63
    37c2:	f8 94       	cli
    37c4:	de bf       	out	0x3e, r29	; 62
    37c6:	0f be       	out	0x3f, r0	; 63
    37c8:	cd bf       	out	0x3d, r28	; 61
    37ca:	09 94       	ijmp

000037cc <__epilogue_restores__>:
    37cc:	2a 88       	ldd	r2, Y+18	; 0x12
    37ce:	39 88       	ldd	r3, Y+17	; 0x11
    37d0:	48 88       	ldd	r4, Y+16	; 0x10
    37d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    37d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    37d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    37d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    37da:	9b 84       	ldd	r9, Y+11	; 0x0b
    37dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    37de:	b9 84       	ldd	r11, Y+9	; 0x09
    37e0:	c8 84       	ldd	r12, Y+8	; 0x08
    37e2:	df 80       	ldd	r13, Y+7	; 0x07
    37e4:	ee 80       	ldd	r14, Y+6	; 0x06
    37e6:	fd 80       	ldd	r15, Y+5	; 0x05
    37e8:	0c 81       	ldd	r16, Y+4	; 0x04
    37ea:	1b 81       	ldd	r17, Y+3	; 0x03
    37ec:	aa 81       	ldd	r26, Y+2	; 0x02
    37ee:	b9 81       	ldd	r27, Y+1	; 0x01
    37f0:	ce 0f       	add	r28, r30
    37f2:	d1 1d       	adc	r29, r1
    37f4:	0f b6       	in	r0, 0x3f	; 63
    37f6:	f8 94       	cli
    37f8:	de bf       	out	0x3e, r29	; 62
    37fa:	0f be       	out	0x3f, r0	; 63
    37fc:	cd bf       	out	0x3d, r28	; 61
    37fe:	ed 01       	movw	r28, r26
    3800:	08 95       	ret

00003802 <_exit>:
    3802:	f8 94       	cli

00003804 <__stop_program>:
    3804:	ff cf       	rjmp	.-2      	; 0x3804 <__stop_program>
